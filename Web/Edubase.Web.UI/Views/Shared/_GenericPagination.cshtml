@model dynamic
@{
    var startResult = @Model.StartIndex + 1;
    var endResult = (@Model.StartIndex + @Model.PageSize > @Model.Count) ? @Model.Count : @Model.StartIndex + @Model.PageSize;
    var currentPage = @Model.StartIndex / @Model.PageSize;
    var totalPages = @Model.Results.Count / @Model.PageSize;
    var maxPages = ViewData["maxPages"] != null ? (int)ViewData["maxPages"] : 10;
    var paginationStart = 0;
    var paginationFinish = @Model.PageCount;

}

@if (Model.PageCount > maxPages)
{
    if (currentPage < 5)
    {
        paginationFinish = maxPages;
    }
    else if (currentPage + 5 > Model.PageCount)
    {
        paginationFinish = Model.PageCount;
        paginationStart = paginationFinish - maxPages;
    }
    else if (currentPage >= 5)
    {
        paginationFinish = currentPage + 5;
        paginationStart = paginationFinish - maxPages;
    }

}

<div class="pagination">
    @if (ViewData.ContainsKey("resultsDescription"))
    {
        <p>@Html.Raw(ViewData["resultsDescription"])</p>
    }
    else 
    {
        <p @Html.Conditional(ViewData.ContainsKey("hideDescription"),  "class='hidden'")>Showing @startResult - @endResult of @Model.Count</p>
    }
    
    <ul class="pagination-links">

        @if (currentPage > 0)
        {
            <li>
                <a href="@Url.Current(new {startIndex = ((currentPage - 1) * Model.PageSize), Count = Model.Count})" class="pagination-prev">Previous</a>
            </li>
        }

        @for (int i = paginationStart; i < paginationFinish; i++)
        {
            var displayPage = i + 1;
            if (i == currentPage)
            {
                <li><span class="go-nowhere numeric-pagination">@displayPage.ToString()</span></li>
            }
            else
            {
                var tabletClass = (i >= currentPage - 2 && i <= currentPage + 2) ? "tablet-pagination" : "";
                <li>
                    <a href="@Url.Current(new {startIndex = (i * Model.PageSize), Count = Model.Count})" class="numeric-pagination @tabletClass">@displayPage</a>
                </li>

            }
        }

        @if (currentPage < Model.PageCount - 1)
        {
            <li>
                <a href="@Url.Current(new {startIndex = ((currentPage + 1) * Model.PageSize), Count = Model.Count})" class="pagination-next">Next</a>
            </li>
        }

    </ul>
</div>

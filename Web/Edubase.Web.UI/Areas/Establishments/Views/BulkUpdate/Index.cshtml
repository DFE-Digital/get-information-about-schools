@using Microsoft.Ajax.Utilities
@model BulkUpdateViewModel

@{
    ViewBag.Title = string.Concat(!ViewData.ModelState.IsValid ? "Error: " : string.Empty, "Establishment bulk update");
}

<div class="breadcrumbs">
    <ul>
        <li>
            @Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)
        </li>
        <li>
            @Html.ActionLink("Tools", "Index", "Tools", new { area = "" }, null)
        </li>
    </ul>
</div>

@Html.Partial("_ValidationSummary", ViewData.ModelState)

@if (Model.Result?.RowErrors > 0)
{
    <div class="error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1">
        <h2 id="error-summary-title" class="heading-medium error-summary-heading">Incorrect or missing details</h2>
        <ul class="error-summary-list">
            @if (Model.Result.Errors.Any(x => x.Code == "error.mismatchType.EduBaseBulkUpload-MultipleColumnsfile.type.bulkUpload"))
            {
                <li>
                    <a href="#BulkFile">Multiple column files must be XLSX and bulk upload files can be XLSX or tab delimited text files. For more information, see the Establishment bulk update guidance document below within 'Help with preparing files'</a>
                </li>
            } else if (Model.Result.Errors.Any())
            {
                <li>
                    <a href="#BulkFile">@Model.Result.Errors.First().Message</a>
                </li>
            } else
            {
                if (Model.Result.IsFailure())
                {
                    <li>
                        <a href="#error-log">Errors were found with your data. Correct your data before resubmitting.</a>
                    </li>
                }

                if (Model.Result.CompletedWithErrors())
                {
                    <li>
                        <a href="#import-errors">@Model.Result.RowErrors rows encountered errors during import. Correct your data before resubmitting.</a>
                    </li>
                }
            }
        </ul>
    </div>
}


@using (Html.BeginRouteForm("ProcessBulkUpdate", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="grid-row">
        <div class="column-full">
            @if (Model.Result != null && Model.Result.IsCompleted() && !Model.Result.IsFailure() && !Model.Result.CompletedWithErrors())
            {
                <div class="pending-updates-message js-dismiss-message js-trigger-aria-live" role="alert">
                    <div class="tick"></div>
                    <p class="message-text" aria-live="polite">Your bulk update was successful.</p>
                    <a class="cross" href="#"><span class="visually-hidden">Dismiss notification</span></a>
                </div>
            }
            <h1 class="heading-xlarge">Establishment bulk update</h1>

            <p class="text">
                Update establishment records by uploading a CSV or XLSX file. Multiple column updates must be in XLSX format.
            </p>
        </div>
        <div class="column-full">

            <div class="expanding-content-wrapper" data-update-text="false">
                <a href="#" class="expanding-content-trigger">
                    Help with preparing files
                </a>
                <div class="expanding-content panel-indent">
                    <p>For a step by step guide to prepare documents for bulk update please download this file.</p>
                    <p class="download-list-item">
                        <a href="https://edubasepr.blob.core.windows.net/guidance/Establishment_Bulk_Update_Guide.pdf" target="_blank" rel="nofollow" class="js-track" data-track="bulkUpdate|establish-bulk-update|download">Establishment bulk update guidance PDF, 353KB <span class="visually-hidden">Opens in new window</span></a>
                    </p>
                </div>
            </div>

            @if (Model.Result != null)
            {
                if (!Model.Result.Errors.Any())
                {
                    if (Model.Result.IsFailure())
                    {
                        <div class="form-group error" id="error-log">
                            <p class="error-message">Please download the error log to correct your data before resubmitting</p>
                            <p class="download-list-item">
                                <a href="@Model.Result.ErrorLogFile.Url">@Model.Result.ErrorLogFile.Name</a>
                            </p>
                        </div>
                    }

                    if (Model.Result.CompletedWithErrors())
                    {
                        <div class="form-group error" id="import-errors">
                            <p class="error-message">@Model.Result.RowErrors rows encountered errors during import. Please download the error log to correct your data before resubmitting</p>
                            <p class="download-list-item">
                                <a href="@Model.Result.ErrorLogFile.Url">@Model.Result.ErrorLogFile.Name</a>
                            </p>
                        </div>
                    }
                }
            }

        </div>
        <div class="column-half">
            <div class="form-group push--bottom @Html.ValidationCssClassFor(x => x.BulkFile)">
                <label for="BulkFile" class="form-label">Upload a file</label>
                <div class="expanding-content-wrapper flush--bottom" data-update-text="false">
                    <a href="#" class="expanding-content-trigger">
                        Max file size and other limits
                    </a>
                    <div class="expanding-content panel-indent">
                        <p>Max file size is 1MB. There are also limits of:
                            <ul class="list-bullet inside flush--bottom">
                                <li>
                                    5,000 rows per file for back office users
                                </li>
                                <li>
                                    1,000 rows per file for EFADO, SFC and DDCE users
                                </li>
                                <li>
                                    200 rows per file for establishment and multi-academy trust users
                                </li>
                            </ul>
                        </p>
                    </div>
                </div>
                @Html.ValidationMessageFor(x => x.BulkFile)
                @Html.TextBoxFor(x => x.BulkFile, new { type = "file" })
            </div>

            <div class="form-group push--bottom @Html.ValidationCssClassFor(x => x.BulkUpdateType)">
                <label class="form-label" for="BulkUpdateType">
                    Select file type
                </label>
                @Html.ValidationMessageFor(x => x.BulkUpdateType)
                @Html.EnumDropDownListFor(x => x.BulkUpdateType, "Select...", new { @class = "form-control" })
            </div>

            @Html.EditorFor(m => m.EffectiveDate, new { title = "Effective date (optional)" })

            @if (Model.CanOverrideCRProcess)
            {
                <div class="form-group push--ends">
                    <div class="multiple-choice">
                        @Html.CheckBoxFor(x => x.OverrideCRProcess, new { @id = "override-cr" })
                        @Html.LabelFor(x => x.OverrideCRProcess, "Override CR", new { @for = "override-cr" })
                    </div>
                </div>
            }

        </div>
        <div class="column-full">
            <button type="submit" class="button mobile-full-width" value="Submit">Submit</button>
            <a href="/Tools" class="button button-secondary cancel mobile-full-width">Cancel</a>
        </div>

</div>
}


@section ViewScripts{
    <script src="/public/assets/scripts/standalone/accessibility.js"></script>
}

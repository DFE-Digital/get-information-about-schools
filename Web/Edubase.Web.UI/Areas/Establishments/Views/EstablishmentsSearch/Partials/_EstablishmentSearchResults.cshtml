@using Edubase.Web.UI.Models.Search
@using Edubase.Web.UI.Helpers
@using Edubase.Common
@using Edubase.Services.Enums
@model EstablishmentSearchViewModel
@using M = Edubase.Web.UI.Areas.Establishments.Models.Search.EstablishmentSearchViewModel;
@{
    var endResult = (@Model.StartIndex + @Model.PageSize > @Model.Count) ? @Model.Count : @Model.StartIndex + @Model.PageSize;
}

@if (Model.HasError)
{
    <div class="column-two-thirds">
        <p class="no-school-results">@Model.Error</p>
    </div>
}
else if (Model.Results.Count > 0)
{
    <div class="search-results-header">

      <div class="top-pagination">
            @Html.Partial("_GenericPagination", Model, new ViewDataDictionary
            {
                {"resultsDescription", String.Concat("Showing ", @Model.StartIndex + 1, "-", @endResult, " of <span class='result-count'>", @Model.Count, "</span> establishments")},
                {"maxPages", 5 }
            })
        </div>
      
        <div class="form-group">
            @SortBySelector("Sort by")
        </div>
        <a href="#" class="js-enabled search-type-toggle map-link" id="view-map">
            <span class="extraneous">View on a </span>map
        </a>
    </div>
    <ul class="school-results-listing">
        @foreach (var result in Model.Results)
        {
            <li>
                <h2>@Html.ActionLink(result.Name.Clean() ?? "(name not recorded)", "Details", "Establishment", new { id = result.Urn, area = "Establishments", searchQueryString = Model.SearchQueryString }, new { @class = "bold-small" })</h2>
                @if (Model.EstablishmentStatuses.FirstOrDefault(x => x.Id == result.StatusId).Name == "Closed")
                {
                    <p class="additional-closed">Closed</p>
                }
                
                <dl>
                    <dt>Address:</dt>
                    <dd>@Model.Addresses[result]</dd>
                    <dt>Phase / type:</dt>
                    <dd>
                        @(Model.EducationPhases.FirstOrDefault(x => x.Id == result.EducationPhaseId)?.Name ?? "Not recorded"),
                        @((result.TypeId != null && Model.EstablishmentTypeLookup.ContainsKey(result.TypeId.Value)) ? Model.EstablishmentTypeLookup[result.TypeId.Value] : "Not recorded")
                        @*@(Model.EstablishmentTypes.FirstOrDefault(x => x.Id == result.TypeId)?.Name ?? "Not recorded")*@
                    </dd>
                    <dt><abbr title="Unique Reference Number">URN</abbr>:</dt>
                    <dd>@result.Urn</dd>
                    <dt class="inline-details">
                        <abbr title="Local authority - Establishment number">LAESTAB</abbr>:
                    </dt>
                    <dd>@Model.LAESTABs[result]</dd>
                    <dt>Status:</dt>
                    <dd>@(Model.EstablishmentStatuses.FirstOrDefault(x => x.Id == result.StatusId)?.Name ?? "Not recorded")</dd>
                    <dt>Local authority name:</dt>
                    <dd>@(Model.LocalAuthorities.FirstOrDefault(x => x.Id == result.LocalAuthorityId)?.Name ?? "Not recorded")</dd>
                    @if (Model.SearchType == eSearchType.Location)
                    {
                        var distanceInMiles = Math.Round(Edubase.Common.Spatial.DistanceCalculator.Calculate(Model.LocationSearchCoordinate, result.Location).Miles, 2);
                        <dt>Distance:</dt>
                                <dd>@distanceInMiles mile@(Html.Conditional(distanceInMiles != 1, "s"))</dd>
                    }
                </dl>
            </li>
        }
    </ul>
    if (Model.PageCount > 1)
    {
        <div class="lower-pagination">
            @Html.Partial("_GenericPagination", Model, new ViewDataDictionary { { "hideDescription", true } })
        </div>
    }
}
else
{
    <p class="no-school-results">Please try @Html.ActionLink("searching again", "Index", "Search", new { area = "" }, null) using different spelling or words.</p>
}


@helper SortBySelector(string label)
{
        <label class="form-label">@label:</label>
        <select class="form-control trigger-result-update sortby-selector" name="@M.BIND_ALIAS_SORT_BY">
            @if (Model.SearchType == eSearchType.Location)
            {
                <option id="distance" value="d" @Html.Conditional(Model.GetSortOption() == eSortBy.Distance, "selected")>Distance</option>
            }
            <option id="alpha-az" value="a" @Html.Conditional(Model.GetSortOption() == eSortBy.NameAlphabeticalAZ, "selected")>Alphabetical A-Z</option>
            <option id="alpha-za" value="z" @Html.Conditional(Model.GetSortOption() == eSortBy.NameAlphabeticalZA, "selected")>Alphabetical Z-A</option>
        </select>
}
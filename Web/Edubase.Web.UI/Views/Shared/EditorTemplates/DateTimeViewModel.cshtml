@using Edubase.Web.UI.Helpers
@using Edubase.Web.UI.Models
@using System.Web.Mvc
@model DateTimeViewModel
@{
    var cssClassPrefix = "";
    string showBinding = null;
    string messageBinding = null;
    string classBinding = null;
    var labelClassName = "";
    var fieldsetClassName = "";
    var dateHint = "";
    var hideLegend = false;
    bool.TryParse(ViewData["disableHint"]?.ToString(), out var disableHint);
    var legendPrefix = "";
    string tooltipTitle = null;
    string tooltipText = null;
    string tooltipUnderscoredTitle = null;
    var describedByIds = "";

    // Full field ID is required where there are multiple date fields on the same page.
    // Previously, variations of `@legendPrefix + @ViewData.ModelMetadata.PropertyName`
    // were used, but if there are multiple `StartDate` properties on the page then the
    // IDs would clash. This is a more robust solution.
    var fullFieldId = ViewData.TemplateInfo.GetFullHtmlFieldName(Model?.Label)
        .Replace(".", "_")
        .Replace("[", "_")
        .Replace("]", "_");


    if (ViewData["dateHint"] != null)
    {
        dateHint = ViewData["dateHint"].ToString();
    }

    if (ViewData["labelClass"] != null)
    {
        labelClassName = ViewData["labelClass"].ToString();
    }

    if (ViewData["hideLegend"] != null)
    {
        hideLegend = true;
    }

    if (ViewData["fieldsetClassName"] != null)
    {
        fieldsetClassName = ViewData["fieldsetClassName"].ToString();
    }
    if (!bool.TryParse(ViewData["showReactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }

    if (ViewData["vueModel"] != null)
    {
        showBinding = string.Concat((string)ViewData["vueModel"], "Error");
        messageBinding = string.Concat((string)ViewData["vueModel"], "ErrorMessage");
        classBinding = string.Concat("v-bind:class=\"[", showBinding, "?'govuk-form-group--error': '', 'govuk-form-group create-edit-form-group date-group']\"");
    }
    else
    {
        classBinding = "class=\"govuk-form-group create-edit-form-group date-group "
                       // + Html.ValidationGroupCssClass(ViewData.ModelMetadata.PropertyName) + " "
                       + Html.ValidationGroupCssClass(fullFieldId) + " "
                       + Html.ValidationCssClassFor(x => x) + " "
                       + Html.ValidationCssClassFor(x => x.Day) + " "
                       + Html.ValidationCssClassFor(x => x.Month) + " "
                       + Html.ValidationCssClassFor(x => x.Year) + "\"";
    }

    if (ViewData["ClassPrefix"] != null)
    {
        cssClassPrefix = ViewData["ClassPrefix"].ToString();
    }

    if (ViewData["editorPrefix"] != null)
    {
        legendPrefix = ViewData["editorPrefix"] + "_";
    }

    //if (ViewData["tooltipTitle"] != null && ViewData["tooltipText"] != null)
    //{
    tooltipTitle = ViewData["title"]?.ToString() ?? ViewData.ModelMetadata.DisplayName;
    tooltipUnderscoredTitle = tooltipTitle.ToLower().Replace(" ", "_");
    tooltipText = ViewData["tooltipText"]?.ToString();
    //}

    var legendId = string.Concat(legendPrefix, fullFieldId);

}
<div @Html.Raw(classBinding)>

    @{
        describedByIds = describedByIds + " " + legendId + "-hint";
    }
    @{
        if (!disableHint)
        {
            describedByIds = describedByIds + " " + @fullFieldId + "-errors";
        }
    }
    <fieldset id="@fullFieldId-date-error" class="govuk-fieldset range-group @fieldsetClassName">
        @if (ViewData["inFilters"] != null)
        {
            <span class="govuk-error-message hidden">Please check the date(s) you have entered</span>
            <span class="govuk-error-message hidden date-range-error">Please use a valid date range</span>
        }

        @if (!string.IsNullOrWhiteSpace(tooltipText))
        {
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-@tooltipUnderscoredTitle">
                    <h3 class="govuk-heading-s make-modal-header">@tooltipTitle</h3>
                    <p class="govuk-body">@tooltipText</p>
                </div>
            </div>
        }

        <legend class="govuk-fieldset__legend @Html.Conditional(hideLegend, "hidden")" id="@fullFieldId">
            @(string.IsNullOrWhiteSpace(ViewData["title"] as string) ? ViewData.ModelMetadata.DisplayName : ViewData["title"])
            @if (!string.IsNullOrWhiteSpace(tooltipText))
            {
                <a id="@tooltipUnderscoredTitle-ToolTipLink" href="#help-text-@tooltipUnderscoredTitle" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the @tooltipTitle.ToLower() field</span>
                    @await Html.PartialAsync("_DialogHiddenPrompt", Model);
                </a>
            }
        </legend>

        @{
            if (fullFieldId != string.Empty && !legendId.Equals(fullFieldId))
            {
                <div id="@fullFieldId"></div>
            }

            foreach (var modelStateKey in ViewData.ModelState.Keys)
            {
                var testStateKey = modelStateKey;
                var linkStateKey = testStateKey;
                if (testStateKey.EndsWith(".Day"))
                {
                    testStateKey = testStateKey.Replace(".Day", "");
                    linkStateKey = linkStateKey.Replace(".Day", "_Day");
                }
                if (testStateKey.EndsWith(".Month"))
                {
                    testStateKey = testStateKey.Replace(".Month", "");
                    linkStateKey = linkStateKey.Replace(".Month", "_Month");
                }
                if (testStateKey.EndsWith(".Year"))
                {
                    testStateKey = testStateKey.Replace(".Year", "");
                    linkStateKey = linkStateKey.Replace(".Year", "_Year");
                }

                if (testStateKey.Equals(fullFieldId, StringComparison.InvariantCultureIgnoreCase) &&
                    !testStateKey.Equals(fullFieldId, StringComparison.InvariantCulture))
                {
                    <div id="@linkStateKey"></div>
                }
            }
        }

        @if (!disableHint)
        {
            if (dateHint != string.Empty)
            {
                <p class="govuk-hint" id="@legendId-hint">For example, @dateHint</p>
            }
            else
            {
                <p class="govuk-hint" id="@legendId-hint">For example, 20 03 2003</p>
            }
        }

        @if (showReactivationWarning)
        {
            <div class="warning-message">
                <p>Changing this date may reactivate the record</p>
            </div>
        }

        <span id="@legendId-errors">
            @{
                var errContent = new List<IHtmlContent>
                {
                    Html.ValidationMessageFor(x => x, null, new { @class = "govuk-error-message" }),
                    Html.ValidationMessageFor(x => x.Day, null, new { @class = "govuk-error-message" }),
                    Html.ValidationMessageFor(x => x.Month, null, new { @class = "govuk-error-message" }),
                    Html.ValidationMessageFor(x => x.Year, null, new { @class = "govuk-error-message" })
                };

                if (!ViewData.ModelState.ContainsKey(fullFieldId) ||
                !ViewData.ModelState[fullFieldId].Errors.Any())
                {
                    // Replace this with a custom helper or remove if not needed
                    // errContent.Insert(0, Html.ValidationMessageNested(fullFieldId));
                }

                foreach (var content in errContent)
                {
                    using (var writer = new System.IO.StringWriter())
                    {
                        content?.WriteTo(writer, System.Text.Encodings.Web.HtmlEncoder.Default);
                        var html = writer.ToString();

                        var withBreaks = System.Text.RegularExpressions.Regex.Replace(
                        html,
                        "&lt;br\\s*/?&gt;",
                        "<br />",
                        System.Text.RegularExpressions.RegexOptions.IgnoreCase
                        );

                        @Html.Raw(withBreaks)
                    }
                }
            }
        </span>


        @if (ViewData["vueModel"] != null)
        {
            <span class="govuk-error-message" v-show="@showBinding" v-html="@messageBinding"></span>
        }
        @{
            var dayCssClasses = string.Join(" ",
                Html.TextBoxValidationClass(x => x.Day),
                "govuk-input",
                "govuk-date-input__input",
                "govuk-input--width-2",
                "date-text-day"
            ).Trim();

            var monthCssClasses = string.Join(" ",
                Html.TextBoxValidationClass(x => x.Month),
                "govuk-input",
                "govuk-date-input__input",
                "govuk-input--width-2",
                "date-text-month"
            ).Trim();

            var yearCssClasses = string.Join(" ",
                Html.TextBoxValidationClass(x => x.Year),
                "govuk-input",
                "govuk-date-input__input",
                "govuk-input--width-4",
                "date-text-year"
            ).Trim();
        }

        <div class="govuk-date-input">
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Day, new { @class = string.Concat(labelClassName, " govuk-label govuk-date-input__label") })
                    @Html.TextBox("Day", Model?.Day.HasValue == true ? Model.Day.Value.ToString("00") : "", GetAttributes(ViewData["readonly"] as bool? ?? false, dayCssClasses, 2, ViewData["vueModel"] != null ? string.Concat((string)ViewData["vueModel"], "Day") : null))
                </div>
            </div>
            <div class="govuk-date-input__item gias-month-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Month, new { @class = string.Concat(labelClassName, " govuk-label govuk-date-input__label") })
                    @Html.TextBox("Month", Model?.Month.HasValue == true ? Model.Month.Value.ToString("00") : "", GetAttributes(ViewData["readonly"] as bool? ?? false, monthCssClasses, 2, ViewData["vueModel"] != null ? string.Concat((string)ViewData["vueModel"], "Month") : null))
                </div>
            </div>
            <div class="govuk-date-input__item gias-year-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Year, new { @class = string.Concat(labelClassName, " govuk-label govuk-date-input__label") })
                    @Html.TextBox("Year", Model?.Year.HasValue == true ? Model.Year.Value.ToString("0000") : "", GetAttributes(ViewData["readonly"] as bool? ?? false, yearCssClasses, 4, ViewData["vueModel"] != null ? string.Concat((string)ViewData["vueModel"], "Year") : null))
                </div>
            </div>
        </div>
        @if (ViewData["readonly"] as bool? ?? false)
        {
            @Html.HiddenFor(x => x.Day)
            @Html.HiddenFor(x => x.Month)
            @Html.HiddenFor(x => x.Year)
        }
    </fieldset>
</div>

@functions {
    public static Dictionary<string, object> GetAttributes(bool? readOnly, string cssClasses, int maxlength, string vueModel)
    {
        var attributes = new Dictionary<string, object>
        {
            { "class", cssClasses },
            { "maxlength", maxlength },
            { "inputmode", "numeric" }
        };

        if (readOnly.GetValueOrDefault())
        {
            attributes["disabled"] = "disabled";
        }

        if (!string.IsNullOrEmpty(vueModel))
        {
            attributes["v-model"] = vueModel;
        }

        return attributes;
    }
}


<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.IdentityModel.Xml</name>
    </assembly>
    <members>
        <member name="T:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom">
            <summary>
            Defines a XML transform that applies C14n canonicalization and produces a hash over the transformed XML nodes.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.Algorithm">
            <summary>
            Gets the algorithm
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.IncludeComments">
            <summary>
            Gets or sets a value indicating if this transform should include comments.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.InclusiveNamespacesPrefixList">
            <summary>
            Gets or sets the a PrefixList to use when there is a need to include InclusiveNamespaces writing token.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.ProcessAndDigest(Microsoft.IdentityModel.Xml.XmlTokenStream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Processes a set of XML nodes and returns the hash of the octets.
            </summary>
            <param name="tokenStream">the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/> that has the XML nodes to process.</param>
            <param name="hashAlg">the <see cref="T:System.Security.Cryptography.HashAlgorithm"/>to use</param>
            <returns>the hash of the processed XML nodes.</returns>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader">
            <summary>
            Wraps a <see cref="T:System.Xml.XmlDictionaryWriter"/> delegates to InnerReader.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.InnerReader">
            <summary>
            Gets or sets the Inner <see cref="T:System.Xml.XmlDictionaryReader"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Item(System.Int32)">
            <summary>
            Gets the value of the InnerReaders's attribute with the specified index.
            </summary>
            <param name="i">index of the attribute.</param>
            <returns>Attribute value at the specified index.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Item(System.String)">
            <summary>
            Gets the value of the InnerReaders's attribute with the specified Name.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, 
            null is returned.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the InnerReaders's attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespace">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, 
            null is returned.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.AttributeCount">
            <summary>
            Gets the number of InnerReaders's attributes at the current reader position.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.BaseURI">
            <summary>
            Gets the InnerReaders's base Uri of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.CanReadBinaryContent">
            <summary>
            Gets a value indicating if the InnerReader can read binary content
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.CanReadValueChunk">
            <summary>
            Gets a value indicating if the InnerReader can read value chunk.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Depth">
            <summary>
            Gets the  InnerReaders's current depth.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.EOF">
            <summary>
            Gets a value indicating if the InnerReader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.HasValue">
            <summary>
            Gets a value indicating if the InnerReader current node has a Value.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.IsDefault">
            <summary>
            Gets a value indicating if the InnerReader's current node is an attribute that
            was generated from the default value defined in the DTD or Schema.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.IsEmptyElement">
            <summary>
            Gets a value indicating if the InnerReader's current node is empty.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LineNumber">
            <summary>
            Gets the InnerReader's LineNumber
            </summary>
            <remarks>If the InnerReader does not support <see cref="T:System.Xml.IXmlLineInfo"/> 1 is returned.</remarks>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LinePosition">
            <summary>
            Gets the InnerReader's LinePosition.
            </summary>
            <remarks>If the InnerReader does not support <see cref="T:System.Xml.IXmlLineInfo"/> 1 is returned.</remarks>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LocalName">
            <summary>
            Gets the InnerReader's LocalName of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Name">
            <summary>
            Gets the InnerReader's Name of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.NamespaceURI">
            <summary>
            Gets the InnerReader's NamespaceURI of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.NameTable">
            <summary>
            Gets the InnerReader's XmlNameTable at the current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.NodeType">
            <summary>
            Gets the type of the InnerReader's current node type.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Prefix">
            <summary>
            Gets the prefix of the InnerReader's current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ReadState">
            <summary>
            Gets the InnerReader's ReadState. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Value">
            <summary>
            Gets the Value of the InnerReader's current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ValueType">
            <summary>
            Gets the ValueType of InnerReader's current node.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.XmlLang">
            <summary>
            Gets the InnerReader's XmlLang.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.XmlSpace">
            <summary>
            Gets the InnerReader's XmlSpace.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the InnerReader's attribute at the given index.
            </summary>
            <param name="i">The index of the attribute. The index is 0 based index.</param>
            <returns>The value of the attribute at the specified index.</returns>
            <remarks>The method does not move the reader position.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.GetAttribute(System.String)">
            <summary>
            Gets the value of the InnerReader's attribute with the given name.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>The value of the attribute. If the attribute is not found null
            is returned.</returns>
            <remarks>The method does not move the reader position.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the InnerReader's attribute with the given name and namespace Uri.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespace">The namespace of the attribute.</param>
            <returns>The value of the attribute. If the attribute is not found
            null is returned.</returns>
            <remarks>The method does not move the reader.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.HasLineInfo">
            <summary>
            Gets a value indicating if the InnerReader HasLineInfo
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LookupNamespace(System.String)">
            <summary>
            Resolves the InnerReader's namespace prefix in the current element scope.
            </summary>
            <param name="prefix">Prefix whose namespace Uri to be resolved.</param>
            <returns>The namespace Uri to which the prefix matches or null if no matching
            prefix is found.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the InnerReader's attribute with the specified index.
            </summary>
            <param name="index">The index of the attribute.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the InnerReader's attribute with the given local name.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the InnerReader's attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespace">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToElement">
            <summary>
            Moves the InnerReader to a node of type Element.
            </summary>
            <returns>true if the reader is positioned on an element else false</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToFirstAttribute">
            <summary>
            Moves the InnerReader to the first attribute.
            </summary>
            <returns>Returns true if the reader is positioned at a attribute else false.</returns>
            <remarks>When returning false the reader position will not be changed.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.MoveToNextAttribute">
            <summary>
            Moves the InnerReader to the next attribute.
            </summary>
            <returns>Returns true if the reader is positioned at an attribute else false.</returns>
            <remarks>When returning false the reader position will not be changed.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.Read">
            <summary>
            Reads the InnerReader's next node from the stream.
            </summary>
            <returns>true if the next node was read successfully.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ReadAttributeValue">
            <summary>
            Parses the InnerReader's attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>true if there are nodes to return.false if the reader is not positioned on
            an attribute node when the initial call is made or if all the attribute values
            have been read.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the InnerReader's content and returns the Base64 decoded binary bytes.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the InnerReader's content and returns the BinHex decoded binary bytes.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ResolveEntity">
            <summary>
            Resolves the InnerReader's EntityReference nodes.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads large streams of text embedded in an XML document from the InnerReader.
            </summary>
            <param name="buffer">The array of characters that serves as the buffer to which the text contents
            are written. This value cannot be null.</param>
            <param name="index">The offset within the buffer where the System.Xml.XmlReader can start to
            copy the results.</param>
            <param name="count">The maximum number of characters to copy into the buffer. The actual number
            of characters copied is returned from this method.</param>
            <returns>The number of characters read into the buffer. The value zero is returned
            when there is no more text content.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.UseInnerReader">
            <summary>
            Gets the <see cref="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.UseInnerReader"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if <see cref="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.InnerReader"/> is null.</exception>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter">
            <summary>
            Wraps a <see cref="T:System.Xml.XmlDictionaryWriter"/> and delegates to InnerWriter.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter"/>
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.TracingWriter">
            <summary>
            Gets or sets a <see cref="T:System.Xml.XmlDictionaryWriter"/> for tracing.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if 'value' is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InnerWriter">
            <summary>
            Gets or sets the InnerWriter.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if 'value' is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the specified binary bytes as Base64 and writes out the resulting text.
            </summary>
            <param name="buffer">Byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteCData(System.String)">
            <summary>
            Writes out a CDATA block containing the specified text.
            </summary>
            <param name="text">The text to place inside the CDATA block.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteCharEntity(System.Char)">
            <summary>
            Forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch">The Unicode character for which to generate a character entity.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes text one buffer at a time.
            </summary>
            <param name="buffer">Character array containing the text to write.</param>
            <param name="index">The position in the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            Writes the DOCTYPE declaration with the specified name and optional attributes.
            </summary>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are
            replaced with the value of the given arguments.</param>
            <param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid
            is replaced with the value of this argument.</param>
            <param name="subset">If non-null it writes [subset] where subset is replaced with the value of
            this argument.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteEndAttribute">
            <summary>
            Closes the previous System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String) call.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteEndDocument">
            <summary>
            Closes any open elements or attributes and puts the writer back in the Start state.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteEntityRef(System.String)">
            <summary>
            Writes out an entity reference as name.
            </summary>
            <param name="name">The name of the entity reference.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteFullEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?>.
            </summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text">The text to include in the processing instruction.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a character buffer.
            </summary>
            <param name="buffer">Character array containing the text to write.</param>
            <param name="index">The position within the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteRaw(System.String)">
            <summary>
            Writes raw markup manually from a string.
            </summary>
            <param name="data">String containing the text to write.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start of an attribute with the specified local name and namespace URI.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespace">The namespace URI for the attribute.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteStartDocument">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0".
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteStartDocument(System.Boolean)">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version
            "1.0" and the standalone attribute.
            </summary>
            <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no".</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the specified start tag and associates
            it with the given namespace and prefix.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespace">The namespace URI to associate with the element.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteState">
            <summary>
            When overridden in a derived class, gets the state of the writer.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            Generates and writes the surrogate character entity for the surrogate character pair.
            </summary>
            <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
            <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
            <summary>
            Writes an attribute as a xml attribute with the prefix 'xml:'.
            </summary>
            <param name="localName">Localname of the attribute.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
            <summary>
            Writes an xmlns namespace declaration. 
            </summary>
            <param name="prefix">The prefix of the namespace declaration.</param>
            <param name="namespace">The namespace Uri itself.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.LookupPrefix(System.String)">
            <summary>
            Returns the closest prefix defined in the current namespace scope for the namespace URI.
            </summary>
            <param name="namespace">The namespace URI whose prefix to find.</param>
            <returns>The matching prefix or null if no matching namespace URI is found in the
            current scope.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.UseInnerWriter">
            <summary>
            Gets the <see cref="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.UseInnerWriter"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"> if <see cref="P:Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InnerWriter"/> is null.</exception>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.DSigElement">
            <summary>
            Base class for a XmlDsig element as per: https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigElement.#ctor">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.DSigElement"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DSigElement.Id">
            <summary>
            Gets or sets the Id.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DSigElement.Prefix">
            <summary>
            Gets or sets the prefix associated with the element.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.DSigSerializer">
            <summary>
            Reads and writes XML associated with XML DSig https://www.w3.org/TR/2001/PR-xmldsig-core-20010820
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DSigSerializer.Default">
            <summary>
            Returns the default <see cref="T:Microsoft.IdentityModel.Xml.DSigSerializer"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.#cctor">
            <summary>
            Static constructor that initializes the default <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.DSigSerializer"/>
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DSigSerializer.Prefix">
            <summary>
            Gets or sets the prefix to use when writing the Signature element.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadKeyInfo(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-KeyInfo
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> pointing positioned on a &lt;KeyInfo> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <remarks>Only handles IssuerSerial, Ski, SubjectName, Certificate. Unsupported types are skipped. Only a X509 data element is supported.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadX509Data(System.Xml.XmlReader)">
            <summary>
            Reads the "X509DataElement" element conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-X509Data.
            </summary>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/> positioned on a <see cref="F:Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509Data"/> element.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadIssuerSerial(System.Xml.XmlReader)">
            <summary>
            Reads the "X509IssuerSerial" element conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-X509Data.
            </summary>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/> positioned on a <see cref="F:Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509IssuerSerial"/> element.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadRSAKeyValue(System.Xml.XmlReader)">
            <summary>
            Reads the "RSAKeyValue" element conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-RSAKeyValue.
            </summary>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/> positioned on a <see cref="F:Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.RSAKeyValue"/> element.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignature(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Signature
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;Signature> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.Signature"/></returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignedInfo(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-SignedInfo
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;SignedInfo> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.SignedInfo"/></returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadReference(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Reference
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;Reference> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.Reference"/></returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadTransforms(System.Xml.XmlReader,Microsoft.IdentityModel.Xml.Reference)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Transforms
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;Transforms> element.</param>
            <param name="reference">a <see cref="T:Microsoft.IdentityModel.Xml.Reference"/> to attach transforms.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reference"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignatureMethod(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-SignatureMethod
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;SignatureMethod> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <returns>A string with the signature method.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.ReadCanonicalizationMethod(System.Xml.XmlReader)">
            <summary>
            Reads XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-CanonicalizationMethod
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/>positioned on a &lt;CanonicalizationMethod> element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if there is a problem reading the XML.</exception>
            <returns>A string with the canonicalization method.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.WriteKeyInfo(System.Xml.XmlWriter,Microsoft.IdentityModel.Xml.KeyInfo)">
            <summary>
            Writes the contents of a <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/> as XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-KeyInfo.
            </summary>
            <param name="writer">the <see cref="T:System.Xml.XmlWriter"/> to use.</param>
            <param name="keyInfo">the <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/>to write.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="keyInfo"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if there is a problem writing the XML.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.WriteReference(System.Xml.XmlWriter,Microsoft.IdentityModel.Xml.Reference)">
            <summary>
            Writes the contents of a <see cref="T:Microsoft.IdentityModel.Xml.Reference"/> as XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Reference.
            </summary>
            <param name="writer">the <see cref="T:System.Xml.XmlWriter"/> to use.</param>
            <param name="reference">the <see cref="T:Microsoft.IdentityModel.Xml.Reference"/>to write.</param>
            <remarks>Assumes the &lt;DigestValue> has been calculated, no canonicalization or digest calculation is performed.</remarks>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reference"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.Reference.DigestMethod"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.Reference.DigestValue"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if one of the values in <see cref="P:Microsoft.IdentityModel.Xml.Reference.Transforms"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.WriteSignature(System.Xml.XmlWriter,Microsoft.IdentityModel.Xml.Signature)">
            <summary>
            Writes the contents of a <see cref="T:Microsoft.IdentityModel.Xml.Signature"/> as XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Signature.
            </summary>
            <param name="writer">the <see cref="T:System.Xml.XmlWriter"/> to use.</param>
            <param name="signature">the <see cref="T:Microsoft.IdentityModel.Xml.Signature"/>to write.</param>
            <remarks>Assumes the &lt;SignatureValue> has been calculated, no canonicalization or signature calculation is performed.</remarks>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="signature"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.Signature.SignatureValue"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.Signature.SignedInfo"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if one of the values in <see cref="P:Microsoft.IdentityModel.Xml.Reference.Transforms"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.DSigSerializer.WriteSignedInfo(System.Xml.XmlWriter,Microsoft.IdentityModel.Xml.SignedInfo)">
            <summary>
            Writes the contents of a <see cref="T:Microsoft.IdentityModel.Xml.SignedInfo"/> as XML conforming to https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-SignedInfo.
            </summary>
            <param name="writer">the <see cref="T:System.Xml.XmlWriter"/> to use.</param>
            <param name="signedInfo">the <see cref="T:Microsoft.IdentityModel.Xml.SignedInfo"/>to write.</param>
            <remarks>Assumes the &lt;Reference> digest has been calculated, no canonicalization or digest calculation is performed.</remarks>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="signedInfo"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.CanonicalizationMethod"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.References"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">if <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.References" />.Count > 1.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlWriteException">if <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.SignatureMethod"/> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.DSigSerializer.TransformFactory">
            <summary>
            Gets or sets the <see cref="P:Microsoft.IdentityModel.Xml.DSigSerializer.TransformFactory"/> to use when processing transforms in References
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader">
            <summary>
            Wraps a <see cref="T:System.Xml.XmlReader"/> pointing to a root element of XML that may contain a signature.
            If a Signature element is found, a <see cref="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.Signature"/> will be populated and <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.References"/> will
            have <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/> set for future validation.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader"/>
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/> pointing to XML that may contain an enveloped signature.</param>
            <remarks>If a &lt;Signature> element is found, the <see cref="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.Signature"/> will be set.</remarks>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.Serializer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.IdentityModel.Xml.DSigSerializer"/> to use when reading XmlDSig elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.OnEndOfRootElement">
            <summary>
            Called after the root element has been completely read.
            Attaches a <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/> to the first Reference for future processing if
            a signature was found.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.Read">
            <summary>
            Keeps track of the XML Element count. If a signature is detected it is read.
            </summary>
            <returns>'true' if the next node was read successfully; 'false' if there are no more nodes.</returns>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if more than one signature is found.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if a &lt;Reference> element was not found in the &lt;SignedInfo>.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.Signature">
            <summary>
            Gets the <see cref="T:Microsoft.IdentityModel.Xml.Signature"/> that was found inside the XML.
            </summary>
            <remarks><see cref="T:Microsoft.IdentityModel.Xml.Signature"/> may be null.</remarks>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureTransform">
            <summary>
            Defines a XML transform that removes the XML nodes associated with the Signature.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureTransform.#ctor">
            <summary>
            Creates an EnvelopedSignatureTransform
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureTransform.Algorithm">
            <summary>
            Gets the Algorithm associated with this transform
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureTransform.Process(Microsoft.IdentityModel.Xml.XmlTokenStream)">
            <summary>
            Sets the reader to exclude the &lt;Signature> element
            </summary>
            <param name="tokenStream"><see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>to process.</param>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>with exclusion set.</returns>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter">
            <summary>
            Wraps a <see cref="T:System.Xml.XmlWriter"/> and generates a signature automatically when the envelope
            is written completely. By default the generated signature is inserted as
            the last element in the envelope. This can be modified by explicitly
            calling WriteSignature to indicate the location inside the envelope where
            the signature should be inserted.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.#ctor(System.Xml.XmlWriter,Microsoft.IdentityModel.Tokens.SigningCredentials,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter"/>. The returned writer can be directly used
            to write the envelope. The signature will be automatically generated when
            the envelope is completed.
            </summary>
            <param name="writer">Writer to wrap/</param>
            <param name="signingCredentials">SigningCredentials to be used to generate the signature.</param>
            <param name="referenceId">The reference Id of the envelope.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="signingCredentials"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="referenceId"/> is null or Empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.#ctor(System.Xml.XmlWriter,Microsoft.IdentityModel.Tokens.SigningCredentials,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter"/>. The returned writer can be directly used
            to write the envelope. The signature will be automatically generated when
            the envelope is completed.
            </summary>
            <param name="writer">Writer to wrap/</param>
            <param name="signingCredentials">SigningCredentials to be used to generate the signature.</param>
            <param name="referenceId">The reference Id of the envelope.</param>
            <param name="inclusivePrefixList">inclusive prefix list to use for exclusive canonicalization.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="signingCredentials"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="referenceId"/> is null or Empty.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.DSigSerializer">
            <summary>
            Gets or sets the <see cref="P:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.DSigSerializer"/> to use.
            </summary>
            <exception cref="T:System.ArgumentNullException">if value is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.OnEndRootElement">
            <summary>
            Calculates and inserts the Signature.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.WriteSignature">
            <summary>
            Sets the position of the signature within the envelope. Call this
            method while writing the envelope to indicate at which point the 
            signature should be inserted.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.WriteEndElement">
            <summary>
            Overrides the base class implementation. When the last element of the envelope is written
            the signature is automatically computed over the envelope and the signature is inserted at
            the appropriate position, if WriteSignature was explicitly called or is inserted at the
            end of the envelope.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.WriteFullEndElement">
            <summary>
            Overrides the base class implementation. When the last element of the envelope is written
            the signature is automatically computed over the envelope and the signature is inserted at
            the appropriate position, if WriteSignature was explicitly called or is inserted at the
            end of the envelope.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Overrides the base class. Writes the specified start tag and associates
            it with the given namespace.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespace">The namespace URI to associate with the element.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IdentityModel.Protocols.XmlSignature.EnvelopedSignatureWriter and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlException">
            <summary>
            Represents an exception thrown when processing xml.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlReadException">
            <summary>
            This exception is thrown when a problem occurs reading XML.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlReadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlReadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> class.
            </summary>
            <param name="message">Addtional information to be included in the exception and displayed to user.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlReadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> class.
            </summary>
            <param name="message">Addtional information to be included in the exception and displayed to user.</param>
            <param name="innerException">A <see cref="T:System.Exception"/> that represents the root cause of the exception.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlValidationException">
            <summary>
            This exception is thrown when a problem occurs when validating the XML &lt;Signature>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlWriteException">
            <summary>
            This exception is thrown when a problem occurs writing XML.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlWriteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlWriteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/> class.
            </summary>
            <param name="message">Addtional information to be included in the exception and displayed to user.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlWriteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/> class.
            </summary>
            <param name="message">Addtional information to be included in the exception and displayed to user.</param>
            <param name="innerException">A <see cref="T:System.Exception"/> that represents the root cause of the exception.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform">
            <summary>
            Represents Canonicalization algorithms found in &lt;SignedInfo> and in &lt;Reference>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform"/>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.#ctor(System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform"/>.
            </summary>
            <param name="includeComments">controls if the transform will include comments.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.Algorithm">
            <summary>
            Gets the Algorithm associated with this transform
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.ProcessAndDigest(Microsoft.IdentityModel.Xml.XmlTokenStream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Applies a canonicalization transform over a set of XML nodes and computes the hash value.
            </summary>
            <param name="tokenStream">the set of XML nodes to transform.</param>
            <param name="hash">the hash algorithm to apply.</param>
            <returns>the hash of the transformed octets.</returns>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.IssuerSerial">
            <summary>
            Represents the IssuerSerial property of X509Data as per:  https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-X509Data
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.IssuerSerial.IssuerName">
            <summary>
            Gets the IssuerName of the IssuerSerial.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.IssuerSerial.SerialNumber">
            <summary>
            Gets the SerialNumber of the IssuerSerial.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.IssuerSerial.#ctor(System.String,System.String)">
            <summary>
            Creates an IssuerSerial using the specified IssuerName and SerialNumber.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.IssuerSerial.Equals(System.Object)">
            <summary>
            Compares two IssuerSerial objects.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.IssuerSerial.GetHashCode">
            <summary>
            Serves as a hash function for IssuerSerial.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.KeyInfo">
            <summary>
            Represents a XmlDsig KeyInfo element as per:  https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-KeyInfo
            </summary>
            <remarks>Only a single 'X509Certificate' is supported. Multiples that include intermediate and root certs are not supported.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/>.
            </summary>
            <param name="certificate">the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>to populate the X509Data.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/>.
            </summary>
            <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/>to populate the <see cref="T:Microsoft.IdentityModel.Xml.KeyInfo"/>.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.KeyInfo.KeyName">
            <summary>
            Gets or sets the 'KeyName' that can be used as a key identifier.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.KeyInfo.RetrievalMethodUri">
            <summary>
            Gets or sets the Uri associated with the RetrievalMethod
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.KeyInfo.RSAKeyValue">
            <summary>
            Gets or sets the RSAKeyValue.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.KeyInfo.X509Data">
            <summary>
            Gets the 'X509Data' value.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.Equals(System.Object)">
            <summary>
            Compares two KeyInfo objects.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.GetHashCode">
            <summary>
            Serves as a hash function for KeyInfo.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.KeyInfo.MatchesKey(Microsoft.IdentityModel.Tokens.SecurityKey)">
            <summary>
            Returns true if the KeyInfo object can be matched with the specified SecurityKey, returns false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.LogMessages">
            <summary>
            Log messages and codes for XmlProcessing
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.Reference">
            <summary>
            Represents a XmlDsig Reference element as per: https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Reference
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Reference.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.Reference"/>
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Reference.#ctor(Microsoft.IdentityModel.Xml.Transform,Microsoft.IdentityModel.Xml.CanonicalizingTransfrom)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.Reference"/>
            </summary>
            <param name="transform">the <see cref="T:Microsoft.IdentityModel.Xml.Transform"/> to apply.</param>
            <param name="canonicalizingTransfrom">the <see cref="P:Microsoft.IdentityModel.Xml.Reference.CanonicalizingTransfrom"/> to use.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="transform"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="canonicalizingTransfrom"/> is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.CanonicalizingTransfrom">
            <summary>
            Gets or sets the CanonicalizingTransform
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.DigestMethod">
            <summary>
            Gets or sets the DigestMethod to use when creating the hash.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null or empty.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.DigestValue">
            <summary>
            Gets or sets the Base64 encoding of the hashed octets.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null or empty.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.TokenStream">
            <summary>
            Gets or sets the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/> that is associated with the <see cref="P:Microsoft.IdentityModel.Xml.Reference.DigestValue"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.Transforms">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IList`1"/> of transforms to apply.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.Type">
            <summary>
            Gets or sets the Type of this Reference.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Reference.Uri">
            <summary>
            Gets or sets the Uri of this Reference.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Reference.Verify(Microsoft.IdentityModel.Tokens.CryptoProviderFactory)">
            <summary>
            Verifies that the <see cref="P:Microsoft.IdentityModel.Xml.Reference.DigestValue" /> equals the hashed value of the <see cref="P:Microsoft.IdentityModel.Xml.Reference.TokenStream"/> after
            <see cref="P:Microsoft.IdentityModel.Xml.Reference.Transforms"/> have been applied.
            </summary>
            <param name="cryptoProviderFactory">supplies the <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="cryptoProviderFactory"/> is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Reference.ProcessAndDigest(Microsoft.IdentityModel.Xml.XmlTokenStream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Writes into a stream and then hashes the bytes.
            </summary>
            <param name="tokenStream">the set of XML nodes to read.</param>
            <param name="hash">the hash algorithm to apply.</param>
            <returns>hash of the octets.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Reference.ComputeDigest(Microsoft.IdentityModel.Tokens.CryptoProviderFactory)">
            <summary>
            Computes the digest of this reference by applying the transforms over the tokenStream.
            </summary>
            <param name="cryptoProviderFactory">the <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory"/> that will supply the <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
            <returns>The digest over the <see cref="P:Microsoft.IdentityModel.Xml.Reference.TokenStream"/> after all transforms have been applied.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="cryptoProviderFactory"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException">if <see cref="P:Microsoft.IdentityModel.Xml.Reference.TokenStream"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException">if <see cref="P:Microsoft.IdentityModel.Xml.Reference.DigestMethod"/> is not supported.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException">if <paramref name="cryptoProviderFactory"/>.CreateHashAlgorithm returns null.</exception>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.RSAKeyValue">
            <summary>
            The RSAKeyValue found inside of the KeyValue element.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.RSAKeyValue.Modulus">
            <summary>
            The modulus of the RSAKeyValue.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.RSAKeyValue.Exponent">
            <summary>
            The exponent of the RSAKeyValue.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.RSAKeyValue.#ctor(System.String,System.String)">
            <summary>
            Creates an RSAKeyValue using the specified modulus and exponent.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.RSAKeyValue.Equals(System.Object)">
            <summary>
            Compares two RSAKeyValue objects.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.RSAKeyValue.GetHashCode">
            <summary>
            Serves as a hash function for RSAKeyValue.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.Signature">
            <summary>
            Represents a XmlDsig Signature element as per: https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-Signature
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Signature.#ctor">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.Signature"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Signature.#ctor(Microsoft.IdentityModel.Xml.SignedInfo)">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.Signature"/> instance.
            </summary>
            <param name="signedInfo">associated with this Signature.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="signedInfo"/> if null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Signature.KeyInfo">
            <summary>
            Gets or sets the KeyInfo
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Signature.SignatureValue">
            <summary>
            Gets or sets the SignatureValue
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null or empty.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Signature.SignedInfo">
            <summary>
            Gets or sets the <see cref="P:Microsoft.IdentityModel.Xml.Signature.SignedInfo"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Signature.Verify(Microsoft.IdentityModel.Tokens.SecurityKey,Microsoft.IdentityModel.Tokens.CryptoProviderFactory)">
            <summary>
            Verifies the signature over the SignedInfo.
            </summary>
            <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/> to use for cryptographic operations.</param>
            <param name="cryptoProviderFactory">the <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory"/> to obtain cryptographic operators.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="cryptoProviderFactory"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"> if <see cref="P:Microsoft.IdentityModel.Xml.Signature.SignedInfo"/> null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"> if <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.SignatureMethod"/> is not supported.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"> if signature does not validate.</exception>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.SignedInfo">
            <summary>
            Represents a XmlDsig SignedInfo element as per: https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-SignedInfo
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.SignedInfo.#ctor">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.SignedInfo"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.SignedInfo.#ctor(Microsoft.IdentityModel.Xml.Reference)">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.SignedInfo"/> instance.
            </summary>
            <param name="reference">a <see cref="T:Microsoft.IdentityModel.Xml.Reference"/> to include.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reference"/> is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.SignedInfo.CanonicalizationMethod">
            <summary>
            Gets or sets the CanonicalizationMethod
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
            <exception cref="T:System.NotSupportedException">if 'value' is not one of:
            "http://www.w3.org/2001/10/xml-exc-c14n#"
            "http://www.w3.org/2001/10/xml-exc-c14n#WithComments"
            </exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.SignedInfo.References">
            <summary>
            Gets or sets the Reference.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.SignedInfo.SignatureMethod">
            <summary>
            Gets or sets the SignatureMethod.
            </summary>
            <exception cref="T:System.ArgumentNullException">if 'value' is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.SignedInfo.Verify(Microsoft.IdentityModel.Tokens.CryptoProviderFactory)">
            <summary>
            Verifies the digest of all <see cref="P:Microsoft.IdentityModel.Xml.SignedInfo.References"/>.
            </summary>
            <param name="cryptoProviderFactory">supplies any required cryptographic operators.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="cryptoProviderFactory"/> is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.SignedInfo.GetCanonicalBytes(System.IO.Stream)">
            <summary>
            Writes the Canonicalized bytes into a stream.
            </summary>
            <param name="stream">the <see cref="T:System.IO.Stream"/> to receive the bytes.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.Transform">
            <summary>
            Defines a XMLTransform
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.Transform.Process(Microsoft.IdentityModel.Xml.XmlTokenStream)">
            <summary>
            Called to transform a <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>
            </summary>
            <param name="tokenStream">the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/> to process.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.Transform.Algorithm">
            <summary>
            Gets the algorithm
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.TransformFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.TransformFactory.#cctor">
            <summary>
            Static constructor that initializes the default <see cref="T:Microsoft.IdentityModel.Xml.TransformFactory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.TransformFactory.Default">
            <summary>
            Gets the default instance of <see cref="T:Microsoft.IdentityModel.Xml.TransformFactory"/>
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.TransformFactory.IsSupportedTransform(System.String)">
            <summary>
            Determine if the transform is supported.
            </summary>
            <param name="transform">the name of the transform.</param>
            <returns>if the transform is supported</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.TransformFactory.IsSupportedCanonicalizingTransfrom(System.String)">
            <summary>
            Determine if the canonicalizing transform is supported.
            </summary>
            <param name="transform">the name of the canonicalizing transform.</param>
            <returns>if the canonicalizing transform is supported</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.TransformFactory.GetTransform(System.String)">
            <summary>
            Gets a XML transform that modifies a XmlTokenStream.
            </summary>
            <param name="transform">the name of the transform.</param>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.Transform"/></returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.TransformFactory.GetCanonicalizingTransform(System.String)">
            <summary>
            Gets a XML transform that is capable of Canonicalizing XML and returning bytes.
            </summary>
            <param name="transform">the name of the transform.</param>
            <returns><see cref="T:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom"/></returns>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.X509Data">
            <summary>
            Represents a XmlDsig X509Data element as per:  https://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-X509Data
            </summary>
            <remarks> Supports multiple certificates. </remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.X509Data.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.X509Data"/>.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.X509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.X509Data"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If 'certificate' is null</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.X509Data.#ctor(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.IdentityModel.Xml.X509Data"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If 'certificates' is null</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.X509Data.IssuerSerial">
            <summary>
            Gets or sets the 'X509IssuerSerial' that is part of a 'X509Data'.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.X509Data.SKI">
            <summary>
            Gets or sets the 'X509SKI' value that is a part of 'X509Data'.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.X509Data.SubjectName">
            <summary>
            Get or sets the 'X509SubjectName' value that is a part of 'X509Data'.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.X509Data.Certificates">
            <summary>
            Get the collection of X509Certificates that is associated with 'X509Data'.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.X509Data.CRL">
            <summary>
            Get or sets the 'CRL' value that is a part of 'X509Data'.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.X509Data.Equals(System.Object)">
            <summary>
            Compares two X509Data objects.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.X509Data.GetHashCode">
            <summary>
            Serves as a hash function for X509Data.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlSignatureConstants">
            <summary>
            Constants for XML Signature
            Definitions for namespace, attributes and elements as defined in http://www.w3.org/TR/xmldsig-core/
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlTokenStream">
            <summary>
            Maintains a collection of XML nodes obtained when reading signed XML.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.#ctor">
            <summary>
            Initializes a <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.Add(System.Xml.XmlNodeType,System.String)">
            <summary>
            Adds a XML node to the collection.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.AddAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a XML attribute node to the collection
            </summary>
            <param name="prefix">the XML prefix.</param>
            <param name="localName">the local name of the attribute.</param>
            <param name="namespace">the namespace of the attribute.</param>
            <param name="value">the value of the attribute.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="localName"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.AddElement(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a XML element node to the collection
            </summary>
            <param name="prefix">the XML prefix.</param>
            <param name="localName">the local name of the element.</param>
            <param name="namespace">the namespace of the attribute.</param>
            <param name="isEmptyElement">value indicating if the element is empty.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="localName"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.SetElementExclusion(System.String,System.String)">
            <summary>
            Sets the name and namespace of which element to exclude. Normally this is the &lt;Signature> element.
            </summary>
            <param name="element">the name of the Element to exclude.</param>
            <param name="namespace">the namespace of the Element to exclude.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="element"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStream.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes the XML nodes into the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">the <see cref="T:System.Xml.XmlWriter"/> to use.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="writer"/> is null.</exception>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlTokenStreamReader">
            <summary>
            An XmlReader that captures xml as a XmlTokenStream
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStreamReader.#ctor(System.Xml.XmlDictionaryReader)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStreamReader"/> for creating a <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>.
            </summary>
            <param name="reader">an <see cref="T:System.Xml.XmlDictionaryReader"/> to capture the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> if null.</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="reader"/>.IsStartElement() is false.</exception>
        </member>
        <member name="P:Microsoft.IdentityModel.Xml.XmlTokenStreamReader.TokenStream">
            <summary>
            Gets the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream"/>
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlTokenStreamReader.Read">
            <summary>
            Delegates to InnerReader, then calls Record()
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Xml.XmlUtil">
            <summary>
            Utilities for working with XML
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry(System.Xml.XmlReader,System.String)">
            <summary>
            Checks if the <see cref="T:System.Xml.XmlReader"/> is pointing to an expected element.
            </summary>
            <param name="reader">the <see cref="T:System.Xml.XmlReader"/>to check.</param>
            <param name="element">the expected element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="element"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader"/> if not at a StartElement.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader"/> if not at at expected element.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Checks if the <see cref="T:System.Xml.XmlReader"/> is pointing to an expected element.
            </summary>
            <param name="reader">the <see cref="T:System.Xml.XmlReader"/>to check.</param>
            <param name="element">the expected element.</param>
            <param name="namespace">the expected namespace.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="element"/> is null or empty.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader"/> if not at a StartElement.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader"/> if not at expected element.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.IsStartElement(System.Xml.XmlReader,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Determine if reader is at expected element in one of the listed namespace in namespaceList. 
            </summary>
            <param name="reader">the <see cref="T:System.Xml.XmlReader"/>to check.</param>
            <param name="element">the expected element.</param>
            <param name="namespaceList">the expected namespace list.</param>
            <returns>if <paramref name="reader"/> is at expected element.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="element"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.EqualsQName(System.Xml.XmlQualifiedName,System.String,System.String)">
            <summary>
            Determines if a Qualified names equals a name / namespace pair.
            </summary>
            <param name="qualifiedName">the <see cref="T:System.Xml.XmlQualifiedName"/> to compare.</param>
            <param name="name">the name to compare.</param>
            <param name="namespace">the namepace to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.GenerateHexString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns>Hex representation of bytes</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.GetXsiTypeAsQualifiedName(System.Xml.XmlReader)">
            <summary>
            Gets the xsi:type as a <see cref="T:System.Xml.XmlQualifiedName"/> for the current element.
            </summary>
            <param name="reader">an <see cref="T:System.Xml.XmlReader"/>pointing at an Element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <returns>a <see cref="T:System.Xml.XmlQualifiedName"/>if the current element has an XSI type.
            If <paramref name="reader"/> is not on an element OR xsi type is not found, null.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.IsNil(System.Xml.XmlReader)">
            <summary>
            Determines if the <paramref name="reader"/> has an attribute that is 'nil'
            </summary>
            <param name="reader">a <see cref="T:System.Xml.XmlReader"/> positioned on an element.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <returns>true is the attribute value is 'nil'</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.NormalizeEmptyString(System.String)">
            <summary>
            Normalizes an empty string to 'null'.
            </summary>
            <param name="string"></param>
            <returns>null if string is null or empty.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.OnRequiredAttributeMissing(System.String,System.String)">
            <summary>
            Returns a new <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> with message including the element and attribute.
            </summary>
            <param name="element">the missing element.</param>
            <param name="attribute">the missing attribute.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.ResolveQName(System.Xml.XmlReader,System.String)">
            <summary>
            Determines if the prefix on a name maps to a namespace that is in scope the reader.
            </summary>
            <param name="reader">the <see cref="T:System.Xml.XmlReader"/> in scope.</param>
            <param name="qualifiedString">the qualifiedName to check.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="qualifiedString"/> is null.</exception>
            <returns>a <see cref="T:System.Xml.XmlQualifiedName"/> with the namespace that was in scope. If the prefix was not in scope, the namespace will be null.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Validates that element the <paramref name="reader"/> is positioned on has an xsi:type attribute
            with a specific name and type.
            </summary>
            <param name="reader">an <see cref="T:System.Xml.XmlReader"/> positioned on an element.</param>
            <param name="expectedTypeName">the expected name of the xsi:type.</param>
            <param name="expectedTypeNamespace">the expected namespace of the xsi:type.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeNamespace"/> is null.</exception>
            <remarks>if the <paramref name="reader"/> does require an xsi:type attribute to be present. If the xsi:type is present, it will be validated.</remarks>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader,System.String,System.String,System.Boolean)">
            <summary>
            Validates that element the <paramref name="reader"/> is positioned on has an xsi:type attribute
            with a specific name and type.
            </summary>
            <param name="reader">an <see cref="T:System.Xml.XmlReader"/> positioned on an element.</param>
            <param name="expectedTypeName">the expected name of the xsi:type.</param>
            <param name="expectedTypeNamespace">the expected namespace of the xsi:type.</param>
            <param name="requireDeclaration">controls if the xsi:type must be present.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeNamespace"/> is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlException">if xsi:type is not found and required.</exception>
            <exception cref="T:Microsoft.IdentityModel.Xml.XmlException">if xsi:type is found and did not match expected.</exception>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogReadException(System.String,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogReadException(System.String,System.Exception,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <param name="inner">the inner exception.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException(System.String,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException(System.String,System.Exception,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <param name="inner">the inner exception.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(System.String,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/>.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(System.String,System.Exception,System.Object[])">
            <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/> to the Logger.
            </summary>
            <param name="format">the format string.</param>
            <param name="args">the arguments to use for formating.</param>
            <param name="inner">the inner exception.</param>
            <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException"/>.</returns>
        </member>
    </members>
</doc>

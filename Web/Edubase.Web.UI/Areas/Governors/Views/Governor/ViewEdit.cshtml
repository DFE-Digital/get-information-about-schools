@using Edubase.Services.Enums;
@using Edubase.Web.UI.Models.Grid
@using Edubase.Web.UI.Helpers
@model GovernorsGridViewModel
@{
    Layout = Model.Layout;
}

@if (Model.EditMode)
{
    <div class="tab-content">
        <div class="column-half">
            @(Model.GroupUId.HasValue
                  ? Html.ActionLink("Cancel", "Details", "Group", null, null, "governance", new { area = "Groups", id = Model.GroupUId }, new { @class = "button button-secondary cancel" })
                  : Html.ActionLink("Cancel", "Details", "Establishment", null, null, "school-governance", new { area = "Establishments", id = Model.EstablishmentUrn }, new { @class = "button button-secondary cancel" }))
        </div>
        <div class="column-two-thirds">
            @ShowLegalDuty()

            @if (Model.ShowDelegationAndCorpContactInformation)
            {
                @ShowDelegationInformation()
                <br />
                @ShowCorporateContactInformation()
            }

            @DisplayGovernanceMode()
        </div>

        <div class="column-half">
            <h2 id="role" class="heading-small">Add person</h2>

            @using (Html.BeginRouteForm(Model.EstablishmentUrn.HasValue ? "EstabAddGovernor" : "GroupAddGovernor", new { groupUId = Model.GroupUId, establishmentUrn = Model.EstablishmentUrn }, FormMethod.Get))
            {
            <div class="form-group inline-select-button push--bottom @Html.ValidationCssClass("role")">
                <label class="form-label" for="roleid">Select role</label>
                @Html.ValidationMessage("role")
                @Html.DropDownList("role", Model.GovernorRoles.Select(x => new SelectListItem { Text = FormatHelpers.FirstCharToUpper(x.Name.ToLower()), Value = ((eLookupGovernorRole)x.Id).ToString() }), new { id = "roleid", @class = "form-control" })
                <input type="submit" value="Add person" class="button" />
            </div>

            }

        </div>
    </div>
}
else
{
    <div class="grid-row">
        <div class="column-two-thirds">
            @if (User.Identity.IsAuthenticated && Model.DomainModel.HasGovernors)
            {
                <br/>
                if (Model.EstablishmentUrn.HasValue)
                {
                    @Html.RouteLink("View governance change history", "EstabDetailGovChangeHistory", new {id = Model.EstablishmentUrn})
                    <br/><br/>
                }
                else
                {
                    @Html.RouteLink("View governance change history", "GroupDetailGovChangeHistory", new {id = Model.GroupUId})
                    <br/><br/>
                }
            }

            @ShowLegalDuty()

            @if (Model.GovernanceMode.HasValue)
            {
                <h2 class="bold-small">Establishment governance</h2>
                @DisplayGovernanceMode()
            }
        </div>
    </div>

    if (Model.ShowDelegationAndCorpContactInformation)
    {
        <div class="column-full governors-section">
         @ShowDelegationInformation()
         <br />
         @ShowCorporateContactInformation()
        </div>
    }
}



@if (Model.DomainModel.HasGovernors)
{
    @DisplayGovernors()
}
else
{
    <div class="tab-content" style="display:block !important; float:none;">
        <div class="column-half" style="display:block !important; float:none;">
            <p>There is no governance information for this @Model.ParentEntityName</p>
        </div>
    </div>
}


@helper ShowDelegationInformation()
{
    <h2 class="bold-small">Delegated authority of local governing body</h2>
    <div class="expanding-content-wrapper" data-update-text="false">
        <a href="#" class="expanding-content-trigger">
            More details
        </a>
        <div class="expanding-content panel-indent">
            @(Model.DelegationInformation ?? "Not recorded")
        </div>
    </div>
    if (Model.EditMode)
    {
        <div class="grid-row">
            <div class="column-full">
                @Html.RouteLink("Edit", "GroupEditDelegation", new { GroupUId = Model.GroupUId }, new { @class = "button button-secondary mobile-full-width" })
            </div>
        </div>
    }

}

@helper ShowCorporateContactInformation()
{
    <h2 class="bold-small">Corporate contact</h2>
    <div class="expanding-content-wrapper" data-update-text="false" style="margin-bottom:3px;">
        <a href="#" class="expanding-content-trigger">
            More details
        </a>
        <div class="expanding-content panel-indent">
            This only applies to organisations (most often a diocese or higher education institution) which are a corporate member or director/trustee of an academy trust. They should provide contact details here for someone in their organisation who can provide information on which members of their organisation have acted in the capacity of corporate member or corporate director/trustee.
        </div>
    </div>
    <p>@(Model.CorporateContact ?? "Not recorded")</p>
    if (Model.EditMode)
    {
        <div class="grid-row">
            <div class="column-full">
                @Html.RouteLink("Edit", "GroupEditCorporateContact", new { GroupUId = Model.GroupUId }, new { @class = "button button-secondary mobile-full-width" })
            </div>
        </div>
    }
}

@helper ShowLegalDuty()
{
    <div class="governors-section">
        <h2 class="heading-small">Legal duty to provide governance information</h2>
        <div class="expanding-content-wrapper" data-update-text="false">
            <a href="#" class="expanding-content-trigger">
                More details
            </a>
            <div class="expanding-content panel-indent">
                <p>
                    All maintained school governing bodies and academy trusts have a legal duty to provide all of the governance information requested on this page in so far as it is available to them. This will increase the transparency of governance arrangements. It will enable schools and the department to identify more quickly and accurately individuals who are involved in governance, and who govern in more than one context. The information requested says nothing in itself about a person's suitability to govern. However, it is essential information for the department to be able to uniquely identify an individual and in a small number of cases conduct checks to confirm their suitability for this important and influential role. You should provide all of the information requested insofar as it is available to you. A minimum set of information needs to be provided before a record can be saved.
                </p>
                <p>
                    A suggested privacy notice for schools is available for download:
                    <a target="_blank" href="https://www.gov.uk/government/publications/data-protection-and-privacy-privacy-notices">
                        https://www.gov.uk/government/publications/data-protection-and-privacy-privacy-notices <span class="visually-hidden">Opens in new window</span>
                    </a>
                </p>
            </div>
        </div>
    </div>
}



@helper DisplayGovernors()
{
    <div class="column-full">
        @if (Model.DomainModel.HasFullAccess)
        {
            // Render lists
            foreach (var grid in Model.Grids)
            {
                <text>
                    @ShowGovernorEditor(grid)
                </text>
            }
            if (Model.HistoricGrids.Any(h => h.Rows.Any()))
            {
                <h2 class="bold-small">Historic (left within last 12 months)</h2>
                <div class="expanding-content-wrapper" data-opened-text="Less details" data-closed-text="More details">
                    <a href="#" class="expanding-content-trigger">
                        More details
                    </a>
                    <div class="expanding-content panel-indent">
                        @foreach (var grid in Model.HistoricGrids)
                        {
                            if (grid.Rows.Any())
                            {
                                    <text>
                                        @ShowGovernorEditor(grid, true)
                                    </text>
                                }
                        }
                    </div>
                </div>
            }
        }
        else
        {
            for (var index = 0; index < Model.Grids.Count; index++)
            {
                @Html.DisplayFor(m => m.Grids[index])
            }
            if (User.Identity.IsAuthenticated)
            {
                if (Model.HistoricGrids.Any(h => h.Rows.Any()))
                {
                    <h2 class="bold-small">Historic (left within last 12 months)</h2>
                    <div class="expanding-content-wrapper" data-opened-text="Less details" data-closed-text="More details">
                        <a href="#" class="expanding-content-trigger">
                            More details
                        </a>
                        <div class="expanding-content panel-indent">
                            @for (var index = 0; index < Model.HistoricGrids.Count; index++)
                            {
                                if (Model.HistoricGrids[index].Rows.Any())
                                {
                                    @Html.DisplayFor(m => m.HistoricGrids[index])
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                if (Model.HistoricGovernors.Any())
                {
                    <h2 class="bold-small">Historic (left within last 12 months)</h2>
                    <div class="expanding-content-wrapper" data-opened-text="Less details" data-closed-text="More details">
                        <a href="#" class="expanding-content-trigger">
                            More details
                        </a>
                        <div class="expanding-content panel-indent">
                            <table class="edubase-table list-table sortable-table historical governors">
                                <caption class="visuallyhidden">Historical governance</caption>
                                <thead>
                                    <tr>
                                        <th scope="col">
                                            <a href="#" data-sort-key="name" data-sort-type="sortText">Name</a>
                                        </th>
                                        <th scope="col">
                                            <a href="#" data-sort-key="role" data-sort-type="sortText">Role</a>
                                        </th>
                                        <th scope="col">
                                            <a href="#" data-sort-key="appointed" data-sort-type="sortText">Appointed by</a>
                                        </th>
                                        <th scope="col">
                                            <a href="#" data-sort-key="from" data-sort-type="sortDate">From</a>
                                        </th>
                                        <th scope="col">
                                            <a href="#" data-sort-key="to" data-sort-type="sortDate">To</a>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var governor in Model.HistoricGovernors)
                                {
                                    <tr>
                                        <td data-label="Name">@governor.FullName</td>
                                        <td data-label="Role">@governor.RoleName</td>
                                        <td data-label="Appointed by">@governor.AppointingBody</td>
                                        <td data-label="From">@( governor.AppointmentStartDate.ToDateTime()?.ToString("dd/MM/yyyy"))</td>
                                        <td data-label="To">@( governor.AppointmentEndDate.ToDateTime()?.ToString("dd/MM/yyyy"))</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            }
        }
    </div>
}

@helper ShowGovernorEditor(GovernorGridViewModel grid, bool historic = false)
{
    <div class="governor-list">
        @if (!historic)
        {
            <h2 class="bold-small">@grid.Title</h2>
        }
        @if (grid.Rows.Any())
        {
            foreach (var row in grid.Rows)
            {
                <div id="gov-id-@row.Model.Id" class="governor-edit-panel @Html.DuplicateCssClassFor(row.Model.Id)">
                    <h3 class="heading-xsmall" id="gid-@row.Model.Id">@row.Cells[0].Text</h3>
                    <dl>
                        @if (historic)
                        {
                            <dt>Role:</dt>
                            <dd>@grid.RoleName</dd>
                        }
                        @foreach (var cell in row.Cells.Skip(1))
                        {
                            <dt>@cell.Parent.Text:</dt>
                            <dd>@(cell.Text ?? "Not recorded")</dd>
                        }
                    </dl>

                    @if (Model.EditMode)
                    {
                        if (grid.Tag == "current")
                        {
                            if (Model.RemovalGid != row.Model.Id)
                            {
                                <div class="button-wrapper">
                                    @if (Model.EstablishmentUrn.HasValue && row.Model.RoleId.HasValue && EnumSets.SharedGovernorRoles.Contains(row.Model.RoleId.Value))
                                    {
                                        @Html.RouteLink("Edit", "EditSharedGovernor",
                                            new {establishmentUrn = Model.EstablishmentUrn, governorId = row.Model.Id},
                                            new {@class = "button button-secondary mobile-full-width"})
                                    }
                                    else
                                    {
                                        @Html.RouteLink("Edit", Model.EstablishmentUrn.HasValue ? "EstabEditGovernor" : "GroupEditGovernor",
                                            new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id},
                                            new {@class = "button button-secondary mobile-full-width"})
                                    }

                                    @if (EnumSets.SingularGovernorRoles.Contains(row.Model.RoleId.Value))
                                    {
                                        if (Model.EstablishmentUrn.HasValue && (row.Model.RoleId.Value == (int) eLookupGovernorRole.Establishment_SharedChairOfLocalGoverningBody || row.Model.RoleId.Value == (int) eLookupGovernorRole.ChairOfLocalGoverningBody))
                                        {
                                            @Html.RouteLink("Replace", "EstabReplaceChair",
                                                new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id},
                                                new {@class = "button button-secondary mobile-full-width"})
                                        }
                                        else
                                        {
                                            @Html.RouteLink("Replace", Model.EstablishmentUrn.HasValue ? "EstabReplaceGovernor" : "GroupReplaceGovernor",
                                                new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id},
                                                new {@class = "button button-secondary mobile-full-width"})
                                        }
                                    }
                                    else
                                    {
                                        @Html.RouteLink("Remove", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance",
                                            null, null, "gid-" + row.Model.Id,
                                            new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, removalGid = row.Model.Id},
                                            new {@class = "button button-secondary mobile-full-width"})
                                    }
                                </div>
                            }
                            else // We're in 'removal mode' for this governor.
                            {
                                <div class="governor-edit-panel">

                                    @using (Html.BeginRouteForm(Model.EstablishmentUrn.HasValue ? "EstabDeleteOrRetireGovernor" : "GroupDeleteOrRetireGovernor", FormMethod.Post, new { id = "removal-form" }))
                                    {
                                        @Html.HiddenFor(x => x.RemovalGid)
                                        @Html.HiddenFor(x => x.EstablishmentUrn)
                                        @Html.HiddenFor(x => x.GroupUId)
                                        @Html.HiddenFor(x => x.GovernorShared)

                                        if (!EnumSets.SharedGovernorRoles.Contains(row.Model.RoleId.Value) || Model.EstablishmentUrn.HasValue)
                                        {
                                            <div class="form-group">
                                                <fieldset class="inline toggle-panels">
                                                    <legend class="visually-hidden">Do you wish to retire or remove this person?</legend>
                                                    @FormHelpers.GiasRadio("1", "removal-mode", "This person has completed their term", null, new {data_toggle_panel = ".retire-governor", @checked = "checked"})

                                                    @FormHelpers.GiasRadio("2", "removal-mode", "Remove person", null, new {data_toggle_panel = ".remove-governor"})

                                                </fieldset>
                                            </div>
                                            <div class="retire-governor date-group-wrap panel-indent">
                                                <p>Provide a date term ends to retire this person</p>
                                                @Html.EditorFor(x => x.RemovalAppointmentEndDate, new {title = "Date term ends", fieldsetClassName = "retirement-date"})

                                                <button id="retire-governor" type="submit" name="action" value="Save" class="button">Save</button>

                                                @Html.RouteLink("Cancel", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance", new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId}, new {@class = "button button-secondary"})

                                            </div>

                                            <div class="remove-governor date-group-wrap panel-indent">
                                                <p>Confirm you wish to remove this person</p>
                                                <input type="submit" name="action" value="Remove" class="button"/>

                                                @Html.RouteLink("Cancel", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance", new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId}, new {@class = "button button-secondary"})
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="remove-governor date-group-wrap panel-indent">
                                                <p>Confirm you wish to remove this person</p>
                                                <input id="remove-shared-governor" type="submit" name="action" value="Remove" class="button"/>

                                                @Html.RouteLink("Cancel", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance", new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId}, new {@class = "button button-secondary"})
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        }
                        else //historic governor
                        {
                            <div class="button-wrapper">
                                @if (Model.EstablishmentUrn.HasValue && ((eLookupGovernorRole) row.Model.RoleId == eLookupGovernorRole.Group_SharedLocalGovernor || (eLookupGovernorRole) row.Model.RoleId == eLookupGovernorRole.Group_SharedChairOfLocalGoverningBody))
                                {
                                    @Html.RouteLink("Edit", "EditSharedGovernor",
                                        new {establishmentUrn = Model.EstablishmentUrn, governorId = row.Model.Id},
                                        new {@class = "button button-secondary mobile-full-width"})
                                }
                                else
                                {
                                    @Html.RouteLink("Edit", Model.EstablishmentUrn.HasValue ? "EstabEditGovernor" : "GroupEditGovernor",
                                        new {establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id},
                                        new {@class = "button button-secondary mobile-full-width"})
                                }
                            </div>
                        }
                    }
                </div>
            }
        }
        else
        {
            <p class="none">Not recorded</p>
        }
    </div>
}

@helper DisplayGovernanceMode()
{
    if (Model.EstablishmentUrn.HasValue && Model.GovernanceMode.HasValue)
    {
        if (Model.GovernanceMode == eGovernanceMode.LocalGovernors)
        {
            <div class="governors-section">
                <p>This establishment has local governors, not shared governors.</p>
            </div>
        }
        else if (Model.GovernanceMode == eGovernanceMode.LocalAndSharedGovernors)
        {
            <div class="governors-section">
                <p>This establishment has local governors and also shares governors with other academies in the trust.</p>
            </div>
        }
        else if (Model.GovernanceMode == eGovernanceMode.NoLocalGovernors)
        {
            <div class="governors-section">
                <p>This establishment is part of a multi-academy trust and does not have local governors.</p>
            </div>
        }
        else if (Model.GovernanceMode == eGovernanceMode.SharesLocalGovernors)
        {
            <div class="governors-section">
                <p>This establishment shares local governors with other academies in the trust.</p>
            </div>
        }

        if (Model.EditMode)
        {
            @Html.RouteLink("Edit", "EstabEditGovernanceMode", new { establishmentUrn = Model.EstablishmentUrn }, new { @class = "button button-secondary" })
        }
    }
}

@section ViewScripts{

    <script>
        $(function () {
            var dismissed = false;
            var form = $('form#removal-form');
            if ($("#remove-shared-governor").length > 0) {
                form.on('submit', function (e) {
                    if (!dismissed) {
                        e.preventDefault();
                        $(this).okCancel({
                            ok: function () {
                                dismissed = true;
                                $(e.target).find("#remove-shared-governor").click();
                            },
                            okLabel: "Proceed",
                            immediate: true,
                            idPrefix: 'close-continue',
                            title: 'Are you sure you want to remove this role?',
                            content: 'If you do, the role will also be removed from the multi-academy trust and any academies within the trust that share the role.'
                        });
                        $(this).removeData('okCancel');
                    }
                });
            }
        });

    </script>

}

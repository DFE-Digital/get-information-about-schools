@using Edubase.Services.Domain
@using Edubase.Web.UI.Helpers
@using Edubase.Web.UI.Models
@using Edubase.Common
@model EstablishmentDetailViewModel
@{
    ViewBag.Title = Model.Establishment.Name;
    ViewBag.PageClass = "school-details";
    ViewBag.HideLogo = true;

    var request = HttpContext.Current.Request;
    var sortDir = "desc";
    var sortDirText = "a descending order";
    var sortField = "effectiveDateUtc";

    if (request.QueryString["sortby"] != null)
    {
        sortField = request.QueryString["sortby"].Substring(0, request.QueryString["sortby"].IndexOf("-"));
        sortDir = (request.QueryString["sortby"] ?? "").Contains("asc") ? "asc" : "desc";
        sortDirText = (request.QueryString["sortby"] ?? "").Contains("asc") ? "an ascending order" : "a descending order";
    }

    var sortedDescription = " is sorted in " + sortDirText + ". Click to change order. All other columns are sortable.";
    var unsortedDescription = ". Click to sort data by this column.";

    var tableColumns = new List<Tuple<string, string>>
    {
        Tuple.Create("effectiveDateUtc", "Date changed"),
        Tuple.Create("fieldName", "Updated field"),
        Tuple.Create("oldValue", "Old value"),
        Tuple.Create("newValue", "New value"),
        Tuple.Create("requestedDateUtc", "Date requested"),
        Tuple.Create("originatorUserName", "Suggested from"),
        Tuple.Create("approverUserName", "Approved by"),
    };
}

<div class="breadcrumbs">
    <ol>
        <li>@Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)</li>
        @if (Model.LegalParentGroup != null)
        {
            <li>@Html.RouteLink(Model.LegalParentGroupRouteDto.Value.Label, Model.LegalParentGroupRouteDto.Value.RouteName, Model.LegalParentGroupRouteDto.Value.RouteValues)</li>
        }
        <li>@Html.RouteLink(Model.Establishment.Name, "EstabDetails", new { id = Model.Establishment.Urn })</li>
    </ol>
</div>

<h1 class="heading-large">
    <span class="heading-secondary">Establishment</span>
    @(Model.Establishment.Name.Clean() ?? "(name not recorded)")
</h1>

<p class="urn"><abbr title="Unique Reference Number">URN</abbr>: @Model.Establishment.Urn</p>
<p class="establishment-type">@Model.TypeName</p>

<div class="column-full">
    <div class="grid-row gias-tabs-wrapper">
        <div class="tab-wrap">
            <ul class="gias-tabs">
                <li><a href="#school-change-history" class="horizontal-tab">Governance Change History</a></li>
            </ul>
        </div>
        <div class="tab-content-wrapper gias-tabs-content">

            <div id="change-history" class="tab-content approval-data">
                <h2 class="bold-small">Governance Change History</h2>
                @if (!Model.ChangeHistory.Items.Any())
                {
                    <p>There are no change records available at the moment</p>
                }
                else
                {
                    <p>
                        @Html.RouteLink("Download data in CSV format", "DownloadEstablishmentGovernanceChangeHistory", new { id = Model.Establishment.Urn, downloadType = DownloadType.csv }, new { style = "margin-bottom:10px; display:block;" })
                        @Html.RouteLink("Download data in XLSX format", "DownloadEstablishmentGovernanceChangeHistory", new { id = Model.Establishment.Urn, downloadType = DownloadType.xlsx }, null)
                        <br />
                    </p>
                    if (Model.ChangeHistory.PageCount > 1)
                    {
                        <div class="top-pagination">
                            @Html.Partial("_GenericPaginationV2", Model.ChangeHistory)
                        </div>
                    }
                    <table class="approval-changes edubase-table sortable-table">
                        <caption class="visuallyhidden">Governance change history</caption>
                        <thead>
                            <tr>
                            @foreach (var tableColumn in tableColumns)
                            {
                                <th scope="col">
                                    <a href="@Url.SortUrl(tableColumn.Item1, "#change-history")"
                                    class="@Html.Conditional(sortField == tableColumn.Item1, "selected-sort") @Html.Conditional(sortDir.Contains("asc"), "sorted-asc") @Html.Conditional(sortDir.Contains("desc"), "sorted-desc")"
                                    aria-label="@string.Concat(tableColumn.Item2, (sortField == tableColumn.Item1 ? sortedDescription : unsortedDescription))">@tableColumn.Item2</a>
                                </th>
                            }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ChangeHistory.Items)
                            {
                                <tr>
                                    <td data-label="Date changed">@(item.EffectiveDateUtc?.ToString("dd/MM/yyyy"))</td>
                                    <td data-label="Updated field">@item.Name</td>
                                    <td data-label="Old value">@item.OldValue</td>
                                    <td data-label="New value">@item.NewValue</td>
                                    <td data-label="Date requested">@(item.RequestedDateUtc?.ToString("dd/MM/yyyy"))</td>
                                    <td data-label="Suggested from">@item.OriginatorUserName</td>
                                    <td data-label="Approved by">@(item.ApproverUserName ?? "--")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    if (Model.ChangeHistory.PageCount > 1)
                    {
                        <div class="lower-pagination push--bottom">
                            @Html.Partial("_GenericPaginationV2", Model.ChangeHistory)
                        </div>
                        @helpers.BackToTopLink()
                    }

                }
            </div>
        </div>
    </div>
</div>

@using Edubase.Common
@using Edubase.Services.Enums
@model Edubase.Web.UI.Areas.Governors.Models.GovernorViewModel

@if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
{
    @DisplayGid()
    @DisplayName()
    @DisplayDateOfBirth()
    @DisplayPostcode()
    @DisplayTelephoneNumber()
    @DisplayEmail()
    @DisplayAppointmentDates()
}
else
{
    @DisplayName()
    @IsOriginalSignatoryMember()
    @IsOriginalChairOfTrustees()
    @DisplayGid()
    @DisplayAppointingBody()
    @DisplayAppointmentDates()
    @DisplayEmail()
    @DisplayPostcode()
    @DisplayDateOfBirth()
    @DisplayPreviousName()
    @DisplayTelephoneNumber()
}

@helper DisplayGid()
{
    if (Model.DisplayPolicy.Id)
    {
        <div class="govuk-form-group">
            <label class="govuk-label" for="governorGidInput">
                Governance role identifier (GID)
                <a id="GidTooltipLink" href="#help-text-gid" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the governance role identifier field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-gid">
                    <h3 class="govuk-heading-s make-modal-header">Governance role identifier (GID)</h3>
                    <p class="govuk-body">
                        This field is generated internally by GIAS, and is not editable by users.
                    </p>
                </div>
            </div>

            <input id="@Html.IdFor(x => x.GID)" class="govuk-input" value="@Model.GID" readonly="readonly" disabled="disabled" placeholder="This value is generated internally by GIAS" />
        </div>
    }
}

@helper DisplayName()
{
    if (Model.DisplayPolicy.FullName)
    {
        // Note that JavaScript interacts with these HTML elements
        // Updates to the IDs will need to be reflected in both the <label> and within Edubase.Web.UI/Assets/Scripts/Entry/add-edit-governor.js
        <div class="govuk-form-group" id="governorFullNameDiv" style="display:none">
            <label class="govuk-label" for="@Html.IdFor(x => x.FullName)">
                Name
                <a id="FullNameTooltipLink" href="#help-text-full-name" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the name field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-full-name">
                    <h3 class="govuk-heading-s make-modal-header">Name</h3>
                    <p class="govuk-body">
                        <span class="govuk-visually-hidden">Help Text:</span>
                        The full name input is not editable, because it is auto-populated by joining together name parts.
                    </p>
                </div>
            </div>
            <input id="@Html.IdFor(x => x.FullName)" class="govuk-input" readonly="readonly" disabled="disabled" value="@Model.FullName" />
        </div>

        {
            // Note that JavaScript interacts with these HTML elements
            // Updates to the IDs will need to be reflected in both the <label> and within Edubase.Web.UI/Assets/Scripts/Entry/add-edit-governor.js
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GovernorTitleId)">
                @Html.LabelFor(x => x.GovernorTitleId, new {@class = "govuk-label",})
                @Html.ValidationMessageFor(x => x.GovernorTitleId, null, new {@class = "govuk-error-message"})
                @Html.DropDownListFor(x => x.GovernorTitleId, Model.Titles, "", new {@class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.GovernorTitleId)),})
            </div>
    }

    var additionalInfo = " (required to save record)";

    {
        // Note that JavaScript interacts with these HTML elements
        // Updates to the IDs will need to be reflected in both the <label> and within Edubase.Web.UI/Assets/Scripts/Entry/add-edit-governor.js
        var inputId = @Html.IdFor(x => x.FirstName);
        var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.FirstName)">
                @Html.LabelFor(x => x.FirstName, $"First name{additionalInfo}", new { @class = "govuk-label",})
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.FirstName, "First name cannot be empty", new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.FirstName, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.FirstName)), aria_describedBy = errorsWrapperId, })
            </div>
        }

        {
            // Note that JavaScript interacts with these HTML elements
            // Updates to the IDs will need to be reflected in both the <label> and within Edubase.Web.UI/Assets/Scripts/Entry/add-edit-governor.js
            var inputId = @Html.IdFor(x => x.MiddleName);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.MiddleName)">
                @Html.LabelFor(x => x.MiddleName, new { @class = "govuk-label", })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.MiddleName, null, new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.MiddleName, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.MiddleName)), aria_describedBy = errorsWrapperId, })
            </div>
        }


        {
            // Note that JavaScript interacts with these HTML elements
            // Updates to the IDs will need to be reflected in both the <label> and within Edubase.Web.UI/Assets/Scripts/Entry/add-edit-governor.js
            var inputId = @Html.IdFor(x => x.LastName);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.LastName)">
                @Html.LabelFor(x => x.LastName, $"Last name{additionalInfo}", new { @class = "govuk-label", })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.LastName, "Last name cannot be empty", new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.LastName, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.LastName)), aria_describedBy = errorsWrapperId, })
            </div>
        }
    }
}

@helper IsOriginalSignatoryMember()
{
    if (Model.DisplayPolicy.IsOriginalSignatoryMember)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.IsOriginalSignatoryMember)">
            @Html.LabelFor(x => x.IsOriginalSignatoryMember, "Original signatory member", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.IsOriginalSignatoryMember, null, new { @class = "govuk-error-message" })
            @Html.DropDownListFor(x => x.IsOriginalSignatoryMember, Model.YesNoSelect, new { @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.IsOriginalSignatoryMember)) })
        </div>
    }
}

@helper IsOriginalChairOfTrustees()
{
    if (Model.DisplayPolicy.IsOriginalChairOfTrustees)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.IsOriginalChairOfTrustees)">
            @Html.LabelFor(x => x.IsOriginalChairOfTrustees, "Original chair of trustees", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.IsOriginalChairOfTrustees, null, new { @class = "govuk-error-message" })
            @Html.DropDownListFor(x => x.IsOriginalChairOfTrustees, Model.YesNoSelect, new { @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.IsOriginalChairOfTrustees))})
        </div>
    }
}

@helper DisplayDateOfBirth()
{
    if (Model.DisplayPolicy.DOB)
    {
        @Html.EditorFor(x => x.DOB,
            new
            {
                tooltipText = "This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions."
            })
    }
}

@helper DisplayPostcode()
{
    if (Model.DisplayPolicy.PostCode)
    {
        var inputId = @Html.IdFor(x => x.PostCode);
        var errorsWrapperId = $"{inputId}-errors";
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PostCode)">
            <label class="govuk-label" for="@inputId">
                Home postcode
                <a id="PostcodeTooltipLink" href="#help-text-postcode" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the postcode field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(x => x.PostCode, null, new { @class = "govuk-error-message" })
            </span>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-postcode">
                    <h3 class="govuk-heading-s make-modal-header">Home postcode</h3>
                    <p class="govuk-body">
                        This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions.
                    </p>
                </div>
            </div>
            @Html.TextBoxFor(x => x.PostCode, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PostCode)), id = inputId, aria_describedBy = errorsWrapperId, })
        </div>
    }
}

@helper DisplayTelephoneNumber()
{
    if (Model.DisplayPolicy.TelephoneNumber)
    {
        var inputId = @Html.IdFor(x => x.TelephoneNumber);
        var errorsWrapperId = $"{inputId}-errors";
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.TelephoneNumber)">
            <label class="govuk-label" for="@inputId">
                Telephone number
                <a id="TelephoneNumberTooltipLink" href="#help-text-telephonenumber" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the telephone number field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(x => x.TelephoneNumber, null, new { @class = "govuk-error-message" })
            </span>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-telephonenumber">
                    <h3 class="govuk-heading-s make-modal-header">Telephone number</h3>
                    <p class="govuk-body">
                        This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions.
                    </p>
                </div>
            </div>
            @Html.TextBoxFor(x => x.TelephoneNumber, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.TelephoneNumber)), id = inputId, aria_describedBy = errorsWrapperId, })
        </div>
    }
}

@helper DisplayEmail()
{
    if (Model.DisplayPolicy.EmailAddress)
    {
        var labelText = "Email address";
        if (Model.GovernorRole.OneOfThese(
            eLookupGovernorRole.ChairOfGovernors,
            eLookupGovernorRole.ChairOfTrustees,
            eLookupGovernorRole.AccountingOfficer,
            eLookupGovernorRole.ChiefFinancialOfficer,
            eLookupGovernorRole.ChairOfLocalGoverningBody
            )
            || EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
        {
            labelText += " (required to save record)";
        }

        var inputId = @Html.IdFor(x => x.EmailAddress);
        var errorsWrapperId = $"{inputId}-errors";
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.EmailAddress)">

            @Html.LabelFor(x => x.EmailAddress, labelText, new { @class = "govuk-label", @for = inputId })
            <details class="govuk-details govuk-!-margin-bottom-2" data-module="govuk-details">
                <summary class="govuk-details__summary">
                    <span class="govuk-details__summary-text">
                        How this email address information is used
                    </span>
                </summary>
                <div class="govuk-details__text">
                    <p>For all governance roles, excluding accounting officers (AOs), chief financial officers (CFOs), member - organisations (with respect to secure single-academy trusts (SSATs)) and governance professionals a personal email address must be added. If the establishment or academy trust respectively assigns individuals an email address this can be added instead if the person agrees.</p>

                    <p>For member - organisations (applicable to SSATs only) the organisation's main email address must be added.</p>

                    <p>For all governance professional roles, a work email address must be added. If the governance professional does not have a work email address, then their work/business email address must be added.</p>

                    <p>Whatever email address is added it must be an up-to-date, valid, and actively monitored account by the individual or organisation.</p>

                    <p>It should be made clear to them how the email address will be used. This is especially applicable to governance professionals who may be using their work/business email address, which may also be their personal email address in some cases. This information is not publicly displayed on the website's user interface (U) or in any extracts of data; it is classed as personal data, therefore, it cannot be shared publicly, for example, through a Freedom of Information (FOI) request. Under the conditions of Article 6(1)(e) of the UK-GDPR this information can be shared with other government departments, non-departmental public bodies, arm's length bodies, local authorities and partners, for official functions and tasks within the public interest to be performed. This can include for use in criminal investigations and safeguarding.</p>

                    <p>This information is very important as it allows the Department for Education to share important information and messages with the different governance roles within an establishment or academy trust.</p>
                </div>
            </details>
            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(x => x.EmailAddress, null, new { @class = "govuk-error-message" })
            </span>
            @Html.TextBoxFor(x => x.EmailAddress, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.EmailAddress)), aria_describedBy = errorsWrapperId, })
        </div>
    }
}

@helper DisplayAppointmentDates()
{
    var isGovernorRole = false;
    string dateAppointmentEndsTooltipMessage = null;
    if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
    {
        dateAppointmentEndsTooltipMessage = "A governance professional may have a fixed appointment. If this applies, enter the date their fixed appointment is due to end. If there is not a fixed appointment, leave this field blank until their appointment ends and then add the date their appointment ended date.";
        isGovernorRole = true;
    }
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out var disableStartDate))
    {
        disableStartDate = false;
    }
    if (!bool.TryParse(ViewData["reactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }
    var editorPrefix = ViewData["editorPrefix"]?.ToString();

    if (Model.DisplayPolicy.AppointmentStartDate)
    {
        var startDateSaveRecord = isGovernorRole ? "(required to save record)" : "";
        var detail = disableStartDate ? @"(based on current governor's end date)" : $@"{startDateSaveRecord}";
        var title = $"Date of appointment {detail}";
        @Html.EditorFor(x => x.AppointmentStartDate,
            new { title, @readonly = disableStartDate, ClassPrefix = "start-date", editorPrefix })
    }

    if (Model.DisplayPolicy.AppointmentEndDate)
    {
        var titleText = Model.GovernorRole == eLookupGovernorRole.Member
            ? "Date stepped down"
            : isGovernorRole
                ? "Date appointment ended"
                : "Date term ends";

        @Html.EditorFor(x => x.AppointmentEndDate,
            new
            {
                title = titleText,
                tooltipText = dateAppointmentEndsTooltipMessage,
                showReactivationWarning,
            })
    }
}

@helper DisplayAppointingBody()
{
    if (Model.DisplayPolicy.AppointingBodyId)
    {
        var inputId = @Html.IdFor(x => x.AppointingBodyId);
        var errorsWrapperId = $"{inputId}-errors";
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.AppointingBodyId)">
            @Html.LabelFor(x => x.AppointingBodyId, "Appointing body (required to save record)", new { @class = "govuk-label" })
            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(x => x.AppointingBodyId, null, new { @class = "govuk-error-message" })
            </span>
            @Html.DropDownListFor(x => x.AppointingBodyId, Model.AppointingBodies, "",
                new { id = inputId, @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.AppointingBodyId)), aria_describedBy = errorsWrapperId, })
        </div>
    }
}

@helper DisplayPreviousName()
{
    if (Model.DisplayPolicy.PreviousFullName)
    {
        {
            var inputId = @Html.IdFor(x => x.PreviousTitleId);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousTitleId)">
                @Html.LabelFor(x => x.PreviousTitleId, new { @class = "govuk-label" })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.PreviousTitleId, null, new { @class = "govuk-error-message" })
                </span>
                @Html.DropDownListFor(x => x.PreviousTitleId, Model.PreviousTitles, "",
                    new { id = inputId, @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.PreviousTitleId)), aria_describedBy = errorsWrapperId, })
            </div>
        }

        {
            var inputId = @Html.IdFor(x => x.PreviousFirstName);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousFirstName)">
                @Html.LabelFor(x => x.PreviousFirstName, new { @class = "govuk-label" })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.PreviousFirstName, null, new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.PreviousFirstName,
                    new { id = inputId, @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousFirstName)), aria_describedBy = errorsWrapperId, })
            </div>
        }

        {
            var inputId = @Html.IdFor(x => x.PreviousMiddleName);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousMiddleName)">
                @Html.LabelFor(x => x.PreviousMiddleName, new { @class = "govuk-label" })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.PreviousMiddleName, null, new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.PreviousMiddleName,
                    new { id = inputId, @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousMiddleName)), aria_describedBy = errorsWrapperId, })
            </div>
        }

        {
            var inputId = @Html.IdFor(x => x.PreviousLastName);
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousLastName)">
                @Html.LabelFor(x => x.PreviousLastName, new { @class = "govuk-label" })
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.PreviousLastName, null, new { @class = "govuk-error-message" })
                </span>
                @Html.TextBoxFor(x => x.PreviousLastName,
                    new { id = inputId, @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousLastName)), aria_describedBy = errorsWrapperId, })
            </div>
        }
    }
}

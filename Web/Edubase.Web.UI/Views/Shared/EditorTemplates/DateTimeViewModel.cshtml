@model DateTimeViewModel
@{
    string cssClassPrefix = "";
    string showBinding = null;
    string messageBinding = null;
    string classBinding = null;_
    string labelClassName = "";
    string fieldsetClassName = "";
    bool disableHint = false;
    bool.TryParse(ViewData["disableHint"]?.ToString(), out disableHint);
    string legendPrefix = "";

    if (ViewData["labelClass"] != null)
    {
        labelClassName = ViewData["labelClass"].ToString();
    }

    if (ViewData["fieldsetClassName"] != null)
    {
        fieldsetClassName = ViewData["fieldsetClassName"].ToString();
    }
    bool showReactivationWarning;
    if (!bool.TryParse(ViewData["showReactivationWarning"]?.ToString(), out showReactivationWarning))
    {
        showReactivationWarning = false;
    }

    if (ViewData["vueModel"] != null)
    {
        showBinding = String.Concat((string)@ViewData["vueModel"], "Error");
        messageBinding = String.Concat((string)@ViewData["vueModel"], "ErrorMessage");
        classBinding = String.Concat("v-bind:class=\"[", @showBinding, "?'error': '', 'form-group create-edit-form-group date-group']\"");
    }
    else
    {
        classBinding = "class=\"govuk-form-group create-edit-form-group date-group "
            + Html.ValidationCssClass(ViewData.ModelMetadata.PropertyName) + " "
            + Html.ValidationCssClassFor(x => x) + " "
            + Html.ValidationCssClassFor(x => x.Day) + " "
            + Html.ValidationCssClassFor(x => x.Month) + " "
            + Html.ValidationCssClassFor(x => x.Year) + "\"";
    }

    if (ViewData["ClassPrefix"] != null)
    {
        cssClassPrefix = ViewData["ClassPrefix"].ToString();
    }

    if (ViewData["editorPrefix"] != null)
    {
        legendPrefix = ViewData["editorPrefix"].ToString() + "_";
    }

}
<div @Html.Raw(classBinding)>
    <fieldset class="govuk-fieldset range-group @fieldsetClassName">
        @if (ViewData["inFilters"] != null)
        {
            <span class="govuk-error-message hidden">Please check the date(s) you have entered</span>
            <span class="govuk-error-message hidden date-range-error">Please use a valid date range</span>
        }
        <legend class="govuk-fieldset__legend" id="@legendPrefix@ViewData.ModelMetadata.PropertyName" style="@ViewData["style"]">@(string.IsNullOrWhiteSpace(ViewData["title"] as string) ? ViewData.ModelMetadata.DisplayName : ViewData["title"])</legend>

        @{
            var fullFieldId = ViewData.TemplateInfo.GetFullHtmlFieldName(Model?.Label)
                .Replace(".", "_")
                .Replace("[", "_")
                .Replace("]", "_");

            if (fullFieldId != string.Empty && !string.Concat(legendPrefix, ViewData.ModelMetadata.PropertyName).Equals(fullFieldId))
            {
                <div id="@fullFieldId"></div>
            }

            foreach (var modelStateKey in ViewData.ModelState.Keys)
            {
                if (modelStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCultureIgnoreCase) &&
                    !modelStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCulture))
                {
                    <div id="@modelStateKey"></div>
                }
            }
        }

        @if (!disableHint)
        {
            <div class="govuk-hint">For example, 20 03 2003</div>
        }

        @if (showReactivationWarning)
        {
            <div class="warning-message">
                <p>Changing this date may reactivate the record</p>
            </div>
        }

        @{
            var errContent = new List<MvcHtmlString>()
            {
                Html.ValidationMessageNested(ViewData.ModelMetadata.PropertyName),
                Html.ValidationMessageFor(x => x),
                Html.ValidationMessageFor(x => x.Day),
                Html.ValidationMessageFor(x => x.Month),
                Html.ValidationMessageFor(x => x.Year)
            };

            foreach (var mvcHtmlString in errContent.Select(x => x?.ToHtmlString()).Distinct())
            {
                @Html.Raw(mvcHtmlString)
            }
        }

        @if (ViewData["vueModel"] != null)
        {
            <span class="govuk-error-message" v-show="@showBinding" v-html="@messageBinding"></span>
        }
        <div class="govuk-date-input">
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Day, new {@class = string.Concat(labelClassName, " govuk-date-input__label ")})
                    @Html.TextBoxFor(x => x.Day, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"govuk-input {cssClassPrefix}-day", 2, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Day") : null))
                </div>
            </div>
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Month, new {@class = string.Concat(labelClassName, " govuk-date-input__label")})
                    @Html.TextBoxFor(x => x.Month, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"govuk-input {cssClassPrefix}-month", 2, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Month") : null))
                </div>
            </div>
            <div class="govuk-date-input__item gias-year-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Year, new {@class = string.Concat(labelClassName, " govuk-date-input__label")})
                    @Html.TextBoxFor(x => x.Year, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"govuk-input {cssClassPrefix}-year", 4, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Year") : null))
                </div>
            </div>
        </div>
    </fieldset>
</div>

@functions
{
    object GetCheckboxAttributes(bool? readOnly, string cssClasses, int maxlength, string vueModel)
    {
        if (readOnly.HasValue && readOnly.Value)
            return new { @class = cssClasses, @disabled = "disabled", maxlength = maxlength };

        if (vueModel != null)
            return new { @class = cssClasses, maxlength = maxlength, v_model = vueModel };

        return new { @class = cssClasses, maxlength = maxlength };
    }
}

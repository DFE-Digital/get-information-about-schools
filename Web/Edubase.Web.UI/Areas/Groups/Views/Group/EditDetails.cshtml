@using Edubase.Common;
@using Edubase.Services.Security
@using VM = Edubase.Web.UI.Areas.Groups.Models.CreateEdit.GroupEditorViewModel;
@using L = Edubase.Services.Enums.eLookupGroupType;
@using S = Edubase.Services.Enums.eLookupGroupStatus;
@model VM
@{
    ViewBag.hideLogo = true;
    ViewBag.Title = Model.PageTitle;
    ViewBag.OriginalGroupName = Model.OriginalGroupName;
    ViewBag.OriginalGroupTypeName = Model.OriginalGroupTypeName;
    Layout = "_EditLayoutPage.cshtml";
    var buttonSaveText = Model.InEditMode ?
        Model.GroupTypeId.OneOfThese(L.SingleacademyTrust, L.MultiacademyTrust) ? "Continue" : "Save details"
        : "Create new " + Model.GroupTypeLabelPrefix.ToLower();
}

@section BreadCrumbs {
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="govuk-breadcrumbs">
                <ol class="govuk-breadcrumbs__list">
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("Search", "Index", "Search", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                </ol>
            </div>
        </div>
    </div>
}

<div class="tab-content">

    @using (Html.BeginForm("EditDetails", "Group", new { area = "Groups" }, FormMethod.Post, new { @id = "edit-group-details" }))
    {
        @Html.HiddenFor(x => x.GroupUId)
        @Html.HiddenFor(x => x.GroupTypeMode)
        @Html.HiddenFor(x => x.SaveMode)
        @Html.HiddenFor(x => x.SelectedTabName)
        @Html.HiddenFor(x => x.GroupTypeName)
        @Html.HiddenFor(x => x.ListOfEstablishmentsPluralName)
        @Html.HiddenFor(x => x.AddressJsonToken)
        @Html.HiddenFor(x => x.ProcessedWarnings)
        @Html.HiddenFor(x => x.CanUserCloseAndMarkAsCreatedInError)
        @Html.HiddenFor(x => x.CanUserEditClosedDate)
        @Html.HiddenFor(x => x.CanUserEditStatus)
        @Html.HiddenFor(x => x.OriginalStatusId)
        @Html.HiddenFor(x => x.LocalAuthorityId)


        if (Model.ChangesSummary != null)
        {
            @Html.HiddenFor(x => x.CloseAndMarkAsCreatedInError)
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    @Html.Partial("Partials/_ConfirmChanges")
                    @Html.Hidden(nameof(Model.ChangesAcknowledged), true)

                    <div class="button-row govuk-!-padding-top-8">
                        <button type="submit" name="action" class="govuk-button" id="edit-submit" value="@VM.ActionSave">Accept and save</button>
                        @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUId }, new { @class = "govuk-button govuk-button--secondary cancel", data_module = "govuk-button" })
                    </div>
                </div>
            </div>
        }

        <div class="@Html.Conditional(Model.ChangesSummary != null, "hidden")">
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    <div class="button-row govuk-!-margin-bottom-4">
                        <button type="submit" name="action" class="govuk-button" id="edit-submit" value="@VM.ActionSave">@buttonSaveText</button>
                        @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUId }, new { @class = "govuk-button govuk-button--secondary cancel", data_module = "govuk-button" })
                    </div>
                </div>
            </div>
            <div class="govuk-grid-row">
                <div class="govuk-grid-column-one-half">
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GroupName)">
                        <label for="name" class="govuk-label">@Model.GroupTypeLabelPrefix name</label>
                        @Html.ValidationMessageFor(x => x.GroupName, null, new { @class = "govuk-error-message" })
                        @if (Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust))
                        {
                            <input value="@Model.GroupName" disabled="disabled" class="govuk-input" id="@nameof(Model.GroupName)" />
                            @Html.HiddenFor(x => x.GroupName)
                        }
                        else
                        {
                            @Html.TextBoxFor(x => x.GroupName, new { @class = "govuk-input" })
                        }
                    </div>

                    @if (Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust, L.ChildrensCentresGroup))
                    {
                        <div class="govuk-form-group">
                            <label for="address" class="govuk-label">Address</label>
                            <input type="text" value="@Model.Address" class="govuk-input" disabled="disabled" id="address" />
                            @Html.HiddenFor(x => x.Address)
                        </div>
                    }

                    @if (Model.GroupUId.HasValue)
                    {
                        <div class="govuk-form-group">
                            <label for="groupUID" class="govuk-label"><abbr title="Unique Identifier">Unique group identifier (UID)</abbr></label>
                            <input value="@Model.GroupUId" disabled="disabled" class="govuk-input" id="groupUID" />
                        </div>
                    }

                    @if (Model.GroupTypeMode == VM.eGroupTypeMode.ChildrensCentre)
                    {
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.LocalAuthorityId)">
                            <label for="localAuthorityId" class="govuk-label">Local authority (LA)</label>
                            @Html.ValidationMessageFor(x => x.LocalAuthorityId)
                            @if (Model.IsLocalAuthorityEditable)
                            {
                                @Html.DropDownListFor(x => x.LocalAuthorityId, Model.LocalAuthorities, "", new { @class = "govuk-select", id = "localAuthorityId" })
                            }
                            else
                            {
                                <input value="@(Model.LocalAuthorityName)" disabled="disabled" class="govuk-input" id="localAuthorityId" />
                                @Html.HiddenFor(x => x.LocalAuthorityName)
                                @Html.HiddenFor(x => x.LocalAuthorityId)
                            }
                            @Html.HiddenFor(x => x.IsLocalAuthorityEditable)
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.LocalAuthorityName)
                        @Html.HiddenFor(x => x.LocalAuthorityId)
                    }

                    @if (Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust, L.SchoolSponsor))
                    {
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GroupId)">
                            <label for="GroupId" class="govuk-label">Group identifier (ID)</label>
                            @Html.ValidationMessageFor(x => x.GroupId, null, new { @class = "govuk-error-message" })
                            @Html.TextBoxFor(x => x.GroupId, new { @class = "govuk-input", maxlength = 120 })
                        </div>
                    }

                    @if (Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust))
                    {
                        <div class="govuk-form-group">
                            <label class="govuk-label" for="companiesHouseNumber">
                                Company number<br />
                                (also known as Companies House (CH) number)
                            </label>
                            <input type="text" value="@Model.CompaniesHouseNumber" class="govuk-input" disabled="disabled" id="companiesHouseNumber" />
                            @Html.HiddenFor(x => x.CompaniesHouseNumber)
                        </div>
                    }

                    @if (Model.CanUserEditUkprn)
                    {
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.UKPRN)">
                            <label class="govuk-label" for="UKPRN">UK provider reference number (UKPRN)</label>
                            @Html.ValidationMessageFor(x => x.UKPRN, null, new { @class = "govuk-error-message" })
                            @Html.TextBoxFor(x => x.UKPRN, new { @class = "govuk-input" })
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.UKPRN)
                        if (Model.UKPRN.HasValue)
                        {
                            <div class="govuk-form-group">
                                <label class="govuk-label" for="UKPRN">UK provider reference number (UKPRN)</label>
                                <input value="@Model.UKPRN.Value" disabled="disabled" class="govuk-input" />
                            </div>
                        }
                    }

                    <div class="govuk-form-group">
                        <label class="govuk-label" for="groupTypeName">Group type</label>
                        <input type="text" value="@Model.GroupTypeName" class="govuk-input" disabled="disabled" id="groupTypeName" />
                        @Html.HiddenFor(x => x.GroupTypeId)
                    </div>

                    @* STATUS *@
                    @if (Model.CanUserEditStatus)
                    {
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.StatusId)">
                            <label for="StatusId" class="govuk-label">Status</label>
                            @Html.DropDownListFor(x => x.StatusId, Model.Statuses, "", new { @class = "govuk-select" })
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.StatusId)
                    }

                    @* OPEN DATE *@
                    @if (Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust))
                    {
                        <div class="govuk-form-group">
                            <label for="openDate" class="govuk-label">@Model.OpenDateLabel</label>
                            <input value="@(Model.OpenDate.ToDateTime()?.ToString("d MMMM yyyy") ?? "Not recorded")" disabled="disabled" class="govuk-input" id="openDate" />
                            @Html.HiddenFor(x => x.OpenDate.Day)
                            @Html.HiddenFor(x => x.OpenDate.Month)
                            @Html.HiddenFor(x => x.OpenDate.Year)
                        </div>
                    }
                    else
                    {
                        @Html.EditorFor(x => x.OpenDate, new { title = @Model.OpenDateLabel, fieldsetClassName = "edit-date-fieldset" })
                    }

                    @* CLOSED DATE *@
                    @if (!Model.GroupType.OneOfThese(L.MultiacademyTrust, L.SingleacademyTrust) || Model.CanUserEditClosedDate)
                    {
                        @Html.EditorFor(x => x.ClosedDate, new { title = "Close date", fieldsetClassName = "closed-date edit-date-fieldset" })
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.ClosedDate.Day)
                        @Html.HiddenFor(x => x.ClosedDate.Month)
                        @Html.HiddenFor(x => x.ClosedDate.Year)
                    }

                    @if (User.InRole(AuthorizedRoles.CanSeeChildrensCentreGroupManagerEmail) && Model.GroupType == L.ChildrensCentresGroup)
                    {
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.ManagerEmailAddress)">
                            <label for="ManagerEmailAddress" class="govuk-label">@Model.GroupTypeLabelPrefix manager email</label>
                            @Html.ValidationMessageFor(x => x.ManagerEmailAddress, null, new { @class = "govuk-error-message" })
                            @Html.TextBoxFor(x => x.ManagerEmailAddress, new { @class = "govuk-input" })
                        </div>
                    }



                    @if (Model.CanUserCloseAndMarkAsCreatedInError)
                    {
                        // var groupTypeShortName = Model.GroupTypeId == 5 ? Model.GroupTypeName.ToLower() : "trust";

                        <div class="govuk-form-group">
                            @FormHelpers.GiasCheckbox("true",
                                nameof(Model.CloseAndMarkAsCreatedInError),
                                Model.CloseAndMarkAsCreatedInErrorLabel,
                                " govuk-!-padding-top-0",
                                new { id = "close-created-in-error" })
                        </div>
                    }

                </div>
            </div>

            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    <div class="button-row govuk-!-padding-top-4">
                        <button type="submit" name="action" class="govuk-button" id="edit-submit" value="@VM.ActionSave">@buttonSaveText</button>
                        @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUId }, new { @class = "govuk-button govuk-button--secondary cancel", data_module = "govuk-button" })
                    </div>

                </div>
            </div>

            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    @Html.Partial("Warnings")
                </div>
            </div>
        </div>
    }
</div>

@section ViewScripts
{
    <script src="@Html.Raw(Html.GetWebpackScriptUrl("edit-group-details.*.js"))"></script>
}

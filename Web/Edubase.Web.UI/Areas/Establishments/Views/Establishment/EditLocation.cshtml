@using System.Linq
@using ViewModel = Edubase.Web.UI.Models.EditEstablishmentModel
@using System.Linq.Expressions
@using Edubase.Common
@model ViewModel
@{
    if (Model.ChangesSummary == null)
    {
        Layout = "_EditLayoutPage.cshtml";
    }
    else
    {
        ViewBag.bodyClasses = "create-edit school-details";
        ViewBag.hideLogo = true;
        ViewBag.Title = "Edit establishment";
    }
}
@using (Html.BeginForm())
{
    <div class="tab-content">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Urn)
        @Html.HiddenFor(x => x.Name)
        @Html.HiddenFor(x => x.SelectedTab)
        @Html.HiddenFor(x => x.ChangesInstantCount)
        @Html.HiddenFor(x => x.ChangesRequireApprovalCount)

        <div class="govuk-grid-row @Html.Conditional(Model.ChangesSummary != null, "hidden")">

            <div class="govuk-grid-column-full">
                <div class="button-row govuk-!-margin-bottom-4">
                    @Html.ActionLink(
                        "Back",
                        "Details",
                        "Establishment",
                        null,
                        null,
                        "school-location",
                        new { id = Model.Urn },
                        new { @class = "govuk-back-link gias-back-link--button", data_module="govuk-button" })
                </div>
            </div>
            <div class="govuk-grid-column-one-half">
                @if (Model.EditPolicy.RSCRegionId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.RSCRegionId)">
                        <label for="RSCRegionId" class="govuk-label" title="Regional School Comissioner">
                            Regional schools commissioner (RSC) region
                        </label>
                        @Html.ValidationMessageFor(x => x.RSCRegionId, null, new {@class = "govuk-error-message"})
                        @Html.DropDownListFor(x => x.RSCRegionId, Model.RSCRegions, "", new { @class = "govuk-select" })
                    </div>
                }

                @if (Model.EditPolicy.GovernmentOfficeRegionId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GovernmentOfficeRegionId)">
                        <label for="GovernmentOfficeRegionId" class="govuk-label">Government office region (GOR)</label>
                        @Html.ValidationMessageFor(x => x.GovernmentOfficeRegionId, null, new {@class = "govuk-error-message"})
                        @Html.DropDownListFor(x => x.GovernmentOfficeRegionId, Model.GovernmentOfficeRegions, "", new { @class = "govuk-select" })
                    </div>
                }

                @if (Model.EditPolicy.AdministrativeDistrictId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.AdministrativeDistrictId) @Html.ValidationCssClassFor(x => x.AdministrativeDistrictName)" id="searchby-district-ref">
                        <label class="govuk-label" for="@nameof(Model.AdministrativeDistrictName)">District</label>
                        @Html.ValidationMessageFor(x => x.AdministrativeDistrictId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.AdministrativeDistrictName, null, new {@class = "govuk-error-message"})

                        @if (Model.LocationEditField.Equals(nameof(Model.AdministrativeDistrictId)))
                        {
                            var options = Model.AdministrativeDistricts.Select(x =>
                                new SelectListItem
                                {
                                    Value = x.Id.ToString(),
                                    Text = x.Name
                                }).ToList();
                            @Html.DropDownListFor(x => x.AdministrativeDistrictId, options, new {@class = "govuk-select"})
                        }
                        else
                        {
                            <div id="AdministrativeDistrictId" class="autosuggest">
                                @Html.TextBoxFor(x => x.AdministrativeDistrictName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled"})
                            </div>
                            @Html.HiddenFor(x => x.AdministrativeDistrictId, new {id = "AdministrativeDistrictIdHidden"})
                        }

                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit administrative district",
                                    "EditLocation",
                                    "Establishment",
                                    null,
                                    null,
                                    nameof(Model.AdministrativeDistrictId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.AdministrativeDistrictId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }

                    </div>

                }

                @if (Model.EditPolicy.AdministrativeWardId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.AdministrativeWardId) @Html.ValidationCssClassFor(x => x.AdministrativeWardName)" id="searchby-ward-ref">
                        <label class="govuk-label" for="@nameof(Model.AdministrativeWardName)">Ward</label>
                        @Html.ValidationMessageFor(x => x.AdministrativeWardId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.AdministrativeWardName, null, new {@class = "govuk-error-message"})
                        @if (Model.LocationEditField.Equals(nameof(Model.AdministrativeWardId)))
                         {
                             var options = Model.AdministrativeWards.Select(x =>
                                 new SelectListItem
                                 {
                                     Value = x.Id.ToString(),
                                     Text = x.Name
                                 }).ToList();
                             @Html.DropDownListFor(x => x.AdministrativeWardId, options, new {@class = "govuk-select"})
                         }
                         else
                         {
                             <div id="AdministrativeWardId" class="autosuggest scrollableAutosuggest form-control">
                                 @Html.TextBoxFor(x => x.AdministrativeWardName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled" })
                             </div>
                             @Html.HiddenFor(x => x.AdministrativeWardId, new { id = "AdministrativeWardIdHidden" })
                         }

                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit administrative ward",
                                    "EditLocation",
                                    "Establishment",
                                    null, null,
                                    nameof(Model.AdministrativeWardId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.AdministrativeWardId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }
                    </div>
                }

                @if (Model.EditPolicy.ParliamentaryConstituencyId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.ParliamentaryConstituencyId) @Html.ValidationCssClassFor(x => x.ParliamentaryConstituencyName)" id="searchby-constituency-ref">
                        <label class="govuk-label" for="@nameof(Model.ParliamentaryConstituencyName)">Parliamentary constituency</label>
                        @Html.ValidationMessageFor(x => x.ParliamentaryConstituencyId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.ParliamentaryConstituencyName, null, new {@class = "govuk-error-message"})
                        @if (Model.LocationEditField.Equals(nameof(Model.ParliamentaryConstituencyId)))
                         {
                             var options = Model.ParliamentaryConstituencies.Select(x =>
                                 new SelectListItem
                                 {
                                     Value = x.Id.ToString(),
                                     Text = x.Name
                                 }).ToList();
                             @Html.DropDownListFor(x => x.ParliamentaryConstituencyId, options, new {@class = "govuk-select"})
                         }
                        else
                        {
                            <div id="ParliamentaryConstituencyId" class="autosuggest form-control">
                                @Html.TextBoxFor(x => x.ParliamentaryConstituencyName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled"})
                            </div>
                            @Html.HiddenFor(x => x.ParliamentaryConstituencyId, new { id = "ParliamentaryConstituencyIdHidden" })
                        }

                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit parliamentary constituency",
                                    "EditLocation",
                                    "Establishment",
                                    null, null,
                                    nameof(Model.ParliamentaryConstituencyId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.ParliamentaryConstituencyId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }
                    </div>
                }

                @if (Model.EditPolicy.UrbanRuralId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.UrbanRuralId)">
                        <label for="UrbanRuralId" class="govuk-label">Urban/rural description</label>
                        @Html.ValidationMessageFor(x => x.UrbanRuralId, null, new {@class = "govuk-error-message"})
                        @Html.DropDownListFor(x => x.UrbanRuralId, Model.UrbanRuralLookup, "", new { @class = "govuk-select" })
                    </div>
                }

                @if (Model.EditPolicy.GSSLAId)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GSSLAId) @Html.ValidationCssClassFor(x => x.GSSLAName)" id="searchby-gssla-ref">
                        <label class="govuk-label" for="@nameof(Model.GSSLAName)">Government Statistical Service (GSS) local authority code</label>
                        @Html.ValidationMessageFor(x => x.GSSLAId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.GSSLAName, null, new {@class = "govuk-error-message"})

                        @if (Model.LocationEditField.Equals(nameof(Model.GSSLAId)))
                        {
                            var options = Model.GSSLALookup.Select(x =>
                                new SelectListItem
                                {
                                    Value = x.Id.ToString(),
                                    Text = x.Name
                                }).ToList();
                            @Html.DropDownListFor(x => x.GSSLAId, options, new {@class = "govuk-select"})
                        }
                        else
                        {
                            <div id="GSSLAId" class="autosuggest">
                                @Html.TextBoxFor(x => x.GSSLAName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled"})
                            </div>
                            @Html.HiddenFor(x => x.GSSLAId, new { id = "GSSLAIdHidden" })
                        }

                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit (GSS) local authority code",
                                    "EditLocation",
                                    "Establishment",
                                    null, null,
                                    nameof(Model.GSSLAId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.GSSLAId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }
                    </div>
                }

                @if (Model.EditPolicy.Easting)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Easting)">
                        <label class="govuk-label" for="Easting">Easting</label>
                        @Html.ValidationMessageFor(x => x.Easting, null, new {@class = "govuk-error-message"})
                        @Html.TextBoxFor(x => x.Easting, new { @class = "govuk-input" })
                    </div>
                }

                @if (Model.EditPolicy.Northing)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Northing)">
                        <label class="govuk-label" for="Northing">Northing</label>
                        @Html.ValidationMessageFor(x => x.Northing, null, new {@class = "govuk-error-message"})
                        @Html.TextBoxFor(x => x.Northing, new { @class = "govuk-input" })
                    </div>
                }
 

                @if (Model.EditPolicy.MSOACode)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.MSOAId) @Html.ValidationCssClassFor(x => x.MSOAName)" id="searchby-msoa-ref">
                        <label class="govuk-label" for="@nameof(Model.MSOAName)">Middle super output area (MSOA)</label>
                        @Html.ValidationMessageFor(x => x.MSOAId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.MSOAName, null, new {@class = "govuk-error-message"})

                        @if (Model.LocationEditField.Equals(nameof(Model.MSOAId)))
                        {
                            var options = Model.MSOAs.Select(x =>
                                new SelectListItem
                                {
                                    Value = x.Id.ToString(),
                                    Text = x.Name
                                }).ToList();
                            @Html.DropDownListFor(x => x.MSOAId, options, new {@class = "govuk-select"})
                        }
                        else
                        {
                            <div id="MSOAId" class="autosuggest">
                                @Html.TextBoxFor(x => x.MSOAName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled" })
                            </div>
                            @Html.HiddenFor(x => x.MSOAId, new { id = "MSOAIdHidden" })
                        }


                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit middle super output area",
                                    "EditLocation",
                                    "Establishment",
                                    null, null,
                                    nameof(Model.MSOAId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.MSOAId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }
                    </div>
                }

                @if (Model.EditPolicy.LSOACode)
                {
                    <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.LSOAId) @Html.ValidationCssClassFor(x => x.LSOAName)" id="searchby-lsoa-ref">
                        <label class="govuk-label" for="@nameof(Model.LSOAName)">Lower super output area (LSOA)</label>
                        @Html.ValidationMessageFor(x => x.LSOAId, null, new {@class = "govuk-error-message"})
                        @Html.ValidationMessageFor(x => x.LSOAName, null, new {@class = "govuk-error-message"})

                        @if (Model.LocationEditField.Equals(nameof(Model.LSOAId)))
                        {
                            var options = Model.LSOAs.Select(x =>
                                new SelectListItem
                                {
                                    Value = x.Id.ToString(),
                                    Text = x.Name
                                }).ToList();
                            @Html.DropDownListFor(x => x.LSOAId, options, new {@class = "govuk-select"})
                        }
                        else
                        {
                            <div id="LSOAId" class="autosuggest">
                                @Html.TextBoxFor(x => x.LSOAName, new {@class = "govuk-input", autocomplete = "off", disabled = "disabled" })
                            </div>
                            @Html.HiddenFor(x => x.LSOAId, new { id = "LSOAIdHidden" })
                        }


                        @if (Model.LocationEditField.IsNullOrEmpty())
                        {
                            <div class="button-row govuk-!-padding-top-2 no-js-show-block">
                                @Html.ActionLink("Edit lower super output area",
                                    "EditLocation",
                                    "Establishment",
                                    null, null,
                                    nameof(Model.LSOAId),
                                    new {area = "Establishments", id = Model.Urn, locationField = nameof(Model.LSOAId)},
                                    new {@class = "govuk-button govuk-button--secondary"})
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="govuk-grid-column-full">
                <div class="button-row  govuk-!-padding-top-4">
                    <button type="submit" class="govuk-button" name="@nameof(Model.ActionSpecifier)" value="@ViewModel.GetActionSpecifier(ViewModel.ASSave, ViewModel.ASSaveLocation)">Save location</button>
                </div>
            </div>
        </div>
        @if (Model.ChangesSummary != null)
        {
            Html.RenderPartial("Partials/_ConfirmChanges");

            <div class="button-row">
                @* <button class="govuk-button--secondary govuk-button" name="@nameof(Model.ActionSpecifier)" type="submit" value="@ViewModel.ASCancel">&laquo; Back</button> *@
                <button type="submit" name="@nameof(Model.ActionSpecifier)" value="@ViewModel.ASConfirm" class="govuk-button js-confirm">Accept and save</button>

                @* @Html.ActionLink( *@
                @*     "Cancel", *@
                @*     "Details", *@
                @*     "Establishment", *@
                @*     null, *@
                @*     null, *@
                @*     "school-location", *@
                @*     new {id = Model.Urn}, *@
                @*     new {@class = "govuk-button govuk-button--secondary cancel", data_module = "govuk-button"}) *@
            </div>
        }
        else
        {
            <script nonce="@Html.ScriptNonce()">window.blockReOrder = true;</script>
        }

    </div>
}
@if (Model.ChangesSummary == null)
{
@section ViewScripts
{
    <script nonce="@Html.ScriptNonce()">
        var isConfimingChanges = @((Model.ChangesSummary != null).ToString().ToLower());
        window.lsoas = @Html.Json(Model.LSOAs);
        window.msoas = @Html.Json(Model.MSOAs);
        window.districts = @Html.Json(Model.AdministrativeDistricts);
        window.wards = @Html.Json(Model.AdministrativeWards);
        window.constituencies = @Html.Json(Model.ParliamentaryConstituencies);
        window.gsslas = @Html.Json(Model.GSSLALookup);

    </script>
    <script src="@Html.Raw(Html.GetWebpackScriptUrl("edit-location.*.js"))"></script>
}
}
else
{
@section ViewScripts
{
    <script nonce="@Html.ScriptNonce()">
        var isConfimingChanges = @((Model.ChangesSummary != null).ToString().ToLower());
    </script>
    <script src="@Html.Raw(Html.GetWebpackScriptUrl("edit-location.*.js"))"></script>
}
}

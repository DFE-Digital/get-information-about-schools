@model CreateEditGroupModel
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.Title = "Create/edit academy trust";

    var dc = new Edubase.Data.DbContext.ApplicationDbContext();

    var disableFields = (Model.GroupUID != null);

   
}


@Model.OpenDate.ToDateTime()
@using (Html.BeginForm((Model.GroupUID == null ? "Create" : "Edit"), "Group", FormMethod.Post))
{ 
    @Html.HiddenFor(x => x.GroupUID)
    <div class="grid-row">
        <div class="column-full">
            @Html.ActionLink("Search for an Academy Trust", "Index", "Search", null, new { @class = "home-link" })
            
            

            @if (Model.GroupUID == null)
            {
                <button type="submit" class="button header-submit" style="margin-top:80px;" name="action" value="save">Submit</button>
                <h1 class="heading-xlarge">Create a new Academy Trust</h1>
            }
            else
            {
                
                @*<div>
                    @Html.ActionLink("Cancel", "Details", "Group", new { id = Model.GroupUID }, new { @class = "button button-grey header-submit" })
                    <button type="submit" class="button header-submit" name="action" value="save">Submit</button>
                </div>*@
                

                <h1 class="heading-xlarge">Edit Academy Trust</h1>
            }


            
            <div class="column-half">
                @Html.ValidationSummary(null, new { @class = "error-summary" })

                <div class="form-group @Html.ValidationCssClassFor(x=>x.Name)">
                    <label for="name">Trust name</label>
                    @Html.EduTextBoxFor(x => x.Name,
                        disableFields ? (object)new { maxlength = 120, id = "name", @class = "form-control", disabled = "disabled" } : (object)new { maxlength = 120, id = "name", @class = "form-control" })
                </div>

                <div class="form-group @Html.ValidationCssClassFor(x => x.TypeId)">
                    <label for="la">Trust type</label>
                    @Html.EduDropDownFor(x => x.TypeId, dc.LookupGroupTypes.Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }),
                            disableFields ? (object)new { id = "la", @class = "form-control", disabled = "disabled" } : (object)new { id = "la", @class = "form-control" })
                </div>
                @if (Model.GroupUID == null)
                {
                    <div class="form-group drop-down-date range-group @Html.ValidationCssClassFor(x => x.OpenDate)">
                        <fieldset>
                            <legend>Open date</legend>

                            @Html.ValidationMessageFor(x => x.OpenDate)
                            <span class="inline-form-control">
                                <label>Day</label>
                                @Html.DropDownListFor(x => x.OpenDate.Day,
                                Enumerable.Range(1, 31).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "DD",
                                new { id = "opendate-day", @class = "form-control" })

                            </span>
                            <span class="inline-form-control">
                                <label>Month</label>
                                @Html.DropDownListFor(x => x.OpenDate.Month,
                                Enumerable.Range(1, 12).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "MM",
                                new { id = "opendate-month", @class = "form-control" })
                            </span>
                            <span class="inline-form-control">
                                <label>Year</label>
                                @Html.DropDownListFor(x => x.OpenDate.Year,
                                Enumerable.Range(1900, 2050).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "YYYY",
                                new { id = "opendate-year", @class = "form-control" })
                            </span>
                        </fieldset>
                    </div>
                }
                else
                {

                    <div class="form-group">
                        <label>Incorporated on</label>
                        <input type="text" value="Not recorded" class="form-control" disabled="disabled" />
                        @* TODO - help please Kris - i couldn't get this to work properly
                    @Html.EduTextBoxFor(x => x.OpenDate, new {@class = "form-control", disabled = "disabled"})*@
                    </div>
                }

                <div class="form-group @Html.ValidationCssClassFor(x=>x.CompaniesHouseNumber)">
                    <label for="companieshousenumber">Companies house number</label>
                    @Html.EduTextBoxFor(x => x.CompaniesHouseNumber, disableFields ? (object)new { maxlength = 120, id = "companieshousenumber", @class = "form-control", disabled = "disabled" } : (object)new { maxlength = 120, id = "companieshousenumber", @class = "form-control" })
                </div>

                <div class="form-group">
                    <label for="groupid">Group ID</label>
                    @Html.EduTextBoxFor(x => x.GroupId, new { @class = "form-control", maxlength = 120, id = "groupid" })
                </div>
            </div>
            
            <div class="column-two-thirds">
                <div class="form-group">
                    <label for="trust-address">Address</label>
                    @Html.EduTextBoxFor(x => x.Address, new { @class = "form-control", disabled = "disabled", id = "trust-address" })
                </div>
            </div>
                     
        </div>
        
    </div>
    if (Model.GroupUID.HasValue)
    {
        <div class="grid-row">
            <div class="column-half">
                <span class="bold-xsmall">Add establishment to this Academy Trust</span>
                <p  class="font-xsmall">Enter the establishment URN</p>
                <div class="form-group">
                    @Html.TextBoxFor(x => x.SearchURN, new { @class = "form-control form-control-1-2 search-box" })
                    <input type="submit" name="action" value="Find" class="button button-find-inline"  />
                </div>
                @if (Model.EstablishmentName != null)
                {
                    <p class="bold-xsmall">Establishment found</p>
                    <table class="borderless">
                        <tr>
                            <td>
                                @Model.EstablishmentName
                            </td>
                            <td>
                                <input type="submit" name="action" value="Add" class="button" />
                                @Html.HiddenFor(x => x.EstablishmentUrn)
                            </td>
                        </tr>
                    </table>
                }
                @if (Model.EstablishmentNotFound)
                {
                    <p class="bold-xsmall">Establishment not found</p>
                }
            </div>
        </div>
    }
    <div class="grid-row">
        <div class="column-two-thirds">

            @if (Model.Establishments.Count > 0)
            {
                <h2 class="heading-large">List of establisments (@Model.Establishments.Count)</h2>
            }

            @Html.HiddenFor(x => x.EstabUrnToRemove)
                <ul class="school-results-listing">
                
                @for (int i = 0; i < Model.Establishments.Count; i++)
                {
                    <li>
                        
                        <h2>@Html.ActionLink(Model.Establishments[i].Name, "Details", "Establishment", new { id = Model.Establishments[i].Urn }, new { @class = "bold-small", target = "_blank" })</h2>
                        <dl>
                            <dt>Address:</dt>
                            <dd>@Model.Establishments[i].Address</dd>
                            <dt>URN:</dt>
                            <dd>@Model.Establishments[i].Urn</dd>
                            <dt>School type:</dt>
                            <dd>@Model.Establishments[i].Type</dd>
                            <dt>Headteacher name:</dt>
                            <dd>@Model.Establishments[i].HeadteacherName</dd>
                        </dl>
                        <div class="form-group">
                            <input type="submit" class="button button-grey" name="action" value="Remove" onclick="$('#EstabUrnToRemove').val(@Model.Establishments[i].Urn);" />
                            @*@Html.ActionLink("Edit", "Edit", "Establishment", new { id = Model.Establishments[i].Urn })*@
                            <a class="button button-grey "href="/Establishment/Edit/@Model.Establishments[i].Urn">Edit</a>
                        </div>
                        @Html.HiddenFor(x => x.Establishments[i].Name)
                        @Html.HiddenFor(x => x.Establishments[i].Urn)
                        @Html.HiddenFor(x => x.Establishments[i].Address)
                        @Html.HiddenFor(x => x.Establishments[i].Type)
                        @Html.HiddenFor(x => x.Establishments[i].HeadteacherName)
                    </li>                   
                }
            </ul>
        </div>
    </div>
    <div class="grid-row">
        <div class="column-full">
            <div class="submit-cancel-panel">
                
                @if (Model.GroupUID.HasValue)
                {
                    @Html.ActionLink("Cancel", "Details", "Group", new { id = Model.GroupUID }, new { @class = "button button-grey cancel" })
                }
                <button type="submit" class="button submit" name="action" value="save">Submit</button>
            </div>
        </div>
    </div>
}

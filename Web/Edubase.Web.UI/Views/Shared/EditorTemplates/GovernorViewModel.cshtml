@using Edubase.Common
@using Edubase.Services.Enums
@model Edubase.Web.UI.Areas.Governors.Models.GovernorViewModel

@if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
{
    @DisplayGid()
    @DisplayName()
    @DisplayDateOfBirth()
    @DisplayPostcode()
    @DisplayTelephoneNumber()
    @DisplayEmail()
    @DisplayAppointmentDates()
}
else
{
    @DisplayName()
    @DisplayGid()
    @DisplayAppointingBody()
    @DisplayAppointmentDates()
    @DisplayEmail()
    @DisplayPostcode()
    @DisplayDateOfBirth()
    @DisplayPreviousName()
    @DisplayTelephoneNumber()
}

@helper DisplayGid()
{
    if (Model.DisplayPolicy.Id)
    {
        <div class="govuk-form-group">
            <label class="govuk-label" for="governorGidInput">
                Governance role identifier (GID)
                <a id="GidTooltipLink" href="#help-text-gid" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the governance role identifier field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-gid">
                    <h3 class="govuk-heading-s make-modal-header">Governance role identifier (GID)</h3>
                    <p class="govuk-body">
                        This field is greyed out as it is not editable because it is generated by the system.
                    </p>
                </div>
            </div>
            <input id="governorGidInput" class="govuk-input" value="@Model.GID" readonly="readonly" disabled="disabled"/>
        </div>

    }
}

@helper DisplayName()
{
    if (Model.DisplayPolicy.FullName)
    {
        <div class="govuk-form-group" id="governorFullNameDiv" style="display:none">
            <label class="govuk-label" for="governorFullNameInput">
                Name
                <a id="FullNameTooltipLink" href="#help-text-full-name" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the name field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-full-name">
                    <h3 class="govuk-heading-s make-modal-header">Name</h3>
                    <p class="govuk-body">
                        <span class="govuk-visually-hidden">Help Text:</span>
                        The full name input is not editable, because it is auto-populated by joining together name parts.
                    </p>
                </div>
            </div>
            <input id="governorFullNameInput" class="govuk-input" readonly="readonly" disabled="disabled" value="@Model.FullName"/>
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GovernorTitleId)">
            @Html.LabelFor(x => x.GovernorTitleId, new { @class = "govuk-label", @for = "governor-title-dropdown"})
            @Html.ValidationMessageFor(x => x.GovernorTitleId, null, new { @class = "govuk-error-message" })
            @Html.DropDownListFor(x => x.GovernorTitleId, Model.Titles, "", new { id = "governor-title-dropdown", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.GovernorTitleId)), })
        </div>

        var additionalInfo = "";
        if (!EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
        {
            additionalInfo = " (required to save record)";
        }
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.FirstName)">
            @Html.LabelFor(x => x.FirstName, $"First name{additionalInfo}", new {@class = "govuk-label", @for = "governor-first-name-textbox", })
            @Html.ValidationMessageFor(x => x.FirstName, null, new {@class = "govuk-error-message"})
            @Html.TextBoxFor(x => x.FirstName, new {@class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.FirstName)), id = "governor-first-name-textbox", required = "required", })
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.MiddleName)">
            @Html.LabelFor(x => x.MiddleName, new {@class = "govuk-label", @for = "governor-middle-name-textbox"})
            @Html.ValidationMessageFor(x => x.MiddleName, null, new {@class = "govuk-error-message"})
            @Html.TextBoxFor(x => x.MiddleName, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.MiddleName)), id = "governor-middle-name-textbox", })
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.LastName)">
            @Html.LabelFor(x => x.LastName, $"Last name{additionalInfo}", new {@class = "govuk-label", @for = "governor-last-name-textbox"})
            @Html.ValidationMessageFor(x => x.LastName, null, new {@class = "govuk-error-message"})
            @Html.TextBoxFor(x => x.LastName, new {@class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.LastName)), id = "governor-last-name-textbox", required = "required", })
        </div>
    }
}

@helper DisplayDateOfBirth()
{
    if (Model.DisplayPolicy.DOB)
    {
        @Html.EditorFor(x => x.DOB,
            new
            {
                tooltipText = "This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions."
            })
    }
}

@helper DisplayPostcode()
{
    if (Model.DisplayPolicy.PostCode)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PostCode)">
            <label class="govuk-label" for="governor-postcode-textbox">
                Home postcode
                <a id="PostcodeTooltipLink" href="#help-text-postcode" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the postcode field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            @Html.ValidationMessageFor(x => x.PostCode, null, new { @class = "govuk-error-message" })
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-postcode">
                    <h3 class="govuk-heading-s make-modal-header">Home postcode</h3>
                    <p class="govuk-body">
                        This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions.
                    </p>
                </div>
            </div>
            @Html.TextBoxFor(x => x.PostCode, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PostCode)), id = "governor-postcode-textbox" })
        </div>
    }
}

@helper DisplayTelephoneNumber()
{
    if (Model.DisplayPolicy.TelephoneNumber)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.TelephoneNumber)">
            <label class="govuk-label" for="governor-telephone-number-textbox">
                Telephone number
                <a id="TelephoneNumberTooltipLink" href="#help-text-telephonenumber" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the telephone number field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            </label>
            @Html.ValidationMessageFor(x => x.TelephoneNumber, null, new { @class = "govuk-error-message" })
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-telephonenumber">
                    <h3 class="govuk-heading-s make-modal-header">Telephone number</h3>
                    <p class="govuk-body">
                        This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions.
                    </p>
                </div>
            </div>
            @Html.TextBoxFor(x => x.TelephoneNumber, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.TelephoneNumber)), id = "governor-telephone-number-textbox" })
        </div>
    }
}

@helper DisplayEmail()
{
    if (Model.DisplayPolicy.EmailAddress)
    {
        var labelText = "Email address";
        if (Model.GovernorRole.OneOfThese(
            eLookupGovernorRole.ChairOfGovernors,
            eLookupGovernorRole.ChairOfTrustees,
            eLookupGovernorRole.AccountingOfficer,
            eLookupGovernorRole.ChiefFinancialOfficer,
            eLookupGovernorRole.ChairOfLocalGoverningBody
            ))
        {
            labelText += " (required to save record)";
        }

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.EmailAddress)">
            @Html.LabelFor(x => x.EmailAddress, labelText, new { @class = "govuk-label", @for = "governor-email-textbox" })
            @Html.ValidationMessageFor(x => x.EmailAddress, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.EmailAddress, new { @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.EmailAddress)), id = "governor-email-textbox" })
        </div>
    }
}

@helper DisplayAppointmentDates()
{
    var isGovernorRole = false;
    string dateAppointmentEndsTooltipMessage = null;
    if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
    {
        dateAppointmentEndsTooltipMessage = "A governance professional may have a fixed appointment. If this applies, enter the date their fixed appointment is due to end. If there is not a fixed appointment, leave this field blank until their appointment ends and then add the date their appointment ended date.";
        isGovernorRole = true;
    }
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out var disableStartDate))
    {
        disableStartDate = false;
    }
    if (!bool.TryParse(ViewData["reactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }
    var editorPrefix = ViewData["editorPrefix"]?.ToString();

    if (Model.DisplayPolicy.AppointmentStartDate)
    {
        var startDateSaveRecord = isGovernorRole ? "(required to save record)" : "";
        var detail = disableStartDate ? @"(based on current governor's end date)" : $@"{startDateSaveRecord}";
        var title = $"Date of appointment {detail}";
        @Html.EditorFor(x => x.AppointmentStartDate,
            new { title, @readonly = disableStartDate, ClassPrefix = "start-date", editorPrefix })
    }

    if (Model.DisplayPolicy.AppointmentEndDate)
    {
        var titleText = Model.GovernorRole == eLookupGovernorRole.Member
            ? "Date stepped down"
            : isGovernorRole
                ? "Date appointment ended"
                : "Date term ends";

        @Html.EditorFor(x => x.AppointmentEndDate,
            new
            {
                title = titleText,
                tooltipText = dateAppointmentEndsTooltipMessage,
                showReactivationWarning,
            })
    }
}

@helper DisplayAppointingBody()
{
    if (Model.DisplayPolicy.AppointingBodyId)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.AppointingBodyId)">
            @Html.LabelFor(x => x.AppointingBodyId, "Appointing body (required to save record)", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.AppointingBodyId, null, new { @class = "govuk-error-message" })
            @Html.DropDownListFor(x => x.AppointingBodyId, Model.AppointingBodies, "",
                new { id = "governorAppointingBodyInput", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.AppointingBodyId)) })
        </div>
    }
}

@helper DisplayPreviousName()
{
    if (Model.DisplayPolicy.PreviousFullName)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousTitleId)">
            @Html.LabelFor(x => x.PreviousTitleId, new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.PreviousTitleId, null, new { @class = "govuk-error-message" })
            @Html.DropDownListFor(x => x.PreviousTitleId, Model.PreviousTitles, "",
                new { id = "GovernorPreviousNameTitleInput", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.PreviousTitleId)) })
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousFirstName)">
            @Html.LabelFor(x => x.PreviousFirstName, new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.PreviousFirstName, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.PreviousFirstName,
                new { id = "GovernorPreviousNameFirstNameInput", @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousFirstName)) })
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousMiddleName)">
            @Html.LabelFor(x => x.PreviousMiddleName, new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.PreviousMiddleName, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.PreviousMiddleName,
                new { id = "GovernorPreviousNameMiddleNameInput", @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousMiddleName)) })
        </div>

        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousLastName)">
            @Html.LabelFor(x => x.PreviousLastName, new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.PreviousLastName, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.PreviousLastName,
                new { id = "GovernorPreviousNameLastNameInput", @class = string.Concat("govuk-input ", Html.TextBoxValidationClass(x => x.PreviousLastName)) })
        </div>
    }
}

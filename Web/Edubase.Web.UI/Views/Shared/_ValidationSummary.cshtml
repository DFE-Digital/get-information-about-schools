@model ModelStateDictionary
@using System.Text.RegularExpressions
@using Edubase.Web.UI.Helpers

@if (!Model.IsValid)
{
    <div class="govuk-error-summary server-error-summary" aria-labelledby="error-summary-title" data-module="govuk-error-summary" tabindex="-1">
        <h2 id="error-summary-title" class="govuk-error-summary__title">Incorrect or missing details</h2>
        <div class="govuk-error-summary__body">
            <ul class=" govuk-list govuk-error-summary__list">
                @{
                    var validationResult = (FluentValidation.Results.ValidationResult)ViewBag.FVErrors;
                    if (validationResult != null)
                    {
                        // fluentvalidation errors
                        foreach (var modelError in validationResult.Errors)
                        {
                            var key = modelError.PropertyName;
                            var rawMsg = modelError.CustomState?.ToString() ?? modelError.ErrorMessage ?? "";
                            var decoded = System.Net.WebUtility.HtmlDecode(rawMsg);
                            var hasBr = decoded.IndexOf("<br", System.StringComparison.OrdinalIgnoreCase) >= 0;

                            <li>
                                <a id="error-summary-@StringUtils.ElementIdFormat(key)-list-item" href="#@key">
                                    @if (hasBr)
                                    {
                                        @Html.Raw(decoded)  // allow intentional <br />
                                    }
                                    else
                                    {
                                        @Html.HtmlNewlines(decoded) // keeps \n -> <br /> with safe encoding
                                    }
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        // traditional model validation
                        foreach (var modelError in Model.Keys.SelectMany(key => this.Model[key].Errors.Select(x => Tuple.Create(key, x.ErrorMessage))))
                        {
                            var key = modelError.Item1;
                            var href = "#" + key.Replace(".", "_").Replace("[", "_").Replace("]", "_");
                            var rawMsg = modelError.Item2 ?? "";
                            var decoded = System.Net.WebUtility.HtmlDecode(rawMsg);
                            var hasBr = decoded.IndexOf("<br", System.StringComparison.OrdinalIgnoreCase) >= 0;

                            <li>
                                <a id="error-summary-@StringUtils.ElementIdFormat(key)-list-item" href='@href'>
                                    @if (hasBr)
                                    {
                                        @Html.Raw(decoded)  // allow intentional <br />
                                    }
                                    else
                                    {
                                        @Html.HtmlNewlines(decoded) // keeps \n -> <br /> with safe encoding
                                    }
                                </a>
                            </li>
                        }
                    }
                }
            </ul>
        </div>
    </div>
}

@model FaqItemViewModel
@{
    ViewBag.Title = string.Concat(!ViewData.ModelState.IsValid ? "Error: " : string.Empty, "GIAS: FAQ");
}

<div class="breadcrumbs">
    <ol>
        <li>
            @Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)
        </li>
        <li>
            <a href="/help">Help</a>
        </li>
        <li>
            @Html.RouteLink("FAQs", "Faq")
        </li>
    </ol>
</div>

@Html.Partial("_ValidationSummary", ViewData.ModelState)

<h1 class="heading-xlarge">@(Model.Id == null ? "Create" : "Edit") FAQ entry</h1>

<div class="grid-row">
    <div class="column-two-thirds">

        @using (Html.BeginRouteForm(Model.Id == null ? "PostCreateFaqItem" : "PostEditFaqItem", new { Model.Id }, FormMethod.Post))
        {
            @Html.HiddenFor(x => x.Id)
            <div class="form-group @Html.ValidationCssClassFor(x => x.Title)">
                @Html.LabelFor(x => x.Title)
                @Html.ValidationMessageFor(x => x.Title)
                @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
            </div>

            <div class="form-group @Html.ValidationCssClassFor(x => x.TitleFontSize)">
                @Html.LabelFor(x => x.TitleFontSize)
                @Html.ValidationMessageFor(x => x.TitleFontSize)
                @Html.DropDownListFor(x => x.TitleFontSize, new[] { new SelectListItem { Text = "Small", Value = "small" }, new SelectListItem { Text = "Medium", Value = "medium" }, new SelectListItem { Text = "Large", Value = "large" }, }, new { @class = "form-control" })
            </div>

            <div class="form-group @Html.ValidationCssClassFor(x => x.Content)">
                @Html.LabelFor(x => x.Content)
                @Html.ValidationMessageFor(x => x.Content)
                @Html.TextAreaFor(x => x.Content, 10, 40, new { @class = "form-control entry-content" })
            </div>

            <div class="form-group @Html.ValidationCssClassFor(x => x.DisplayOrder)">
                @Html.LabelFor(x => x.DisplayOrder)
                @Html.ValidationMessageFor(x => x.DisplayOrder)
                @Html.TextBoxFor(x => x.DisplayOrder, new { @class = "form-control" })
            </div>

            <button type="submit" class="button">Save entry</button>
            if (Model.Id != null)
            {
                <button type="submit" class="button button-secondary" name="@nameof(Model.IsDeleting)" id="delete-button" value="true">Delete</button>
            }
            @Html.RouteLink("Cancel", "Faq", null, new { @class = "button button-secondary" })
        }

    </div>
</div>


@section ViewScripts
{
    <script>
        (function () {
            var okDelete = false;
            $('.entry-content').textCount({ maxLength: 1000 });

            $('#delete-button').okCancel({
                ok: function () {
                    $('#delete-button').data().okCancel.unbind();
                    $('#delete-button').click();
                },
                cancel: function() {
                    this.closeModal();
                },
                title: 'Are you sure you want to delete this FAQ entry?',
                content: 'The entry will be removed from the FAQ immediately',
                triggerEvent: 'click'
            });
        }());

    </script>
}

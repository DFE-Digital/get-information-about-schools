@using System.Linq
@using ViewModel = Edubase.Web.UI.Models.EditEstablishmentModel
@using System.Linq.Expressions
@model ViewModel
@{
    if (Model.ChangesSummary == null)
    {
        Layout = "_EditLayoutPage.cshtml";
    }
}
@using (Html.BeginForm())
{
    <div class="tab-content">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Urn)
        @Html.HiddenFor(x => x.Name)
        @Html.HiddenFor(x => x.SelectedTab)

        <div class="" style="display:@Html.Conditional(Model.ChangesSummary != null, "none");">
        
            <div class="column-half">

                <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveLocation">Save</button>
                @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })

                <div class="form-group first" style="height:0;"></div>

                @if (Model.EditPolicy.RSCRegionId)
                {
                    <div class="form-group">
                        <label for="RSCRegionId" class="form-label" title="Regional School Comissioner">
                            <abbr title="Regional Schools Commissioner">RSC</abbr> region
                        </label>
                        @Html.DropDownListFor(x => x.RSCRegionId, Model.RSCRegions, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.GovernmentOfficeRegionId)
                {
                    <div class="form-group">
                        <label for="GovernmentOfficeRegionId" class="form-label">Government office region</label>
                        @Html.DropDownListFor(x => x.GovernmentOfficeRegionId, Model.GovernmentOfficeRegions, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.AdministrativeDistrictId)
                {
                    <div class="form-group">
                        <label for="AdministrativeDistrictId" class="form-label">District</label>
                        @Html.DropDownListFor(x => x.AdministrativeDistrictId, Model.AdministrativeDistricts, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.AdministrativeWardId)
                {
                    <div class="form-group">
                        <label for="AdministrativeWardId" class="form-label">Ward</label>
                        @Html.DropDownListFor(x => x.AdministrativeWardId, Model.AdministrativeWards, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.ParliamentaryConstituencyId)
                {
                    <div class="form-group">
                        <label for="ParliamentaryConstituencyId" class="form-label">Parliamentary constituency</label>
                        @Html.DropDownListFor(x => x.ParliamentaryConstituencyId, Model.ParliamentaryConstituencies, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.UrbanRuralId)
                {
                    <div class="form-group">
                        <label for="UrbanRuralId" class="form-label">Urban/rural description</label>
                        @Html.DropDownListFor(x => x.UrbanRuralId, Model.UrbanRuralLookup, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.GSSLAId)
                {
                    <div class="form-group">
                        <label for="GSSLAId" class="form-label"><abbr title="Government Statistical Service">GSS</abbr> LA code</label>
                        @Html.DropDownListFor(x => x.GSSLAId, Model.GSSLALookup, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.Easting)
                {
                    <div class="form-group">
                        <label for="Easting">Easting</label>
                        @Html.TextBoxFor(x => x.Easting, new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.Northing)
                {
                    <div class="form-group">
                        <label for="Northing">Northing</label>
                        @Html.TextBoxFor(x => x.Northing, new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.CASWardId)
                {
                    <div class="form-group">
                        <label for="CASWardId" class="form-label">Census ward</label>
                        @Html.DropDownListFor(x => x.CASWardId, Model.CASWards, "", new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.MSOAId)
                {
                    <div class="form-group @Html.ValidationCssClassFor(x => x.MSOACode)">
                        <label for="msoa">
                            Middle Super Output Area (MSOA)
                        </label>
                        @Html.ValidationMessageFor(x => x.MSOACode)
                        @Html.TextBoxFor(x => x.MSOACode, new { @class = "form-control" })
                    </div>
                }

                @if (Model.EditPolicy.LSOAId)
                {
                    <div class="form-group @Html.ValidationCssClassFor(x => x.LSOACode)">
                        <label for="lsoa">
                            Lower Super Output Area (LSOA)
                        </label>
                        @Html.ValidationMessageFor(x => x.LSOACode)
                        @Html.TextBoxFor(x => x.LSOACode, new { @class = "form-control" })
                    </div>
                }

                <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveLocation">Save</button>
                @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })


            </div>
        </div>

        @if (Model.ChangesSummary != null)
        {
            Html.RenderPartial("Partials/_ConfirmChanges");

            <div class="button-row">
                <button class="button-grey button mobile-full-width" name="action" type="submit" value="@ViewModel.eAction.CancelChanges">&laquo; Back</button>
                <button type="submit" name="action" value="@ViewModel.eAction.Confirm" class="button mobile-full-width">Confirm</button>

                @Html.ActionLink("Cancel", "Details", "Establishment", new {id = Model.Urn}, new {@class = "button button-grey mobile-full-width", id = "cancel-edit"})
            </div> 
            
            @section ViewScripts {
    
                <script>
                    $('#cancel-edit, .requires-conf-to-leave').okCancel({
                        ok: function() {
                            window.location = this.el.getAttribute('href');
                        },
                        title: 'Are you sure you want to leave this page?',
                        content: 'Any unsaved changes will be lost',
                        triggerEvent: 'click'
                    });
                </script>

            }           
        }
        else
        {
@section ViewScripts
{
    <script>
        var $fields = $('#content').find('.form-control');
        var exitAttached = false;
       
        $fields.on('change', function () {
            if (!exitAttached) {
                DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                exitAttached = true;
            }

        });

    </script>
}
        }
    
    </div>
}
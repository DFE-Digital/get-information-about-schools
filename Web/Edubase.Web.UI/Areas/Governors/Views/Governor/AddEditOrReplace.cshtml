@using Edubase.Services.Enums
@using Edubase.Common;
@using Edubase.Common.Text;
@using VM = Edubase.Web.UI.Areas.Governors.Models.CreateEditGovernorViewModel;
@using System.Linq.Expressions

@model VM
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.SelectedTab = "EditGovernance";
    Layout = Model.Layout;
}

<div class="column-half">

    @using (Html.BeginRouteForm(Model.FormPostRouteName, FormMethod.Post, new {id = "governorEdit"}))
    {

        <h2 class="heading-medium tab-lead">
            @(Model.Mode == CreateEditGovernorViewModel.EditMode.Edit ? "Edit" : "")
            @(Model.Mode == CreateEditGovernorViewModel.EditMode.Create ? "Add" : "")
            @(Model.Mode == CreateEditGovernorViewModel.EditMode.Replace ? "Replace" : "")

            @Model.GovernorRoleName.ToLower()
        </h2>

        @Html.HiddenFor(x => x.GovernorRole)
        @Html.HiddenFor(x => x.GovernorRoleName)
        @Html.HiddenFor(x => x.GID)
        @Html.HiddenFor(x => x.EstablishmentUrn)
        @Html.HiddenFor(x => x.GroupUId)
        @Html.HiddenFor(x => x.SelectedTabName)
        @Html.HiddenFor(x => x.GroupName)
        @Html.HiddenFor(x => x.GroupTypeId)
        @Html.HiddenFor(x => x.ListOfEstablishmentsPluralName)
        @Html.HiddenFor(x => x.IsHistoric)
        @Html.HiddenFor(x => x.Mode)
        @Html.HiddenFor(x => x.SelectedPreviousGovernorId)

        @Html.HiddenFor(x => x.ReplaceGovernorViewModel.GID)
        @Html.HiddenFor(x => x.ReplaceGovernorViewModel.Name)

        if (Model.ReplaceGovernorViewModel.GID.HasValue)
        {
            <h3 class="heading-small">@Model.ReplaceGovernorViewModel.Name</h3>
            <div class="date-group-wrap">
                @Html.EditorFor(x => x.ReplaceGovernorViewModel.AppointmentEndDate, new { title = "Date term ends (required to save record)" })
            </div>

            if (Model.AllowReinstateAsGovernor)
            {
                <div class="multiple-choice">
                    @Html.CheckBoxFor(x => x.ReinstateAsGovernor, new { id = nameof(Model.ReinstateAsGovernor) })
                    @Html.LabelFor(x => x.ReinstateAsGovernor, Model.ReinstateAsGovernorCheckboxLabel, new { @for = nameof(Model.ReinstateAsGovernor) })
                </div>
            }
        }

        <h2 class="heading-medium">@(Model.ReplaceGovernorViewModel.GID.HasValue ? string.Concat("New ", Model.GovernorRoleName).ToSentenceCase() : Model.GovernorRoleName)</h2>

        if (Model.ExistingGovernors.Any())
        {
            <div class="form-group js-when-on">
                @Html.LabelFor(x => x.SelectedPreviousGovernorId, Model.SelectPreviousGovernorLabel)
                @Html.DropDownListFor(x => x.SelectedPreviousGovernorId, Model.ExistingGovernors, "New", new { @class = "form-control choose-governor" })
            </div>
            <br />
        }

        @Html.EditorFor(m => m, new { disableStartDate = Model.ReplaceGovernorViewModel.GID.HasValue, reactivationWarning = (Model.Mode == CreateEditGovernorViewModel.EditMode.Edit && Model.AppointmentEndDate.ToDateTime().HasValue && Model.AppointmentEndDate.ToDateTime().Value < DateTime.Now.Date) })

        <div class="button-row">
            @Buttons()
        </div>
    }
</div>

@helper Buttons()
{
    <button id="save-button" type="submit" name="action" class="button" value="">
        @if (Model.ReplaceGovernorViewModel.GID.HasValue)
        {
            <text>Save person</text>
        }
        else if (Model.GID.HasValue)
        {
            <text>Save person</text>
        }
        else
        {
            <text>Add person</text>
        }
    </button>
    @Html.ActionLink("Cancel", "Edit", "Governor", new { area = "Governors", groupUId = Model.GroupUId, establishmentUrn = Model.EstablishmentUrn }, new { @class = "button button-secondary" })
}

@section ViewScripts
{
    <script nonce="4CC30YJLSMKGDS6G">
        (function () {
            $("#governorEdit").submit(function() {
                $("#save-button").attr("disabled", true);
                return true;
            });

            var $fields = $('#content').find('.form-control').not(".choose-governor");
            var exitAttached = false;

            var unloadWarning = null;
            $fields.on('change', function () {
                if (!exitAttached) {
                    unloadWarning = DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                    exitAttached = true;
                }

            });

            var $day = $('#ReplaceGovernorViewModel_AppointmentEndDate_Day');
            var $month = $('#ReplaceGovernorViewModel_AppointmentEndDate_Month');
            var $year = $('#ReplaceGovernorViewModel_AppointmentEndDate_Year');

            function checkAndUpdateDate() {
                if (Number($day.val()) > 0 && Number($month.val()) > 0 && Number($year.val()) > 0) {
                    var date = new Date($year.val(), $month.val() - 1, $day.val(), 0, 0, 0, 0);
                    date.setDate(date.getDate() + 1);
                    $('#AppointmentStartDate_Day').val(date.getDate());
                    $('#AppointmentStartDate_Month').val(date.getMonth() + 1);
                    $('#AppointmentStartDate_Year').val(date.getFullYear());
                }
            }

            $day.blur(checkAndUpdateDate);
            $month.blur(checkAndUpdateDate);
            $year.blur(checkAndUpdateDate);

            checkAndUpdateDate();

            if (document.getElementById('IsHistoric') && document.getElementById('IsHistoric').value === 'True') {
                $('.warning-message').addClass('hidden');
                var $endDateFields = $('#AppointmentEndDate_Day, #AppointmentEndDate_Month, #AppointmentEndDate_Year');
                var warningShown = false;

                $endDateFields.on('change', function (e) {
                    if (!warningShown) {
                        $('.warning-message').removeClass('hidden');
                        $endDateFields.off('change');
                    }
                });
            }

            $(".choose-governor").on("change", function () {

                if (unloadWarning) unloadWarning.suppress();

                var queryParameters = {}, queryString = location.search.substring(1),
                    re = /([^&=]+)=([^&]*)/g, m;

                while (m = re.exec(queryString)) {
                    queryParameters[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
                }
                queryParameters['gid2'] = $(this).val();
                queryParameters['d'] = $("#ReplaceGovernorViewModel_AppointmentEndDate_Day").val();
                queryParameters['m'] = $("#ReplaceGovernorViewModel_AppointmentEndDate_Month").val();
                queryParameters['y'] = $("#ReplaceGovernorViewModel_AppointmentEndDate_Year").val();
                queryParameters['rag'] = $("#ReinstateAsGovernor").prop("checked");

                location.search = $.param(queryParameters);

            });

        }());
</script>
}

@using System.Globalization
@using Edubase.Common
@using Edubase.Data.Entity
@using Edubase.Web.UI.Models.Notifications
@model Edubase.Web.UI.Models.Notifications.NotificationsBannerViewModel
@{
    ViewBag.Title = "Get Information about Schools";
    ViewBag.SiteSection = "tools";
}

@section BreadCrumbs
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="govuk-breadcrumbs">
                <ol class="govuk-breadcrumbs__list">
                    <li class="govuk-breadcrumbs__list-item">
                        @Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })
                    </li>
                    <li class="govuk-breadcrumbs__list-item">
                        @Html.ActionLink("Tools", "Index", "Tools", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })
                    </li>
                    <li class="govuk-breadcrumbs__list-item">
                        @Html.ActionLink("Notifications", "Index", "Notifications", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })
                    </li>
                </ol>
            </div>
        </div>
    </div>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        @Html.Partial("_ValidationSummary", ViewData.ModelState)
        <h1 class="govuk-heading-xl">Manage visibility of notification banners</h1>
    </div>
</div>

@using (Html.BeginRouteForm(Model.Id == null ? "PostCreateBanner" : "PostEditBanner", new { Model.Id }, FormMethod.Post))
{
<div class="button-row govuk-!-margin-bottom-4">
    @if (Model.Action == eNotificationBannerAction.Start)
    {
        if (Model.Counter == 0)
        {
            @Html.ActionLink(
                "Back",
                "AuditBanners",
                "Notifications",
                null,
                new { @class = "govuk-back-link gias-back-link--button", data_module = "govuk-button" })
        }
        else
        {
            @Html.ActionLink(
                "Back",
                "Banners",
                "Notifications",
                null,
                new { @class = "govuk-back-link gias-back-link--button", data_module = "govuk-button" })
        }
    }
    else
    {
        <button type="submit" class="govuk-back-link gias-back-link--button" name="@nameof(Model.GoBack)" value="true">
            Back
        </button>
    }
</div>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Counter)
            @Html.HiddenFor(x => x.Action)
            @Html.HiddenFor(x => x.TotalBanners)
            @Html.HiddenFor(x => x.TotalLiveBanners)
            @Html.HiddenFor(x => x.StartOriginal)

            <div class="govuk-grid-row">
                <div class="govuk-grid-column-full">
                    <span class="govuk-caption-m">@(Model.Id == null ? "Add " : "Edit ") notification banner @Html.Conditional(Model.Counter > 0, Model.Counter.ToString())</span>
                </div>
            </div>

            @if (Model.Action == eNotificationBannerAction.Start)
            {
                <div class="govuk-warning-text">
                    <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                    <strong class="govuk-warning-text__text">
                        <span class="govuk-warning-text__assistive">Warning</span>

                        @if (!string.IsNullOrEmpty(Model.Id))
                        {
                            var currentBanner = Model.ToBanner();
                            if (currentBanner.Status == eNotificationBannerStatus.Live)
                            {
                                <span>This notification banner is already being shown. Any changes will take immediate effect.</span>
                            }
                            else if (currentBanner.Status == eNotificationBannerStatus.Future)
                            {
                                <span>This notification banner is scheduled to be shown in the future.</span>
                            }
                            else
                            {
                                <span>This notification banner has expired.</span>
                            }
                        }
                        else
                        {
                            if (Model.TotalLiveBanners > 0)
                            {
                                <span>There is already a notification banner showing. Only show an additional notification banner if absolutely necessary.</span>
                            }
                            else if (Model.TotalBanners > 0)
                            {
                                <span>There is already a notification banner saved however it is currently not being shown. Only show a notification banner if absolutely necessary.</span>
                            }
                            else
                            {
                                <span>Only show a notification banner if absolutely necessary.</span>
                            }
                        }

                    </strong>
                </div>
            }

            @if (Model.Action == eNotificationBannerAction.TypeChoice)
            {
                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">Message and alert level</h2>
                    </div>
                </div>

                if (string.IsNullOrEmpty(Model.Id))
                {
                    <h3 class="govuk-heading-s">Notification banner message (template or custom)</h3>
                    <div class="govuk-form-group">
                        <div class="govuk-radios">
                            <div class="govuk-radios__item">
                                @Html.GiasRadioFor(x => x.TemplateSelected, "", Model.Id == null ? "Other (write custom message)" : Model.Content, null, new { @checked = "checked", id = "customcontent", @class = "govuk-radios__input panel-trigger" })
                            </div>
                            @foreach (var template in Model.Templates)
                            {
                                <div class="govuk-radios__item">
                                    @Html.GiasRadioFor(x => x.TemplateSelected, template.RowKey, template.Content, null, new { id = "customtemplate-" + template.RowKey, @class = "govuk-radios__input panel-trigger" })
                                </div>
                            }
                        </div>
                    </div>
                }

                <h3 class="govuk-heading-s">Notification banner alert level</h3>
                <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Importance)">
                    @Html.ValidationMessageFor(x => x.Importance, null, new { @class = "govuk-error-message" })

                    <div class="govuk-radios">
                        @foreach (eNotificationBannerImportance importance in Enum.GetValues(typeof(eNotificationBannerImportance)))
                        {
                            <div class="govuk-radios__item">
                                @Html.GiasRadioFor(x => x.Importance, importance, importance.EnumDisplayDescriptionFor(), null, new { id = "importance-" + (int)importance, @class = "govuk-radios__input panel-trigger" })
                            </div>
                        }
                    </div>

                </div>
            }
            else
            {
                @Html.HiddenFor(x => x.Importance)
            }

            @if (Model.Action == eNotificationBannerAction.Message)
            {
                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">Message</h2>
                    </div>
                </div>

                <p>Keep the message clear, concise and user focused. The maximum number of characters permitted is 500. This includes spaces.</p>
                <details class="govuk-details govuk-!-margin-bottom-4" data-module="govuk-details">
                    <summary class="govuk-details__summary">
                        <span class="govuk-details__summary-text">
                            Guidance for writing public messages involving time
                        </span>
                    </summary>
                    <div class="govuk-details__text">
                        <ul class="govuk-list govuk-list--bullet">
                            <li>use 'to' in time ranges, not hyphens: 10am to 11am (not 10-11am)</li>
                            <li>5:30pm (not 1730hrs)</li>
                            <li>midnight (not 00:00)</li>
                            <li>midday (not 12 noon, noon or 12pm)</li>
                            <li>6 hours 30 minutes</li>
                        </ul>
                        <p>Midnight is the first minute of the day, not the last. You should consider using '11:59pm' to avoid confusion about a single, specific time.</p>
                        <p>For example, "System will be back up by 11:59pm on Tuesday 14 June." can only be read one way, but "System will be back up by midnight on Tuesday 14 June." can be read two ways (the end of Monday 13, or end of Tuesday 14).</p>
                    </div>
                </details>
                <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Content)">
                    @Html.ValidationMessageFor(x => x.Content, null, new { @class = "govuk-error-message" })
                    @Html.TextAreaFor(x => x.Content, new { @class = "govuk-textarea entry-content", rows = "6", cols = "40", maxlength = "500" })
                </div>
            }
            else
            {
                @Html.HiddenFor(x => x.Content)
            }

            @if (Model.Action == eNotificationBannerAction.Schedule)
            {
                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">Schedule notification banner visibility</h2>
                    </div>
                </div>

                <p>Choose the start date and start time and the end date and end time for the notification banner to be visible on the site.</p>

                <div class="govuk-form-group">
                    @Html.EditorFor(x => x.Start, "DateTimeViewModelExtended", new { title = "Start date and start time", fieldsetClassName = "edit-date-fieldset", dateHint = $"{DateTime.Now:dd MM yyyy} 14:30", dateHintAdditional = "The time will be UK local time, taking into account daylight savings" })
                </div>

                <div class="govuk-form-group">
                    @Html.EditorFor(x => x.End, "DateTimeViewModelExtended", new { title = "End date and end time", fieldsetClassName = "edit-date-fieldset", dateHint = $"{DateTime.Now.AddDays(5):dd MM yyyy} 17:00", dateHintAdditional = "The time will be UK local time, taking into account daylight savings" })
                </div>
            }
            else
            {
                @Html.HiddenFor(x => x.Start.Day)
                @Html.HiddenFor(x => x.Start.Month)
                @Html.HiddenFor(x => x.Start.Year)
                @Html.HiddenFor(x => x.Start.Hour)
                @Html.HiddenFor(x => x.Start.Minute)
                @Html.HiddenFor(x => x.End.Day)
                @Html.HiddenFor(x => x.End.Month)
                @Html.HiddenFor(x => x.End.Year)
                @Html.HiddenFor(x => x.End.Hour)
                @Html.HiddenFor(x => x.End.Minute)
            }
        </div>


        @if (Model.Action == eNotificationBannerAction.Review)
        {
            var reviewBanner = Model.ToBanner();
            <div class="govuk-grid-column-two-thirds">
                <h2 class="govuk-heading-m">Check all details are correct before saving</h2>
            </div>
            <div class="govuk-grid-column-full">
                @{
                    Html.RenderPartial("_NotificationBannerPartial", reviewBanner, new ViewDataDictionary(this.ViewData) { { "bannerPreview", true } });
                }
            </div>
            <div class="govuk-grid-column-full">
                <dl class="govuk-summary-list govuk-!-margin-top-4">
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">Status:</dt>
                        <dd class="govuk-summary-list__value">@(reviewBanner.Status.EnumDisplayNameFor())</dd>
                    </div>
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">Visibility start:</dt>
                        <dd class="govuk-summary-list__value">@reviewBanner.Start.ToString("h:mmtt", CultureInfo.InvariantCulture).ToLower() <span class="govuk-!-margin-right-2"></span> @reviewBanner.Start.ToString("d MMMM yyyy", CultureInfo.InvariantCulture)</dd>
                    </div>
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">Visibility end:</dt>
                        <dd class="govuk-summary-list__value">@reviewBanner.End.ToString("h:mmtt", CultureInfo.InvariantCulture).ToLower() <span class="govuk-!-margin-right-2"></span> @reviewBanner.End.ToString("d MMMM yyyy", CultureInfo.InvariantCulture)</dd>
                    </div>
                </dl>
            </div>
        }
    </div>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="button-row govuk-!-padding-top-6">
                <button type="submit" class="govuk-button">@(Model.Action == eNotificationBannerAction.Review ? "Accept and save" : "Continue")</button>
            </div>
        </div>
    </div>
}



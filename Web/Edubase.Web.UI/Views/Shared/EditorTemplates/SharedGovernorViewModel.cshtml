@using System.Runtime.ExceptionServices
@model Edubase.Web.UI.Areas.Governors.Models.SharedGovernorViewModel
@{
    bool disableStartDate;
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out disableStartDate))
    {
        disableStartDate = false;
    }
}

<li>
    <div class="expander-panel @(Model.Selected ? "open-expander" : "")">
        <div class="form-group gov-radio-wrap">
            @if (Model.MultiSelect)
            {
                <div class="multiple-choice">
                    @Html.CheckBoxFor(x => x.Selected, GetCheckboxAttributes(Model.PreExisting, "panel-trigger", @Html.NameFor(x => x.Selected), "#expand-" + Model.Id))
                    <label for="@Html.NameFor(x => x.Selected)">@Model.FullName</label>
                </div>
            }
            else
            {
                <div class="multiple-choice">
                    @Html.RadioButton("SelectedGovernorId", Model.Id, Model.Selected,
                        new { Name = "SelectedGovernorId", @class = "panel-trigger", @id = "gov-" + Model.Id, data_toggle_panel = "#expand-" + Model.Id })
                    <label for="gov-@Model.Id">@Model.FullName</label>
                </div>
            }
        </div>


        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.PostCode)
        @Html.HiddenFor(x => x.AppointingBodyName)
        @Html.HiddenFor(x => x.DOB)
        @Html.HiddenFor(x => x.FullName)
        <div class="shared-governor @(Model.PreExisting ? "remove-border": "")">
            @if (Model.PreExisting)
            {
                <p class="bold-xsmall">Already shared with this establishment</p>
            }
            <dl class="key-value-list">
                @if (Model.SharedWith.Any())
                {
                    <dt>Shared with:</dt>
                    <dd>
                        @foreach (var establishment in Model.SharedWith)
                        {
                            <div>
                                @establishment.EstablishmentName, <abbr title="Unique Reference Number">URN</abbr>: @establishment.Urn
                            </div>
                        }
                    </dd>
                }
                <dt>Postcode:</dt>
                <dd>@Model.PostCode</dd>
            </dl>
            @if (!Model.PreExisting)
            {
        <div id="expand-@Model.Id">
            <dl class="key-value-list">
                <dt><abbr title="Governor ID number">GID</abbr>:</dt>
                <dd>@Model.Id</dd>
                <dt>Appointed by:</dt>
                <dd>@Model.AppointingBodyName</dd>
                <dt>Date of birth:</dt>
                <dd>@(Model.DOB?.ToString("dd/MM/yyyy"))</dd>
            </dl>

            <div class="@Html.ValidationCssClass("StartDate,endDate")" id="StartDate,endDate">
                @if (Html.ValidationCssClass("StartDate,endDate").ToString() == "error")
                {
                <span class="field-validation-error">
                    @Html.ViewData.ModelState["StartDate,endDate"].Errors.First().ErrorMessage
                </span>
                }

                @Html.EditorFor(x => x.AppointmentStartDate, new { @readonly = Model.PreExisting || disableStartDate, ClassPrefix = "start-date" })
                @Html.EditorFor(x => x.AppointmentEndDate, new { @readonly = Model.PreExisting })
            </div>
        </div>
            }
            else
            {
                <div class="hidden">
                    @Html.EditorFor(x => x.AppointmentStartDate)
                    @Html.EditorFor(x => x.AppointmentEndDate)
                </div>
            }

        </div>
    </div>
</li>

@functions
{
    object GetCheckboxAttributes(bool readOnly, string cssClasses, HtmlString elemId, string toggleTarget = "")
    {
        if (readOnly)
            return new { @class = cssClasses, @disabled = "disabled" , @id = elemId, data_toggle_panel= toggleTarget};

        return new { @class = cssClasses, @id = elemId, data_toggle_panel = toggleTarget };
    }
}

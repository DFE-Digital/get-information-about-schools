@model Edubase.Web.UI.Models.CreateEditTrustModel
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.Title = "Create/edit academy trust";

    var dc = new Edubase.Data.Entity.ApplicationDbContext();
}

@helper FormHint(string controlId, string hintText = "help with this field. <br>and more help - even more help could go here...")
{
    <a class="help-icon" tab-index="0">?</a>
    <div class="help-text" id="help-@controlId">
        <p>Here is some thext that would assist a user with filling in the associated field:</p>
        <p>
            Lorem ipsum dolor sit amet, reque mollis ponderum vis et, no reprimique efficiantur accommodare
            nec. Nec ad deleniti percipitur. Salutandi erroribus sea ex. At vidisse honestatis
        </p>
    </div>

}

@using (Html.BeginForm((Model.GroupUID == null ? "Create" : "Edit"), "Trust", FormMethod.Post))
{ 
    @Html.HiddenFor(x => x.GroupUID)
    <div class="grid-row">
        <div class="column-full">
            @Html.ActionLink("Search for an Academy Trust", "Index", "Search", null, new { @class = "home-link" })
            
            

            @if (Model.GroupUID == null)
            {
                <button type="submit" class="button header-submit" style="margin-top:80px;" name="action" value="save">Submit</button>
                <h1 class="heading-xlarge">Create a new Academy Trust</h1>
            }
            else
            {
                
                <div class="header-submit">
                    @Html.ActionLink("Cancel", "Details", "Trust", new { id = Model.GroupUID }, new { @class = "button button-grey", style= "margin-top:80px;" })
                    <button type="submit" class="button" style="margin-top:80px;" name="action" value="save">Submit</button>
                </div>
                

                <h1 class="heading-xlarge">Edit Academy Trust</h1>
            }


            

            @Html.ValidationSummary(null, new { @class = "error-summary" })

            <table class="borderless editor">
                <colgroup>
                    <col style="width:40%" />
                    <col style="width:60%" />
                </colgroup>
                <caption class="visually-hidden">School information</caption>
                <tr>
                    <th scope="row">
                        <label for="school-name">Trust name</label>
                        @FormHint("name")
                    </th>
                    <td>
                        <div class="form-group @Html.ValidationCssClassFor(x=>x.Name)">
                            
                            @Html.EduTextBoxFor(x => x.Name, new { maxlength = 120, id = "name", @class = "form-control", aria_describedby = "help-name" })
                        </div>
                    </td>
                </tr>

                <tr>
                    <th scope="row">
                        <label for="school-type">Trust type</label>
                        @FormHint("trust-type")
                    </th>
                    <td>
                        <div class="form-group @Html.ValidationCssClassFor(x=>x.TypeId)">
                            @Html.EduDropDownFor(x => x.TypeId, dc.GroupTypes.Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }), 
                                new { id = "la", @class = "form-control" })
                        </div>
                    </td>
                </tr>


                <tr>
                    <th scope="row">
                        <label for="school-type">Open date</label>
                        @FormHint("open-date")
                    </th>
                    <td>
                        <div class="form-group @Html.ValidationCssClassFor(x=>x.OpenDate)">
                            @Html.ValidationMessageFor(x=>x.OpenDate)
                            @Html.DropDownListFor(x => x.OpenDate.Day,
                                Enumerable.Range(1, 31).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "DD",
                                new { id = "opendate-day", @class = "form-control", aria_describedby = "help-opendate-day",
                                    style = "width:70px;" })

                            @Html.DropDownListFor(x => x.OpenDate.Month,
                                Enumerable.Range(1, 12).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "MM",
                                new { id = "opendate-month", @class = "form-control", aria_describedby = "help-opendate-month",
                                    style = "width:70px;" })

                            @Html.DropDownListFor(x => x.OpenDate.Year,
                                Enumerable.Range(1900, 2050).Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() }), "YYYY",
                                new { id = "opendate-year", @class = "form-control", aria_describedby = "help-opendate-year",
                                    style = "width:70px;" })
                        </div>
                    </td>
                </tr>


                <tr>
                    <th scope="row">
                        <label for="school-name">Companies house number</label>
                        @FormHint("companieshousenumber")
                    </th>
                    <td>
                        <div class="form-group @Html.ValidationCssClassFor(x=>x.CompaniesHouseNumber)">

                            @Html.EduTextBoxFor(x => x.CompaniesHouseNumber, new { maxlength = 120, id = "companieshousenumber", @class = "form-control", aria_describedby = "help-companieshousenumber" })
                        </div>
                    </td>
                </tr>

            </table>

        </div>
        
    </div>
    if (Model.GroupUID.HasValue)
    {
        <div class="grid-row">
            <div class="column-half">
                <br /><br />
                <span class="bold-xsmall">Add establishment to this Academy Trust</span>
                <p style="margin-bottom:8px;" class="font-xsmall">Enter the establishment URN</p>
                <div style="white-space:nowrap;" class="form-group">
                    @Html.TextBoxFor(x => x.SearchURN, new { @class = "form-control form-control-1-2 search-box" })
                    <input type="submit" name="action" value="Search" class="button button-next" autocomplete="off" />
                </div>
                @if (Model.EstablishmentName != null)
                {
                    <p class="bold-xsmall">Establishment found</p>
                    <table class="borderless" style="width:100%;max-width:305px;">
                        <tr>
                            <td style="width:90%;">
                                @Model.EstablishmentName
                            </td>
                            <td style="width:5%;">
                                <input type="submit" name="action" value="Add" class="button" style="float:right; position:relative; top:-7px;" />
                                @Html.HiddenFor(x => x.EstablishmentUrn)
                            </td>
                        </tr>
                    </table>
                }
                @if (Model.EstablishmentNotFound)
                {
                    <p class="bold-xsmall">Establishment not found</p>
                }
            </div>
        </div>
    }
    <div class="grid-row">
        <div class="column-two-thirds">

            @if (Model.Establishments.Count > 0)
            {
                <hr />
                <h2 class="heading-large" style="margin-top:18px;">List of establisments (@Model.Establishments.Count)</h2>
            }

            @Html.HiddenFor(x => x.EstabUrnToRemove)
            <ul class="school-results-listing">
                
                @for (int i = 0; i < Model.Establishments.Count; i++)
                {
                    <li>
                        <input type="submit" class="button button-grey" name="action" style="background-color:#e6e6e6;float:right;" value="Remove" onclick="$('#EstabUrnToRemove').val(@Model.Establishments[i].Urn);" />
                        <h2>@Html.ActionLink(Model.Establishments[i].Name, "Details", "Schools", new { id = Model.Establishments[i].Urn }, new { @class = "bold-small", target = "_blank" })</h2>
                        <dl>
                            <dt>Address:</dt>
                            <dd>@Model.Establishments[i].Address</dd>
                            <dt>URN:</dt>
                            <dd>@Model.Establishments[i].Urn</dd>
                            <dt>School type:</dt>
                            <dd>@Model.Establishments[i].Type</dd>
                            <dt>Headteacher name:</dt>
                            <dd>@Model.Establishments[i].HeadteacherName</dd>
                        </dl>
                    </li>
                    @Html.HiddenFor(x => x.Establishments[i].Name)
                    @Html.HiddenFor(x => x.Establishments[i].Urn)
                    @Html.HiddenFor(x => x.Establishments[i].Address)
                    @Html.HiddenFor(x => x.Establishments[i].Type)
                    @Html.HiddenFor(x => x.Establishments[i].HeadteacherName)
                }
            </ul>
        </div>
    </div>
    <div class="grid-row">
        <div class="column-full">
            <div class="submit-cancel-panel">
                <button type="submit" class="button submit" name="action" value="save">Submit</button>
                @if (Model.GroupUID.HasValue)
                {
                    @Html.ActionLink("Cancel", "Details", "Trust", new { id = Model.GroupUID }, new { @class = "button button-grey cancel" })
                }
            </div>
        </div>
    </div>
}

@model DateTimeViewModel
@{
    var cssClassPrefix = "";
    string showBinding = null;
    string messageBinding = null;
    string classBinding = null;
    var labelClassName = "";
    var fieldsetClassName = "";
    var dateHint = "";
    const string hintSpacer = "<span class='govuk-!-margin-right-2'></span>";
    var dateHintAdditional = "";
    var hideLegend = false;
    bool.TryParse(ViewData["disableHint"]?.ToString(), out var disableHint);
    bool.TryParse(ViewData["disableHintSpacer"]?.ToString(), out var disableHintSpacer);
    var legendPrefix = "";

    if (ViewData["dateHint"] != null)
    {
        dateHint = ViewData["dateHint"].ToString();

        if (!disableHintSpacer)
        {
            dateHint = dateHint.Insert(dateHint.LastIndexOf(' '), hintSpacer);
        }
    }

    if (ViewData["dateHintAdditional"] != null)
    {
        dateHintAdditional = ViewData["dateHintAdditional"].ToString();
    }

    if (ViewData["labelClass"] != null)
    {
        labelClassName = ViewData["labelClass"].ToString();
    }

    if (ViewData["hideLegend"] != null)
    {
        hideLegend = true;
    }

    if (ViewData["fieldsetClassName"] != null)
    {
        fieldsetClassName = ViewData["fieldsetClassName"].ToString();
    }
    if (!bool.TryParse(ViewData["showReactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }

    if (ViewData["vueModel"] != null)
    {
        showBinding = string.Concat((string)ViewData["vueModel"], "Error");
        messageBinding = string.Concat((string)ViewData["vueModel"], "ErrorMessage");
        classBinding = string.Concat("v-bind:class=\"[", showBinding, "?'govuk-form-group--error': '', 'govuk-form-group create-edit-form-group date-group']\"");
    }
    else
    {
        classBinding = "class=\"govuk-form-group create-edit-form-group date-group "
                       + Html.ValidationGroupCssClass(ViewData.ModelMetadata.PropertyName) + " "
                       + Html.ValidationCssClassFor(x => x) + " "
                       + Html.ValidationCssClassFor(x => x.Day) + " "
                       + Html.ValidationCssClassFor(x => x.Month) + " "
                       + Html.ValidationCssClassFor(x => x.Year) + " "
                       + Html.ValidationCssClassFor(x => x.Hour) + " "
                       + Html.ValidationCssClassFor(x => x.Minute) + "\"";
    }

    if (ViewData["ClassPrefix"] != null)
    {
        cssClassPrefix = ViewData["ClassPrefix"].ToString();
    }

    if (ViewData["editorPrefix"] != null)
    {
        legendPrefix = ViewData["editorPrefix"] + "_";
    }

}
<div @Html.Raw(classBinding)>
    <fieldset class="govuk-fieldset range-group @fieldsetClassName">
        @if (ViewData["inFilters"] != null)
        {
            <span class="govuk-error-message hidden">Please check the date(s) you have entered</span>
            <span class="govuk-error-message hidden date-range-error">Please use a valid date range</span>
        }
        <legend class="govuk-fieldset__legend @Html.Conditional(hideLegend, "hidden")" id="@legendPrefix@ViewData.ModelMetadata.PropertyName">@(string.IsNullOrWhiteSpace(ViewData["title"] as string) ? ViewData.ModelMetadata.DisplayName : ViewData["title"])</legend>

        @if (!ViewData.ModelState.IsValid)
        {
            foreach (var field in new[] { "", "Day", "Month", "Year", "Hour", "Minute"})
            {
                if (ViewData.ModelState.ContainsKey(ViewData.TemplateInfo.GetFullHtmlFieldName(field)))
                {
                    foreach (var error in ViewData.ModelState[ViewData.TemplateInfo.GetFullHtmlFieldName(field)].Errors)
                    {
                        <span class="govuk-error-message">@error.ErrorMessage</span>
                    }
                }
            }
        }

        @{
            var fullFieldId = ViewData.TemplateInfo.GetFullHtmlFieldName(Model?.Label)
                .Replace(".", "_")
                .Replace("[", "_")
                .Replace("]", "_");

            if (fullFieldId != string.Empty && !string.Concat(legendPrefix, ViewData.ModelMetadata.PropertyName).Equals(fullFieldId))
            {
                <div id="@fullFieldId"></div>
            }

        foreach (var modelStateKey in ViewData.ModelState.Keys)
        {
        var testStateKey = modelStateKey;
        var linkStateKey = testStateKey;
        if (testStateKey.EndsWith(".Day"))
        {
        testStateKey = testStateKey.Replace(".Day", "");
        linkStateKey = linkStateKey.Replace(".Day", "_Day");
        }
        if (testStateKey.EndsWith(".Month"))
        {
        testStateKey = testStateKey.Replace(".Month", "");
        linkStateKey = linkStateKey.Replace(".Month", "_Month");
        }
        if (testStateKey.EndsWith(".Year"))
        {
        testStateKey = testStateKey.Replace(".Year", "");
        linkStateKey = linkStateKey.Replace(".Year", "_Year");
        }
        if (testStateKey.EndsWith(".Hour"))
        {
        testStateKey = testStateKey.Replace(".Hour", "");
        linkStateKey = linkStateKey.Replace(".Hour", "_Hour");
        }
        if (testStateKey.EndsWith(".Minute"))
        {
        testStateKey = testStateKey.Replace(".Minute", "");
        linkStateKey = linkStateKey.Replace(".Minute", "_Minute");
        }

        if (testStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCultureIgnoreCase) &&
        !testStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCulture))
        {
        <div id="@linkStateKey"></div>
        }
        }
        }

        @if (!disableHint)
        {
            if (dateHint != string.Empty)
            {
                <p class="govuk-hint @Html.Conditional(dateHintAdditional != string.Empty, "govuk-!-margin-bottom-0")">For example, @Html.Raw(dateHint)</p>
            }
            else
            {
                <p class="govuk-hint @Html.Conditional(dateHintAdditional != string.Empty, "govuk-!-margin-bottom-0")">For example, 20 03 2003 @Html.Raw(hintSpacer) 23:59</p>
            }

            if (dateHintAdditional != string.Empty)
            {
                <p class="govuk-hint">@dateHintAdditional</p>
            }
        }

        @if (showReactivationWarning)
        {
            <div class="warning-message">
                <p>Changing this date may reactivate the record</p>
            </div>
        }
        @if (ViewData["vueModel"] != null)
        {
            <span class="govuk-error-message" v-show="@showBinding" v-html="@messageBinding"></span>
        }

        @{
            var dayCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Day), " govuk-input ", $"{cssClassPrefix}-day");
            var monthCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Month), " govuk-input ", $"{cssClassPrefix}-month");
            var yearCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Year), " govuk-input ", $"{cssClassPrefix}-year");
            var hourCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Hour), " govuk-input ", $"{cssClassPrefix}-hour");
            var minuteCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Minute), " govuk-input ", $"{cssClassPrefix}-minute");
        }

        <div class="govuk-date-input">

    <div class="govuk-date-input__item">
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Day)">
            @Html.LabelFor(x => x.Day, new { @class = "govuk-label govuk-date-input__label" })
            @Html.TextBoxFor(x => x.Day, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, dayCssClasses, 2, ViewData["vueModel"] != null ? $"{ViewData["vueModel"]}Day" : null))
        </div>
    </div>

    <div class="govuk-date-input__item">
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Month)">
            @Html.LabelFor(x => x.Month, new { @class = "govuk-label govuk-date-input__label" })
            @Html.TextBoxFor(x => x.Month, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, monthCssClasses, 2, ViewData["vueModel"] != null ? $"{ViewData["vueModel"]}Month" : null))
        </div>
    </div>

    <div class="govuk-date-input__item gias-year-input__item">
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Year)">
            @Html.LabelFor(x => x.Year, new { @class = "govuk-label govuk-date-input__label" })
            @Html.TextBoxFor(x => x.Year, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, yearCssClasses, 4, ViewData["vueModel"] != null ? $"{ViewData["vueModel"]}Year" : null))
        </div>
    </div>

    <div class="govuk-date-input__item gias-hour-input__item">
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Hour)">
            @Html.LabelFor(x => x.Hour, new { @class = "govuk-label govuk-date-input__label" })
            @Html.TextBoxFor(x => x.Hour, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, hourCssClasses, 2, ViewData["vueModel"] != null ? $"{ViewData["vueModel"]}Hour" : null))
        </div>
    </div>

    <div class="govuk-date-input__item gias-time-spacer__item">
        <div class="govuk-form-group">
            <p class="govuk-heading-m">:</p>
        </div>
    </div>

    <div class="govuk-date-input__item gias-minute-input__item">
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Minute)">
            @Html.LabelFor(x => x.Minute, new { @class = "govuk-label govuk-date-input__label" })
            @Html.TextBoxFor(x => x.Minute, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, minuteCssClasses, 2, ViewData["vueModel"] != null ? $"{ViewData["vueModel"]}Minute" : null))
        </div>
    </div>
</div>
        @if (ViewData["readonly"] as bool? ?? false)
        {
            @Html.HiddenFor(x => x.Day)
            @Html.HiddenFor(x => x.Month)
            @Html.HiddenFor(x => x.Year)
            @Html.HiddenFor(x => x.Hour)
            @Html.HiddenFor(x => x.Minute)
        }
    </fieldset>
</div>

@functions
{
    static object GetCheckboxAttributes(bool? readOnly, string cssClasses, int maxlength, string vueModel)
    {
        if (readOnly.HasValue && readOnly.Value)
            return new { @class = cssClasses, disabled = "disabled", maxlength };

        if (vueModel != null)
            return new { @class = cssClasses, maxlength, v_model = vueModel };

        return new { @class = cssClasses, maxlength };
    }
}

@using Edubase.Web.UI.Helpers
@model Edubase.Web.UI.Areas.Governors.Models.SharedGovernorViewModel
@{
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out var disableStartDate))
    {
        disableStartDate = false;
    }
}

@if (Model.MultiSelect)
{
    <div class="govuk-checkboxes__item">
        @Html.CheckBoxFor(
            model => model.Selected,
            GetCheckboxAttributes(
            Model.PreExisting,
            "govuk-checkboxes__input gias-checkboxes__conditional--input",
            "expand-" + Model.Id)
        )
        <label class="govuk-checkboxes__label govuk-body" for="@Html.IdFor(model => model.Selected)">
            @Model.FullName
        </label>
    </div>
}
else
{
    <div class="govuk-form-group ">
        <div class="govuk-radios">
            <div class="govuk-radios__item">
                @Html.RadioButton(Model.Id.ToString(), Model.Id, Model.Selected, new { Name = "SelectedGovernorId", @class = "govuk-radios__input gias-nested-radio-toggle", id = "gov-" + Model.Id, data_toggle_panel = "#expand-" + Model.Id })
                <label class="govuk-radios__label" for="gov-@Model.Id">@Model.FullName</label>
            </div>
        </div>
    </div>
}

@Html.HiddenFor(x => x.Id)
@Html.HiddenFor(x => x.PostCode)
@Html.HiddenFor(x => x.AppointingBodyName)
@Html.HiddenFor(x => x.DOB)
@Html.HiddenFor(x => x.FullName)
<div class="shared-governor @Html.Conditional(Model.MultiSelect, "gias-checkboxes__conditional")">
    @if (Model.PreExisting)
    {
        <p class="govuk-body-s govuk-!-font-weight-bold">Already shared with this establishment</p>
    }
    <dl class="gias-summary-list gias-summary-list--inline govuk-!-font-size-16">
        @if (Model.SharedWith.Any())
        {
            <div class="gias-summary-list__row">
                <dt class="gias-summary-list__key">Shared with:</dt>
                <dd class="gias-summary-list__value">
                    @foreach (var establishment in Model.SharedWith)
                    {
                        <div>
                            @establishment.EstablishmentName, <abbr title="Unique Reference Number">URN</abbr>: @establishment.Urn
                        </div>
                    }
                </dd>
            </div>
        }
        <div class="gias-summary-list__row">
            <dt class="gias-summary-list__key">Postcode:</dt>
            <dd class="gias-summary-list__value">@Model.PostCode</dd>
        </div>
    </dl>
    @if (!Model.PreExisting)
    {
        <div class="gias-nested-conditional" id="expand-@Model.Id">
            <dl class="gias-summary-list gias-summary-list--inline govuk-!-font-size-16">
                <div class="gias-summary-list__row">
                    <dt class="gias-summary-list__key">
                        <abbr title="Governor ID number">GID</abbr>:
                    </dt>
                    <dd class="gias-summary-list__value">@Model.Id</dd>
                </div>
                <div class="gias-summary-list__row">
                    <dt class="gias-summary-list__key">Appointed by:</dt>
                    <dd class="gias-summary-list__value">@Model.AppointingBodyName</dd>
                </div>
                <div class="gias-summary-list__row">
                    <dt class="gias-summary-list__key">Date of birth:</dt>
                    <dd class="gias-summary-list__value">@(Model.DOB?.ToString("d MMMM yyyy"))</dd>
                </div>
            </dl>


            <div class="@Html.ValidationCssClass("StartDate,endDate")" id="StartDate,endDate">
                @if (Html.ValidationCssClass("StartDate,endDate").ToString() == "error")
                {
                    <span class="field-validation-error">
                        @Html.ViewData.ModelState["StartDate,endDate"].Errors.First().ErrorMessage
                    </span>
                }
                @Html.EditorFor(x => x.AppointmentStartDate, new { @readonly = Model.PreExisting || disableStartDate, ClassPrefix = "start-date", fieldsetClassName = "edit-date-fieldset" })
                @Html.EditorFor(x => x.AppointmentEndDate, new { @readonly = Model.PreExisting, fieldsetClassName = "edit-date-fieldset" })
            </div>
        </div>
    }
    else
    {
        <div class="hidden">
            @Html.EditorFor(x => x.AppointmentStartDate)
            @Html.EditorFor(x => x.AppointmentEndDate)
        </div>
    }


</div>

@functions {
    public static Dictionary<string, object> GetCheckboxAttributes(bool readOnly, string cssClasses, string toggleTarget = "")
    {
        var attributes = new Dictionary<string, object>
        {
            { "class", cssClasses }
        };

        if (readOnly)
        {
            attributes["disabled"] = "disabled";
        }

        if (!string.IsNullOrEmpty(toggleTarget))
        {
            attributes["data-aria-controls"] = toggleTarget;
        }

        return attributes;
    }
}



@using Edubase.Services.Enums
@using Edubase.Common;
@using VM = Edubase.Web.UI.Areas.Groups.Models.CreateEdit.GroupEditorViewModel;
@using L = Edubase.Services.Enums.eLookupGroupType;
@model VM
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.Title = Model.PageTitle;
    Layout = "_EditLayoutPage.cshtml";
}
<div class="tab-content">
    
@using (Html.BeginForm("EditLinks", "Group", new { area = "Groups" }, FormMethod.Post))
{
    @Html.HiddenFor(x => x.GroupUId)
    @Html.HiddenFor(x => x.SaveMode)
    @Html.HiddenFor(x => x.GroupTypeId)
    @Html.HiddenFor(x => x.GroupName)
    @Html.HiddenFor(x => x.GroupTypeName)
    @Html.HiddenFor(x => x.SelectedTabName)
    @Html.HiddenFor(x => x.ListOfEstablishmentsPluralName)

    <div>
        @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
        {
            <button type="submit" name="action" class="button mobile-full-width" value="@VM.ActionSave">Save</button>
        }
        @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUId }, new { @class = "button button-grey cancel mobile-full-width" })
    </div>

    <div class="column-two-thirds">
        <h2 class="bold-large">List of @Model.ListOfEstablishmentsPluralName (@Model.LinkedEstablishments.Establishments.Count)</h2>
    </div>


    <div class="column-half">
            <span class="bold-xsmall">Add establishment</span>
            <p class="font-xsmall">Enter the establishment <abbr title="Unique Reference Number">URN</abbr></p>
            <div class="form-group add-establishment-link @Html.ValidationCssClassFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)">
                @Html.ValidationMessageFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)
                @Html.TextBoxFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn, new { @class = "form-control form-control-1-2 search-box" })
                <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentSearch" class="button inline-submit">Find</button>
            </div>
            @if (Model.LinkedEstablishments.LinkedEstablishmentSearch.HasResult)
            {
            <p class="bold-xsmall">Establishment found</p>
            <p>@Model.LinkedEstablishments.LinkedEstablishmentSearch.Name</p>

            @Html.EditorFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate, new { title = "Joined date"})

            <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentAdd" class="button">Add</button>
            @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)

            }

            @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Name)
            @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.FoundUrn)

        </div>

    <div class="column-two-thirds">

            <ul class="school-results-listing establishment-list">
                @for (int i = 0; i < Model.LinkedEstablishments.Establishments.Count; i++)
                {
                    var e = Model.LinkedEstablishments.Establishments[i];
                    <li>
                        <h2>@Html.ActionLink( Model.LinkedEstablishments.Establishments[i].Name, "Details", "Establishment", new { id = Model.LinkedEstablishments.Establishments[i].Urn, area = "Establishments" }, new { @class = "bold-small" })</h2>
                        @if (ViewData.ModelState["linkedEstablishments[" + i + "].id"] != null)
                        {
                            <div class="error">@Html.ValidationMessage("linkedEstablishments[" + i + "].id")</div>
                        }
                        <dl>
                            <dt>Address:</dt>
                            <dd>@e.Address</dd>

                            <dt>Phase / type:</dt>
                            <dd>
                                @(e.PhaseName ?? "Not recorded"),
                                @(e.TypeName ?? "Not recorded")
                            </dd>

                            <dt><abbr title="Unique Reference Number">URN</abbr>:</dt>
                            <dd>@e.Urn</dd>

                            <dt class="inline-details">
                                <abbr title="Local authority - Establishment number">LAESTAB</abbr>:
                            </dt>
                            <dd>@(e.LAESTAB ?? "Not recorded")</dd>

                            <dt>Status:</dt>
                            <dd>@(e.StatusName ?? "Not recorded")</dd>

                            <dt>Local authority name:</dt>
                            <dd>@(e.LocalAuthorityName ?? "Not recorded")</dd>


                            @if (!Model.LinkedEstablishments.Establishments[i].EditMode)
                            {
                                <dt>Joined date:</dt>
                                <dd>@(e.JoinedDate?.ToString("dd/MM/yyyy") ?? "Not recorded")</dd>
                                @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].JoinedDate)
                            }

                        </dl>

                        @if (Model.GroupTypeMode == VM.eGroupTypeMode.ChildrensCentre)
                        {
                            <div class="form-radio cc-lead-centre">
                                <label>
                                    @Html.RadioButtonFor(x => x.CCLeadCentreUrn, Model.LinkedEstablishments.Establishments[i].Urn, new { @class = "" })
                                    Make this children's centre a lead centre
                                </label>
                            </div>

                        }

                        @if (Model.LinkedEstablishments.Establishments[i].EditMode)
                        {
                            @Html.EditorFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable, new {title = "Joined date"})
                        }

                        @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
                        {
                            <div class="button-row">
                                <button type="submit" class="button button-grey button-remove" name="action" value="@VM.ActionLinkedEstablishmentRemove@Model.LinkedEstablishments.Establishments[i].Urn">Remove</button>
                                <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentEdit@Model.LinkedEstablishments.Establishments[i].Urn" class="button button-grey">Edit</button>
                            </div>
                        }
                        else if (Model.LinkedEstablishments.Establishments[i].EditMode)
                        {
                            <div class="form-group">
                                
                                <button type="submit" class="button" name="action" value="@VM.ActionLinkedEstablishmentSave">Save</button>
                                @Html.ActionLink("Cancel", "EditLinks", "Group", new { area = "Groups" }, new { @class = "button button-grey allow-exit" })
                            </div>
                        }


                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Id)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Name)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Urn)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Address)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].TypeName)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].HeadFullName)
                        @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].EditMode)
                    </li>
                }
            </ul>
        </div>

        <div class="column-half">
            @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
            {
                <button type="submit" name="action" class="button mobile-full-width" value="@VM.ActionSave">Save</button>
            }
            @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUId }, new { @class = "button button-grey cancel mobile-full-width" })

           
        </div>
}
</div>
@section ViewScripts
{
    @if (Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
    {
        <script>
            var $fields = $('#content').find('.form-control');
            var exitAttached = false;
            $fields.on('change',
                function() {
                    if (!exitAttached) {
                        DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                        exitAttached = true;
                    }

                });

        </script>
    }
    @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
    {
        <script>
            $('#content').find('.button-remove').okCancel({
                triggerEvent: 'click',
                title: 'Are you sure you want to remove this academy?',
                content: 'All governor information associated with this academy will be removed too.',
                idPrefix: 'remove-',
                ok: function () {
                    $(this.el).data().okCancel.unbind();
                    $(this.el).click();
                }
            })
        </script>
    }


    @if (Request.HttpMethod == "POST" && Model.Action != "cancel" )
    {
        <script>
            $(function () {
                DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
            });
        </script>
    }
}
@using Edubase.Services.Enums
@using Edubase.Common;
@using Edubase.Common.Text;
@using VM = Edubase.Web.UI.Areas.Governors.Models.CreateEditGovernorViewModel;
@using System.Linq.Expressions

@model VM
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.SelectedTab = "EditGovernance";
    Layout = Model.Layout;
}

<div class="column-half">
        
    @using (Html.BeginRouteForm(Model.FormPostRouteName, FormMethod.Post))
    {
        @Buttons()
        <h2 class="heading-medium">Governance</h2>
            
        @Html.HiddenFor(x => x.GovernorRole)
        @Html.HiddenFor(x => x.GovernorRoleName)
        @Html.HiddenFor(x => x.GID)
        @Html.HiddenFor(x => x.EstablishmentUrn)
        @Html.HiddenFor(x => x.GroupUId)
        @Html.HiddenFor(x => x.SelectedTabName)
        @Html.HiddenFor(x => x.GroupName)
        @Html.HiddenFor(x => x.GroupTypeId)
        @Html.HiddenFor(x => x.ListOfEstablishmentsPluralName)

        @Html.HiddenFor(x => x.ReplaceGovernorViewModel.GID)
        @Html.HiddenFor(x => x.ReplaceGovernorViewModel.Name)
            
        if (Model.ReplaceGovernorViewModel.GID.HasValue)
        {
            <p class="bold-small">Replace @Model.GovernorRoleName.ToLower()</p>
            <p class="bold-xsmall">@Model.ReplaceGovernorViewModel.Name</p>
            <div class="date-group-wrap">
                @RenderDateSelector(x => x.ReplaceGovernorViewModel.AppointmentEndDate, x => x.ReplaceGovernorViewModel.AppointmentEndDate.Day, x => x.ReplaceGovernorViewModel.AppointmentEndDate.Month, x => x.ReplaceGovernorViewModel.AppointmentEndDate.Year, "Date term ends")
            </div>
        }
        <br />
        <p  class="bold-small">@(Model.ReplaceGovernorViewModel.GID.HasValue ? string.Concat("New ", Model.GovernorRoleName).ToSentenceCase() : Model.GovernorRoleName)</p>
            
        @Html.EditorFor(m => m)

        <div class="button-row">
            @Buttons()
        </div>
            
            
    }

        
</div>

@helper Buttons()
{
    <button type="submit" name="action" class="button" value="">
        @if (Model.ReplaceGovernorViewModel.GID.HasValue)
        {
            <text>Replace</text>
        }
        else if (Model.GID.HasValue)
        {
            <text>Save</text>
        }
        else
        {
            <text>Add</text>
        }
    </button>
    @Html.ActionLink("Cancel", "Edit", "Governor", new { area = "Governors", groupUId = Model.GroupUId, establishmentUrn = Model.EstablishmentUrn }, new { @class = "button button-grey" })
}


@helper RenderDateSelector(Expression<Func<VM, DateTimeViewModel>> vmSelector,
    Expression<Func<VM, int?>> daySelector, Expression<Func<VM, int?>> monthSelector,
    Expression<Func<VM, int?>> yearSelector, string label)
{
    var id = label.Replace(" ", "").ToLower();
    <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(vmSelector)">
        <fieldset>
            <legend class="bold-xsmall" style="font-weight:bold;">@label</legend>
            <div class="form-hint">For example, 20 03 2003</div>
            @Html.ValidationMessageFor(vmSelector)
            <span class="inline-form-control">
                <label for="@id-day">Day</label>
                @Html.EduDayDropDownFor(daySelector, new { id = $"{id}-day", @class = "form-control", aria_describedby = $"help-{id}-day" })
            </span>
            <span class="inline-form-control">
                <label for="opendate-month">Month</label>
                @Html.EduMonthDropDownFor(monthSelector, new { id = $"{id}-month", @class = "form-control", aria_describedby = $"help-{id}-month" })
            </span>
            <span class="inline-form-contol">
                <label for="opendate-year">Year</label>
                @Html.EduYearDropDownFor(yearSelector, new { id = $"{id}-year", @class = "form-control", aria_describedby = $"help-{id}-year" })
            </span>
        </fieldset>
    </div>
}
@using Edubase.Services.Enums;
@model CreateAcademyTrustViewModel
@{
    ViewBag.bodyClasses = "create-edit-school create-academy-trust";
    ViewBag.hideLogo = true;
    ViewBag.Title = "Create academy trust";
}



@using (Html.BeginForm("SaveNewAcademyTrust", "Group", new { area = "Groups" }, FormMethod.Post))
{
    <div class="grid-row">
        <div class="column-full">
            <div class="breadcrumbs">
                <ul>
                    <li>
                        @Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)
                    </li>
                    <li>
                        @Html.ActionLink("Tools", "Index", "Tools", new { area = "" }, null)
                    </li>
                    <li>
                        @Html.ActionLink("Create an academy trust", "SearchCompaniesHouse", "Group", new { area = "Groups" }, null)
                    </li>
                </ul>
            </div>

            <h1 class="heading-xlarge">Enter academy trust details</h1> 
            @if (Model.TrustExists == true)
            {
                <div class="error-summary">
                    <h2 class="heading-medium error-summary-heading">Duplicate record found</h2>
                    Company is already a @(Model.TypeId == (int)eLookupGroupType.MultiacademyTrust? "multi-academy trust" : "single-academy trust"). To complete the record:
                    <ul class="error-summary-list">
                        <li class="error-message"><a href="#company">Please select a different company</a></li>
                    </ul>
                </div>
            }
            else
            {
                Html.ValidationSummary(null, new {@class = "error-summary"});
            }
            <p>Add the details of the new academy trust.</p>           
        </div>
    </div>
    <div class="grid-row">
        <div class="column-two-thirds">
            <div id="company" class="@((Model.TrustExists) ? "error": "")">
                <h2 class="bold-small">Selected company</h2>
                
                @if (Model.TrustExists == true)
                {
                    <span class="field-validation-error">Please select a different company</span>
                }

                <table class="borderless company-result">
                    <tr>
                        <th scope="row" class="new-trust-details">Company name:</th>
                        <td class="new-trust-details">@Model.Name</td>
                    </tr>
                    <tr>
                        <th scope="row" class="new-trust-details">Companies House Number:</th>
                        <td class="new-trust-details"><a href="@System.Configuration.ConfigurationManager.AppSettings["CompaniesHouseBaseUrl"]@Model.CompaniesHouseNumber">@Model.CompaniesHouseNumber</a></td>
                    </tr>
                    <tr>
                        <th scope="row" class="new-trust-details">Incorporated:</th>
                        <td class="new-trust-details">@(Model.OpenDate?.ToString("dd/MM/yyyy"))</td>
                    </tr>
                    <tr>
                        <th scope="row" class="new-trust-details">Address:</th>
                        <td class="new-trust-details">@Model.Address</td>
                    </tr>
                </table>

                @Html.ActionLink("Wrong company?", "SearchCompaniesHouse", "Group", new {area = "Groups"}, new { @class = "change-link" })
            </div>

            @Html.HiddenFor(x => x.CompaniesHouseAddressToken)
            @Html.HiddenFor(x => x.Address)
            @Html.HiddenFor(x => x.Name)
            @Html.HiddenFor(x => x.OpenDate)
            @Html.HiddenFor(x => x.CompaniesHouseNumber)
        </div>

        <div class="column-half">
            <div class="single-group">
                <h2 class="bold-small trust-details-header">Trust details</h2>
                <div class="form-group @Html.ValidationCssClassFor(x => x.TypeId)">
                    <label for="TypeId" class="form-label bold-small">Trust type</label>
                    @Html.ValidationMessageFor(x => x.TypeId)
                    @Html.DropDownListFor(x => x.TypeId, Model.GroupTypes, "", GetAttributes("form-control", Model.TrustExists))
                </div>
                <div class="form-group @Html.ValidationCssClassFor(x => x.GroupId)">
                    @Html.LabelFor(x => x.GroupId)
                    @Html.ValidationMessageFor(x => x.GroupId)
                    @Html.TextBoxFor(x => x.GroupId, GetAttributes("form-control", Model.TrustExists, 120))
                </div>
            </div>
        </div>
        
    </div>
    <div class="grid-row">
        <div class="column-full">
            @Html.ActionLink("« Go back", "SearchCompaniesHouse", "Group", new {area = "Groups"}, new {@class = "button button-grey mobile-full-width cancel"})
            @if (!Model.TrustExists && Model.AllowSave)
            {
                <button type="submit" class="button submit mobile-full-width">Create</button>
            }
            @Html.ActionLink("Cancel", "Index", "Tools", new {area = ""}, new {@class = "button button-grey mobile-full-width cancel"})
        </div>
    </div>
}

@section ViewScripts
{
    <script>
        var $fields = $('#content').find('.form-control');
        var exitAttached = false;

        $fields.on('change', function () {
            if (!exitAttached) {
                DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                exitAttached = true;
            }

        });

    </script>
}

@functions
{
    object GetAttributes(string cssClasses, bool? readOnly = null, int? maxlength = null)
    {
        if (maxlength.HasValue)
        {
            if (readOnly.HasValue && readOnly.Value)
                return new { @class = cssClasses, @disabled = "disabled", maxlength = maxlength };

            return new { @class = cssClasses, maxlength = maxlength };
        }
        else
        {
            if (readOnly.HasValue && readOnly.Value)
                return new { @class = cssClasses, @disabled = "disabled"};

            return new { @class = cssClasses};
        }
    }
}
@*
    
    HELLO THERE JON
    I have created GenericPagination v2 because there was too much calculation going on inside this. Plus, the server-side prefers to use Skip/Take over startIndex / PageSize, because it allows for greater control and simplicity. 
*@
@model Edubase.Services.Core.IPagination
@{
    const int maxPages = 10;
    var paginationStart = 1;
    var paginationFinish = Model.PageCount;
}

@if (Model.PageCount > maxPages)
{
    if (Model.CurrentPageIndex < 5)
    {
        paginationFinish = maxPages;
    }
    else if (Model.CurrentPageIndex + 5 > Model.PageCount)
    {
        paginationFinish = Model.PageCount;
        paginationStart = paginationFinish - maxPages;
    }
    else if (Model.CurrentPageIndex >= 5)
    {
        paginationFinish = Model.CurrentPageIndex + 5;
        paginationStart = paginationFinish - maxPages;
    }

}

<div class="pagination">
    <p>Showing @Model.FirstResultIndex - @Model.LastResultIndex of @Model.Count</p>
    <ul class="pagination-links">

        @if (Model.CurrentPageIndex > 1)
        {
            <li>
                <a href="@Url.Current(new {skip = (Model.Skip - Model.Take), Count = Model.Count})" class="pagination-prev">Previous</a>
            </li>
        }

        @for (int i = paginationStart; i <= paginationFinish; i++)
        {
            if (i == Model.CurrentPageIndex)
            {
                <li><span class="go-nowhere numeric-pagination">@i</span></li>
            }
            else
            {
                var tabletClass = (i >= Model.CurrentPageIndex - 2 && i <= Model.CurrentPageIndex + 2) ? "tablet-pagination" : "";
                <li>
                    <a href="@Url.Current(new {skip = ((i - 1) * Model.Take), Count = Model.Count})" class="numeric-pagination @tabletClass">@i</a>
                </li>

            }
        }

        @if (Model.CurrentPageIndex < Model.PageCount)
        {
            <li>
                <a href="@Url.Current(new {skip = (Model.Skip + Model.Take), Count = Model.Count})" class="pagination-next">Next</a>
            </li>
        }

    </ul>
</div>

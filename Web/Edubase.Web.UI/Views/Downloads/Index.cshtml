@using Edubase.Services.Downloads.Models;
@using Edubase.Services.Enums
@model DownloadsViewModel
@{
    ViewBag.Title = "Downloads";
    ViewBag.HideLogo = true;
    var downloadGroups = Model.GetFileDownloadGroups();
}
@section Head
{
    <meta name="robots" content="noindex,nofollow" />
}
<div class="grid-row">
    <div class="column-full">
        <div class="breadcrumbs">
            <ol>
                <li>
                    @Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)
                </li>
            </ol>
        </div>
        <h1 class="heading-xlarge">Downloads</h1>
    </div>
    <div class="column-two-thirds">
        <p>
            This data is updated daily. The data fields and the order of the data fields can change in these downloads.
            If you need data in a prescribed format you should consider signing up for WebServices by submitting a
            <a href="https://form.education.gov.uk/en/AchieveForms/?form_uri=sandbox-publish://AF-Process-2b61dfcd-9296-4f6a-8a26-4671265cae67/AF-Stage-f3f5200e-e605-4a1b-ae6b-3536bc77305c/definition.json&redirectlink=/en&cancelRedirectLink=/en" target="_blank" rel="external">Service Request <span class="visually-hidden">Opens in new window</span></a>.
        </p>
    </div>
</div>

<div class="grid-row">
    <div class="column-full">
        <div class="horizontal-tabs-wrapper">
            @if (Model.AreScheduledExtractsAvailable)
            {
                <div class="tab-wrap">
                    <ul class="horizontal-tabs">
                        <li>
                            <a href="#group-data" class="horizontal-tab">
                                Establishment &amp; group data
                            </a>
                        </li>
                        <li>
                            <a href="#scheduled-extracts" class="horizontal-tab">
                                Scheduled extracts
                            </a>
                        </li>
                    </ul>
                </div>
            }
            <div class="tab-content-wrapper horizontal-tabs-content">
                <div id="group-data">
                    <form id="download-filters">
                        @Html.HiddenFor(m => m.Skip)
                        <input type="hidden" value="true" name="filteropen" id="filters-open-state" />

                        <fieldset class="column-third toggle-panels" id="download-radios">
                            <legend class="bold-legend">Select an option</legend>
                            <div class="multiple-choice multiple-choice-downloads multiple-choice--radio">
                                @foreach (eDownloadFilter ft in Enum.GetValues(typeof(eDownloadFilter)))
                                {
                                    <div class="multiple-choice multiple-choice-downloads">
                                        @{
                                            var id = TagBuilder.CreateSanitizedId(string.Format("{0}-{1}", "search-type", ft));
                                        }
                                        @Html.RadioButtonFor(x => x.SearchType, ft, new { id, data_toggle_panel = $"#{ft}" })
                                        @Html.Label(ft.EnumDisplayNameFor(), new { @for = id })
                                    </div>
                                }
                            </div>


                            <div id="filter-container">
                                <div class="filter-form" id="filter-form">
                                    <div id="@eDownloadFilter.Latest.ToString()"></div>
                                    <div id="@eDownloadFilter.DateFilter.ToString()">
                                        <div id="EditSearchCollapse" class="blanket-container">
                                            <h2 class="visuallyhidden">Search results filters</h2>
                                            <a href="#results-container" class="visually-hidden-focusable">Skip filters</a>

                                            <div class="govuk-option-select date-filters no-scroll" data-closed-on-load="false" id="date-filter">
                                                <div class="container-head js-container-head">
                                                    <div class="option-select-label">Date</div>
                                                    <div class="js-selected-counter">
                                                        <span class="js-selected-counter-text" id="date-filter-type-label">Select a date</span>
                                                    </div>
                                                </div>
                                                <div class="options-container" id="">
                                                    <div class="js-auto-height-inner">
                                                        <fieldset>
                                                            <legend class="visuallyhidden">Change history date range and type</legend>
                                                            <label for="date-type-filter" class="visuallyhidden">Change type</label>
                                                            @Html.EditorFor(m => m.FilterDate, new { disableHint = true, labelClass = "form-label", title = "To", inFilters = true, fieldsetClassName = "search-to-date" })
                                                            <div class="form-group soft-half--sides">
                                                                <a href="#" class="button button-secondary filter-button">Apply</a>
                                                            </div>
                                                        </fieldset>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </form>

                    <div class="column-two-thirds" id="results-container">
                        @foreach (var group in downloadGroups)
                        {
                            <h2 class="heading-medium flush--top">@group.Heading</h2>
                            <p>@group.Paragraph</p>
                            foreach (var item in group.SubSections)
                            {
                                <h3 class="heading-small push-half--bottom">@item.Heading</h3>
                                <ul class="list push--bottom">
                                    @foreach (var file in item.Files)
                                    {
                                        <li class="download-list-item">
                                            <span class="icon-link-copy">
                                                @if (file.Item2.RequiresGeneration)
                                                {
                                                    <a href="@Url.RouteUrl("GenerateDownload", new {id = file.Item2.Tag})" rel="nofollow" class="js-track" data-track="download-data-page|@file.Item2.Description)|download">
                                                        @file.Item1@Html.Conditional(file.Item2.FileSizeInBytes > 0, ", " + Html.FileSizeInMegabytes(file.Item2.FileSizeInBytes))
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="@(file.Item2.AuthenticationRequired ? Url.RouteUrl("DownloadFile", new {filterDate = DateTime.Today, id = file.Item2.Tag}) : file.Item2.Url)" target="_blank" rel="nofollow" class="js-track" data-track="download-data-page|@file.Item2.Description)|download">
                                                        @file.Item1@Html.Conditional(file.Item2.FileSizeInBytes > 0, ", " + Html.FileSizeInMegabytes(file.Item2.FileSizeInBytes)) <span class="visually-hidden">Opens in new window</span>
                                                    </a>
                                                }
                                            </span>
                                        </li>
                                    }
                                </ul>
                            }
                        }
                    </div>
                </div>
                @if (Model.AreScheduledExtractsAvailable)
                {
                    <div id="scheduled-extracts" class="tab-content">

                        <p>
                            This is full data that can be found on Get information about schools. Not all files are date stamped, so it's a good idea to make a note of when you download the file.
                        </p>

                        @if (Model.ScheduledExtracts.PageCount > 1)
                        {
                            <div class="top-pagination">
                                @Html.Partial("_GenericPaginationV2", Model.ScheduledExtracts)
                            </div>
                        }

                        <table class="edubase-table retain-columns @(Model.ScheduledExtracts.PageCount > 1 ? "" : "no-pagination")">
                            <caption class="visuallyhidden">Scheduled extracts files</caption>
                            <thead>
                                <tr>
                                    <th scope="col">File</th>
                                    <th scope="col" class="download-id">ID</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ScheduledExtracts.Items)
                                {
                                    <tr>
                                        <td class="download-list-item">
                                            @Html.RouteLink(item.Name, "RequestScheduledExtract", new { id = item.Id }, new { rel = "nofollow" })
                                        </td>
                                        <td>
                                            @item.Id
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        @if (Model.ScheduledExtracts.PageCount > 1)
                        {
                            <div class="lower-pagination push--bottom">
                                @Html.Partial("_GenericPaginationV2", Model.ScheduledExtracts)
                            </div>
                            @helpers.BackToTopLink()
                        }
                    </div>
                }

            </div>
        </div>
    </div>
</div>


@section ViewScripts {
    <script src="/public/assets/scripts/standalone/downloads-index.js"></script>
}

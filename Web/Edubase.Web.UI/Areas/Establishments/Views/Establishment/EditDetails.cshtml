@using System.Linq
@using ViewModel = Edubase.Web.UI.Models.EditEstablishmentModel
@model ViewModel
@{
    if (Model.ChangesSummary == null)
    {
        Layout = "_EditLayoutPage.cshtml";
    }
}

@using (Html.BeginForm())
{
    <div class="tab-content">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Urn)
        @Html.HiddenFor(x => x.SelectedTab)
        @Html.HiddenFor(x => x.TypeName)
        @Html.HiddenFor(x => x.LegalParentGroupToken)
        <div class="column-full" style="display:@Html.Conditional(Model.ChangesSummary != null, "none");">
            <div class="grid-row">

                <div class="column-half">

                    <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveDetails">Save</button>
                    @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })


                    <div class="form-group first @Html.ValidationCssClassFor(x => x.Name)">
                        <label class="form-label" for="school-name">
                            School / College name
                        </label>
                        @Html.ValidationMessageFor(x => x.Name)
                        @Html.TextBoxFor(x => x.Name, new { maxlength = 120, id = "school-name", @class = "form-control", aria_describedby = "help-school-name" })
                    </div>

                    <div class="form-group">
                        <label class="form-label"><abbr title="Unique Reference Number">URN</abbr></label>
                        @Html.TextBoxFor(x => x.Urn, new { id = "urn", @class = "form-control", placeholder = "auto-generated", @readonly = true, disabled = "disabled" })
                    </div>

                    <div class="form-group">
                        <label for="school-street" class="form-label">Street</label>
                        @Html.TextBoxFor(x => x.Address_Line1, new { maxlength = 120, id = "school-street", @class = "form-control" })
                    </div>

                    <div class="form-group">
                        <label for="school-locality" class="form-label">Locality</label>
                        @Html.TextBoxFor(x => x.Address_Locality, new { maxlength = 120, id = "school-locality", @class = "form-control" })
                    </div>

                    <div class="form-group">
                        <label for="school-addressline3" class="form-label">Address 3</label>
                        @Html.TextBoxFor(x => x.Address_Line3, new { maxlength = 120, id = "school-addressline3", @class = "form-control" })
                    </div>

                    <div class="form-group">
                        <label for="school-town" class="form-label">Town</label>
                        @Html.TextBoxFor(x => x.Address_CityOrTown, new { maxlength = 120, id = "school-town", @class = "form-control" })
                    </div>

                    @if (Model.Address_CountryId == Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                    {
                        <div class="form-group">
                            <label for="Address_CountyId" class="form-label">County</label>
                            @Html.DropDownListFor(x => x.Address_CountyId, Model.Counties, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.Address_CountryId != Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.Address_CountryId, "Country", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.Address_CountryId, Model.Countries, "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    }

                    @Html.HiddenFor(x => x.Address_CountryId)

                    <div class="form-group @Html.ValidationCssClassFor(x => x.Address_PostCode)">
                        @Html.LabelFor(x => x.Address_PostCode, "Postcode", new { @class = "form-label" })
                        @Html.ValidationMessageFor(x => x.Address_PostCode)
                        @Html.TextBoxFor(x => x.Address_PostCode, new { maxlength = 120, @class = "form-control postcode-field", disabled = "disabled" })
                        @Html.HiddenFor(x => x.Address_PostCode)
                        @Html.RouteLink("Replace this address", "ReplaceEstablishmentAddress", new { urn = Model.Urn, target = "main" }, new { @class = "replace-address" })
                    </div>

                    @Html.HiddenFor(x => x.Address_UPRN)
                    @Html.HiddenFor(x => x.Northing)
                    @Html.HiddenFor(x => x.Easting)

                    @if (Model.EditPolicy.AltSiteName.GetValueOrDefault(true))
                    {
                        <div class="alt-address">
                            <div class="grey-bar"></div>
                            <div class="form-group">
                                @Html.LabelFor(x => x.AltSiteName, $"Site name")
                                @Html.TextBoxFor(x => x.AltSiteName, new { @class = "form-control alt-address" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(x => x.AltStreet, "Street")
                                @Html.TextBoxFor(x => x.AltStreet, new { @class = "form-control alt-address" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(x => x.AltLocality, "Locality")
                                @Html.TextBoxFor(x => x.AltLocality, new { @class = "form-control alt-address" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(x => x.AltAddress3, "Address 3")
                                @Html.TextBoxFor(x => x.AltAddress3, new { @class = "form-control alt-address" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(x => x.AltTown, "Town")
                                @Html.TextBoxFor(x => x.AltTown, new { @class = "form-control alt-address" })
                            </div>

                            @if (Model.AltCountryId == Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(x => x.AltCountyId, "County", new { @class = "form-label" })
                                    @Html.DropDownListFor(x => x.AltCountyId, Model.Counties, "", new { @class = "form-control alt-address" })
                                </div>
                            }

                            @if (Model.AltCountryId != Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                            {
                                <div class="form-group">
                                    @Html.LabelFor(x => x.AltCountryId, "Country", new { @class = "form-label" })
                                    @Html.DropDownListFor(x => x.AltCountryId, Model.Countries, "", new { @class = "form-control", disabled = "disabled" })
                                </div>
                            }
                            @Html.HiddenFor(x => x.AltCountryId)

                            <div class="form-group">
                                @Html.LabelFor(x => x.AltPostCode, "Postcode", new { @class = "form-label" })
                                @Html.TextBoxFor(x => x.AltPostCode, new { maxlength = 120, @class = "form-control postcode-field alt-address", disabled = "disabled" })
                                @Html.HiddenFor(x => x.AltPostCode)
                                @Html.RouteLink("Replace this address", "ReplaceEstablishmentAddress", new { urn = Model.Urn, target = "alt" }, new { @class = "replace-address" })
                            </div>

                            @Html.HiddenFor(x => x.AltUPRN)
                        </div>
                    }

                    @if (Model.EditPolicy.HeadTitleId)
                    {
                        <div class="form-group">
                            <label class="form-label">
                                @(Model.EditPolicy.HeadteacherLabel) title
                            </label>
                            @Html.DropDownListFor(x => x.HeadTitleId, Model.HeadTitles, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.HeadFirstName)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.HeadFirstName)">
                            <label class="form-label" for="headfirstname">
                                @(Model.EditPolicy.HeadteacherLabel) first name
                            </label>
                            @Html.ValidationMessageFor(x => x.HeadFirstName)
                            @Html.TextBoxFor(x => x.HeadFirstName, new { maxlength = 120, id = "headfirstname", @class = "form-control", placeholder = "First name" })
                            @Html.HiddenFor(x => x.OldHeadFirstName)
                        </div>
                    }

                    @if (Model.EditPolicy.HeadLastName)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.HeadFirstName)">
                            <label class="form-label">
                                @(Model.EditPolicy.HeadteacherLabel) last name
                            </label>
                            @Html.ValidationMessageFor(x => x.HeadLastName)
                            @Html.TextBoxFor(x => x.HeadLastName, new { maxlength = 120, id = "headlastname", @class = "form-control", placeholder = "Last name" })
                            @Html.HiddenFor(x => x.OldHeadLastName)
                        </div>
                    }

                    @if (Model.EditPolicy.HeadEmailAddress)
                    {
                        @Html.EditorFor(x => x.HeadAppointmentDate, new { title = "Headteacher date of appointment" })
                    }

                    @if (Model.EditPolicy.HeadEmailAddress)
                    {
                        <div class="form-group">
                            <label class="form-label">
                                @(Model.EditPolicy.HeadteacherLabel) email address
                            </label>
                            @Html.TextBoxFor(x => x.HeadEmailAddress, new { maxlength = 120, @class = "form-control", placeholder = "email address" })
                        </div>
                    }
                        

                    @if (Model.EditPolicy.AgeRange)
                    {
                        <div class="form-group range-group @Html.ValidationCssClassFor(x=>x.StatutoryHighAge) @Html.ValidationCssClassFor(x=>x.StatutoryLowAge)">
                            <fieldset>
                                <legend class="bold">Age range</legend>
                                @Html.ValidationMessageFor(x=>x.StatutoryLowAge)
                                @Html.ValidationMessageFor(x => x.StatutoryHighAge)

                                <span class="inline-form-control">
                                    <label for="agerange-from" class="form-label">
                                        Low
                                    </label>
                                    @Html.TextBoxFor(x => x.StatutoryLowAge, new { maxlength = 120, id = "agerange-from", @class = "form-control age-field", placeholder = "From", type = "number", min = 1, max = 99 })

                                </span>
                                <span class="inline-form-control">
                                    <label for="agerange-to" class="form-label">High</label>
                                    @Html.TextBoxFor(x => x.StatutoryHighAge, new { maxlength = 120, id = "agerange-to", @class = "form-control age-field", placeholder = "To", type = "number", min = 1, max = 99 })
                                </span>
                            </fieldset>
                        </div>
                    }

                   
                    @if (Model.EditPolicy.TypeId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.TypeId)">
                            <label class="form-label" for="TypeId">Establishment type</label>
                            @Html.DropDownListFor(x => x.TypeId, Model.EstablishmentTypes, "", new { @class = "form-control" })
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.TypeId)
                    }

                    @if (Model.EditPolicy.EducationPhaseId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.EducationPhaseId)">
                            <label for="EducationPhaseId" class="form-label">Phase of education</label>
                            @Html.ValidationMessageFor(x => x.EducationPhaseId)
                            @Html.DropDownListFor(x => x.EducationPhaseId, Model.EducationPhases, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.FurtherEducationTypeId)
                    {
                        <div class="form-group">
                            <label class="form-label" for="FurtherEducationTypeId">Further education type</label>
                            @Html.DropDownListFor(x => x.FurtherEducationTypeId, Model.FurtherEducationTypes, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.GenderId)
                    {
                        <div class="form-group">
                            <label class="form-label" for="GenderId">Gender of entry</label>
                            @Html.DropDownListFor(x => x.GenderId, Model.Genders, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.LocalAuthorityId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.LocalAuthorityId)">
                            <label for="LocalAuthorityId" class="form-label">Local authority</label>
                            @Html.ValidationMessageFor(x => x.LocalAuthorityId)
                            @Html.DropDownListFor(x => x.LocalAuthorityId, Model.LocalAuthorities, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.EstablishmentNumber)
                    {
                        <div class="form-group">
                            <fieldset class="inline-fields">
                                <legend class="bold">DfE number</legend>
                                <p class="form-hint">LA code and Establishment number</p>
                                <label class="form-label visually-hidden" for="lacode"> LA code</label>
                                <input type="text" id="lacode" class="form-control" size="5" disabled="disabled" value="@Model.LocalAuthorityId" />
                                <label class="form-label visually-hidden" for="establishmentnumber">Establishment number</label>
                                @Html.TextBoxFor(x => x.EstablishmentNumber, new { @class = "form-control" })
                            </fieldset>
                        </div>
                    }

                    @if (Model.EditPolicy.UKPRN)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.UKPRN)">
                            <label class="form-label" for="ukprn">UK provider reference number (UKPRN)</label>
                            @Html.ValidationMessageFor(x => x.UKPRN)
                            @Html.TextBoxFor(x => x.UKPRN, new { id = "ukprn", @class = "form-control", type = "text" })
                        </div>
                    }

                    @if (Model.EditPolicy.StatusId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.StatusId)">
                            <label for="status">Establishment status</label>
                            @Html.DropDownListFor(x => x.StatusId, Model.Statuses, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.AdmissionsPolicyId)
                    {
                        <div class="form-group">
                            <label for="admissionspolicyid" class="form-label">Admissions policy</label>
                            @Html.DropDownListFor(x => x.AdmissionsPolicyId, Model.AdmissionsPolicies, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.Contact_WebsiteAddress)
                    {
                        <div class="form-group">
                            <label for="Contact_WebsiteAddress" class="form-label">Website</label>
                            @Html.TextBoxFor(x => x.Contact_WebsiteAddress, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.Contact_TelephoneNumber)
                    {
                        <div class="form-group">
                            <label for="Contact_TelephoneNumber" class="form-label">Telephone</label>
                            @Html.TextBoxFor(x => x.Contact_TelephoneNumber, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.OfstedRatingDetails)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.OfstedRatingId)">
                            @Html.LabelFor(x => x.OfstedRatingId, "Ofsted rating", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.OfstedRatingId, Model.OfstedRatings, "", new { @class = "form-control" })
                        </div>

                            @Html.EditorFor(x => x.OfstedInspectionDate, new { title = "Ofsted last inspection" })

                            <div class="form-group">
                                <label for="ofsted-report" class="form-label">Ofsted report link</label>
                                <input type="text" class="form-control" id="ofsted-report" disabled="disabled" value="http://reports.ofsted.gov.uk/inspection-reports/find-inspection-report/provider/ELS/@Model.Urn" />
                            </div>
                    }

                    @if (Model.EditPolicy.InspectorateId)
                    {
                        <div class="form-group">
                            <label for="InspectorateId">Inspectorate</label>
                            @Html.DropDownListFor(x => x.InspectorateId, Model.Inspectorates, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.ProprietorName)
                    {
                        <div class="form-group">
                            <label for="proprietor" class="form-label">Proprietor's name</label>
                            @Html.TextBoxFor(x => x.ProprietorName, new { maxlength = 120, id = "proprietor", @class = "form-control" })
                        </div>
                    }
                

                    @if (Model.EditPolicy.ReligiousCharacterId)
                    {
                        <div class="form-group">
                            <label for="religious-character">Religious character</label>
                            @Html.DropDownListFor(x => x.ReligiousCharacterId, Model.ReligiousCharacters, "", new { @class = "form-control", id = "religious-character" })
                        </div>
                    }

                    @if (Model.EditPolicy.DioceseId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.DioceseId)">
                            <label for="diocese">Diocese</label>
                            @Html.DropDownListFor(x => x.DioceseId, Model.Dioceses, "", new { id = "diocese", @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.ReligiousEthosId)
                    {
                        <div class="form-group">
                            <label for="religious-ethos">Religious ethos</label>
                            @Html.DropDownListFor(x => x.ReligiousEthosId, Model.ReligiousEthoses, "", new { @class = "form-control", id = "religious-ethos" })
                        </div>
                    }

                    @if (Model.EditPolicy.ProvisionBoardingId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ProvisionBoardingId)">
                            <label for="boarders">Boarders</label>
                            @Html.DropDownListFor(x => x.ProvisionBoardingId, Model.BoardingProvisions, "", new { @class = "form-control", id = "boarders" })
                        </div>

                    }

                    @if (Model.EditPolicy.ProvisionNurseryId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ProvisionNurseryId)">
                            <label for="nursery">Nursery provision</label>
                            @Html.DropDownListFor(x => x.ProvisionNurseryId, Model.NurseryProvisions, "", new { @class = "form-control", id = "nursery" })
                        </div>
                    }

                    @if (Model.EditPolicy.ProvisionOfficialSixthFormId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ProvisionOfficialSixthFormId)">
                            <label for="sixthform">Official sixth form</label>
                            @Html.DropDownListFor(x => x.ProvisionOfficialSixthFormId, Model.OfficialSixthFormProvisions, "", new { @class = "form-control", id = "sixthform" })
                        </div>
                    }

                    @if (Model.EditPolicy.Capacity)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.Capacity)">
                            <label for="school-capacity">School capacity</label>
                            @Html.TextBoxFor(x => x.Capacity, new { id = "school-capacity", @class = "form-control", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.Section41ApprovedId)
                    {
                        <div class="form-group">
                            <label for="section-41">Section 41 approved</label>
                            @Html.DropDownListFor(x => x.Section41ApprovedId, Model.Section41ApprovedItems, "", new { @class = "form-control", id = "section-41" })
                        </div>
                    }

                    @if (Model.EditPolicy.OpenDate)
                    {
                        @Html.EditorFor(x => x.OpenDate, new { title = "Open date" })
                    }
                    
                    @if (Model.EditPolicy.ReasonEstablishmentOpenedId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ReasonEstablishmentOpenedId)">
                            <label for="reason-establishment-opened">Reason establishment opened</label>
                            @Html.ValidationMessageFor(x => x.ReasonEstablishmentOpenedId)
                            @Html.DropDownListFor(x => x.ReasonEstablishmentOpenedId, Model.ReasonsEstablishmentOpened, "", new { @class = "form-control", id = "reason-establishment-opened" })
                        </div>
                    }

                    @if (Model.EditPolicy.CloseDate)
                    {
                        @Html.EditorFor(x => x.CloseDate, new { title = "Close date" })
                    }

                    @if (Model.EditPolicy.ReasonEstablishmentClosedId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ReasonEstablishmentClosedId)">
                            <label for="reason-establishment-closed">Reason establishment closed</label>
                            @Html.DropDownListFor(x => x.ReasonEstablishmentClosedId, Model.ReasonsEstablishmentClosed, "", new { @class = "form-control", id = "reason-establishment-closed" })
                        </div>
                    }


                    @if (Model.EditPolicy.CCOperationalHoursId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCOperationalHoursId)">
                            @Html.LabelFor(x => x.CCOperationalHoursId, "Operational hours", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCOperationalHoursId)
                            @Html.DropDownListFor(x => x.CCOperationalHoursId, Model.CCOperationalHours, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCUnder5YearsOfAgeCount)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCUnder5YearsOfAgeCount)">
                            @Html.LabelFor(x => x.CCUnder5YearsOfAgeCount, "Number of under 5s", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCUnder5YearsOfAgeCount)
                            @Html.TextBoxFor(x => x.CCUnder5YearsOfAgeCount, new { maxlength = 120, type = "number", min = 0, @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCGovernanceId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCGovernanceId)">
                            @Html.LabelFor(x => x.CCGovernanceId, "Governance", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCGovernanceId)
                            @Html.DropDownListFor(x => x.CCGovernanceId, Model.CCGovernanceList, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCGovernanceDetail)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCGovernanceDetail)">
                            @Html.LabelFor(x => x.CCGovernanceDetail, "Governance detail", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCGovernanceDetail)
                            @Html.TextBoxFor(x => x.CCGovernanceDetail, new { maxlength = 240, @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCDeliveryModelId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCDeliveryModelId)">
                            @Html.LabelFor(x => x.CCDeliveryModelId, "Delivery model", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCDeliveryModelId)
                            @Html.DropDownListFor(x => x.CCDeliveryModelId, Model.CCDeliveryModels, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCGroupLeadId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCGroupLeadId)">
                            @Html.LabelFor(x => x.CCGroupLeadId, "Group lead centre", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCGroupLeadId)
                            @Html.DropDownListFor(x => x.CCGroupLeadId, Model.CCGroupLead, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCPhaseTypeId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCPhaseTypeId)">
                            @Html.LabelFor(x => x.CCPhaseTypeId, "Phase", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCPhaseTypeId)
                            @Html.DropDownListFor(x => x.CCPhaseTypeId, Model.CCPhaseTypes, "", new { @class = "form-control" })
                        </div>
                    }
                    
                    @if (Model.EditPolicy.CCDisadvantagedAreaId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCDisadvantagedAreaId)">
                            @Html.LabelFor(x => x.CCDisadvantagedAreaId, "Disadvantaged area", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCDisadvantagedAreaId)
                            @Html.DropDownListFor(x => x.CCDisadvantagedAreaId, Model.CCDisadvantagedAreas, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.CCDirectProvisionOfEarlyYearsId)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.CCDirectProvisionOfEarlyYearsId)">
                            @Html.LabelFor(x => x.CCDirectProvisionOfEarlyYearsId, "Direct provision of early years", new { @class = "form-label" })
                            @Html.ValidationMessageFor(x => x.CCDirectProvisionOfEarlyYearsId)
                            @Html.DropDownListFor(x => x.CCDirectProvisionOfEarlyYearsId, Model.CCDirectProvisionOfEarlyYears, "", new { @class = "form-control" })
                        </div>
                    }


                    @if (Model.EditPolicy.ProvisionSpecialClassesId)
                    {
                        <div class="form-group">
                            <label class="form-label" for="special-classes">
                                Special classes
                            </label>
                            @Html.DropDownListFor(x => x.ProvisionSpecialClassesId, Model.SpecialClassesProvisions, "", new { @class = "form-control", id = "special-classes" })
                        </div>
                    }

                    @if (Model.EditPolicy.FreeSchoolMealsNumber)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.FreeSchoolMealsNumber)">
                            @Html.LabelFor(x => x.FreeSchoolMealsNumber)
                            @Html.ValidationMessageFor(x => x.FreeSchoolMealsNumber)
                            @Html.TextBoxFor(x => x.FreeSchoolMealsNumber, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.FreeSchoolMealsPercentage)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.FreeSchoolMealsPercentage)">
                            @Html.LabelFor(x => x.FreeSchoolMealsPercentage)
                            @Html.ValidationMessageFor(x => x.FreeSchoolMealsPercentage)
                            @Html.TextBoxFor(x => x.FreeSchoolMealsPercentage, new { @class = "form-control" })
                        </div>
                    }


                    @if (Model.EditPolicy.SENStat)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.SENStat)
                            @Html.TextBoxFor(x => x.SENStat, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.SENNoStat)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.SENNoStat)
                            @Html.TextBoxFor(x => x.SENNoStat, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.Contact_EmailAddress)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.Contact_EmailAddress, "Email address")
                            @Html.TextBoxFor(x => x.Contact_EmailAddress, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.ContactAlt_EmailAddress)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.ContactAlt_EmailAddress, "Alternative email address")
                            @Html.TextBoxFor(x => x.ContactAlt_EmailAddress, new { @class = "form-control" })
                        </div>
                    }


                    @if (Model.EditPolicy.SENIds)
                    {
                        <div class="form-group sen-provision">
                            <fieldset>
                            <legend class="bold-small">Type of SEN provision</legend>
                            @foreach (var item in Model.SENProvisions)
                            {
                                <span class="checkbox-wrap">
                                    <input id="@nameof(Model.SENProvisions)_@item.Id" type="checkbox" name="@nameof(Model.SENIds)"
                                                value="@item.Id" @Html.Conditional(Model.SENIds != null && Model.SENIds.Contains(item.Id), "checked")/>
                                    <label class="edubase-button-checkbox" for="@nameof(Model.SENProvisions)_@item.Id">@item.Name</label>
                                </span>                                
                            }
                            </fieldset>
                        </div>
                        @* Flags the SEN list has been included in the request - DO NOT REMOVE. *@
                        <input type="hidden" name="SENList" value="1" />
                    }

                    @if (Model.EditPolicy.TeenageMothersProvisionId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.TeenageMothersProvisionId)
                            @Html.DropDownListFor(x => x.TeenageMothersProvisionId, Model.TeenageMothersProvisions, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.TeenageMothersCapacity)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.TeenageMothersCapacity)
                            @Html.TextBoxFor(x => x.TeenageMothersCapacity, new { @class = "form-control", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.ChildcareFacilitiesId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.ChildcareFacilitiesId)
                            @Html.DropDownListFor(x => x.ChildcareFacilitiesId, Model.ChildcareFacilitiesProvisions, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.PRUSENId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PRUSENId)
                            @Html.DropDownListFor(x => x.PRUSENId, Model.PRUSENOptions, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.PRUEBDId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PRUEBDId)
                            @Html.DropDownListFor(x => x.PRUEBDId, Model.PRUEBDOptions, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.PlacesPRU)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PlacesPRU)
                            @Html.TextBoxFor(x => x.PlacesPRU, new { @class = "form-control", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.PruFulltimeProvisionId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PruFulltimeProvisionId)
                            @Html.DropDownListFor(x => x.PruFulltimeProvisionId, Model.PruFulltimeProvisionOptions, "", new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.PruEducatedByOthersId)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PruEducatedByOthersId)
                            @Html.DropDownListFor(x => x.PruEducatedByOthersId, Model.PruEducatedByOthersOptions, "", new { @class = "form-control" })
                        </div>
                    }


                    @if (Model.EditPolicy.TypeOfResourcedProvisionId)
                    {
                        <div class="form-group">
                            <label for="resourced-provision-type">
                                Type of resourced provision
                            </label>
                            @Html.DropDownListFor(x => x.TypeOfResourcedProvisionId, Model.TypeOfResourcedProvisions, "", new { @class = "form-control", id = "resourced-provision-type" })
                        </div>
                    }

                    @if (Model.EditPolicy.ResourcedProvisionOnRoll)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ResourcedProvisionOnRoll)">
                            <label for="@nameof(Model.ResourcedProvisionOnRoll)">Resourced provision number on roll</label>
                            @Html.ValidationMessageFor(x => x.ResourcedProvisionOnRoll)
                            @Html.TextBoxFor(x => x.ResourcedProvisionOnRoll, new { @class = "form-control", id = "resourced-provision-headcount", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.ResourcedProvisionCapacity)
                    {
                        <div class="form-group @Html.ValidationCssClassFor(x => x.ResourcedProvisionCapacity)">
                            @Html.LabelFor(x => x.ResourcedProvisionCapacity, "Resourced provision capacity")
                            @Html.ValidationMessageFor(x => x.ResourcedProvisionCapacity)
                            @Html.TextBoxFor(x => x.ResourcedProvisionCapacity, new { @class = "form-control", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.SenUnitOnRoll)
                    {
                        <div class="form-group">
                            <label for="sen-unit-number">SEN unit number on roll</label>
                            @Html.TextBoxFor(x => x.SenUnitOnRoll, new { @class = "form-control", id = "sen-unit-number", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.SenUnitCapacity)
                    {
                        <div class="form-group">
                            <label for="sen-unit-capacity">SEN unit capacity</label>
                            @Html.TextBoxFor(x => x.SenUnitCapacity, new { @class = "form-control", id = "sen-unit-capacity", type = "number" })
                        </div>
                    }

                    @if (Model.EditPolicy.BSOInspectorateId)
                    {
                        <div class="form-group">
                            <label for="bso-inspectorate">BSO: Inspectorate name</label>
                            @Html.DropDownListFor(x => x.BSOInspectorateId, Model.BSOInspectorates, "", new { @class = "form-control", id = "bso-inspectorate" })
                        </div>
                    }

                    @if (Model.EditPolicy.BSOInspectorateReportUrl)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.BSOInspectorateReportUrl, "Inspectorate report")
                            @Html.TextBoxFor(x => x.BSOInspectorateReportUrl, new { @class = "form-control" })
                        </div>
                    }

                    @if (Model.EditPolicy.BSODateOfLastInspectionVisit)
                    {
                        @Html.EditorFor(x => x.BSODateOfLastInspectionVisit, new { title = "BSO: Date of last inspection" })
                    }

                    @if (Model.EditPolicy.BSODateOfNextInspectionVisit)
                    {
                        @Html.EditorFor(x => x.BSODateOfNextInspectionVisit, new { title = "BSO: Next inspection visit" })
                    }


                    <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveDetails">Save</button>
                    @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })

                </div>
            </div>
        </div>

        @if (Model.ChangesSummary != null)
        {
            Html.RenderPartial("Partials/_ConfirmChanges");

            <div class="button-row">
                <button class="button-grey button mobile-full-width" name="action" type="submit" value="@ViewModel.eAction.CancelChanges">&laquo; Back</button>
                <button type="submit" name="action" value="@ViewModel.eAction.Confirm" class="button mobile-full-width js-confirm">Confirm</button>

                @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey mobile-full-width", id = "cancel-edit" })
            </div>

            @section ViewScripts {

                <script>
                    $('#cancel-edit, .requires-conf-to-leave').okCancel({
                        ok: function() {
                            window.location = this.el.getAttribute('href');
                        },
                        title: 'Are you sure you want to leave this page?',
                        content: 'Any unsaved changes will be lost',
                        triggerEvent: 'click'
                    });

                    $(function () {
                        $("button.js-confirm").click(function (e) {
                            e.preventDefault();
                            var $el = $(this);
                            $el.prop('disabled', true);
                            $("<input>").attr("type", "hidden").attr("name", $el.attr("name")).attr("value", $el.attr("value")).insertAfter($el);
                            this.form.submit();
                        });
                    });

                </script>

            }

        }
        else
        {
            @section ViewScripts {
                <script>
                    var type2PhaseMap = @Html.Json(Model.Type2PhaseMap);
                    var phases = @Html.Json(Model.EducationPhases);

                    var $fields = $('#content').find('.form-control');
                    var exitAttached = false;

                    var registerUnloadNotification = function () {
                        if (!exitAttached) {
                            DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                            exitAttached = true;
                        }
                    };

                    $fields.on('change', registerUnloadNotification);

                    @if (Model.IsDirty)
                    {
                        <text>registerUnloadNotification();</text>
                    }

                    $(function() {
                        filterEstablishmentPhaseList();
                        $("select#TypeId").on("change keyup", filterEstablishmentPhaseList);
                    });

                    function filterEstablishmentPhaseList() {
                        var $typeSelector = $("#TypeId");
                        var $phaseSelector = $("select#EducationPhaseId");
                        var optionList = '<option value="">Please select</option>';
                        var typeId = $typeSelector.val();
                        var previousSelValue = $phaseSelector.val();
                        if(!isNaN(typeId)) {
                            var applicablePhases = type2PhaseMap[typeId];
                            if(applicablePhases && applicablePhases.length > 0) {
                                for (var i = 0; i < applicablePhases.length; i++) {
                                    var filtered = $.grep(phases, function(ele, y) { return parseInt(ele.value, 10) == applicablePhases[i]; });
                                    if(filtered != null && filtered.length > 0) {
                                        optionList += '<option value="' + filtered[0].value + '" '+ (previousSelValue == filtered[0].value ? "selected" : "") +'>' + filtered[0].text + '</option>';
                                    }
                                }
                            }
                        }
                        $phaseSelector.html(optionList);
                    }

                    

                </script>
            }
        }

    </div>
}

@if (Model.ShowDuplicateRecordError)
{
    @section validation {
        <div class="validation-summary-errors error-summary">
            <span>Duplicate record found</span>
            <ul>
                <li>An establishment is already registered with this name, local authority and postcode. To complete the record:</li>
                <li>
                    <a href="#Name">Please enter a different establishment name</a>
                    or
                    <a href="#LocalAuthorityId">Please enter a different local authority </a>
                    or
                    <a href="#Address_PostCode">Please enter a different postcode</a>
                </li>
            </ul>
        </div>
    }
}

@{
    ViewBag.Title = "Edubase: Manage academy openings";
    ViewBag.bodyClasses = "manage-academy-openings";
}


<div id="academy-opening-app" v-cloak>
    <div class="grid-row" v-show="!editRecord">
        <div class="column-full" >
            <h1 class="heading-large">Manage academy openings</h1>
            <div class="error-summary" v-show="searchError" v-cloak>
                <h2 class="heading-medium error-summary-heading" v-show="searchError">No matching establishment</h2>
                <ul>
                    <li class="error-message" v-show="searchError">
                        You have entered an invalid URN<br />
                        <a href="#academy-search-field">Please correct the URN to continue</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="column-full">
            <div class="horizontal-tabs-wrapper">
                <div class="tab-wrap">
                    <ul class="horizontal-tabs">
                        <li><a href="#calendar" class="horizontal-tab">Opening calendar</a></li>
                        <li><a href="#academy-search" class="horizontal-tab">Academy search</a></li>
                    </ul>
                </div>
                
                <div class="tab-content-wrapper horizontal-tabs-content" v-cloak>
                    <div id="calendar" class="tab-content">
                        <div id="academy-listing-app">
                            <div class="form-group month-selector">
                                <label class="form-label">
                                    Opening date
                                </label>
                                <select class="form-control" v-model="selectedDate" v-on:change="buildDatePages" id="opening-date-filter">
                                    <option value="0">All months</option>
                                </select>
                            </div>                            
                            
                            <div>
                                <div class="pagination">
                                    <p class="pagination-info">
                                        Showing
                                        <span class="pagination-range">
                                            {{ paginationDescription }}
                                        </span>
                                        of
                                        <span class="result-count">{{currentCount}}</span>
                                    </p>
                                    <ul class="pagination-links">
                                        <li v-if="currentPage > 0"><a href="#" class="pagination-prev" v-on:click.prevent="setCurrentPage(currentPage -1)">Previous</a></li>
                                        <li v-for="(page, index) in pages">
                                            <span v-if="index === currentPage" class="numeric-pagination go-nowhere">{{ index + 1 }}</span>
                                            <a v-else href="#" class="numeric-pagination" v-on:click.prevent="setCurrentPage(index)">{{ index + 1 }}</a>
                                        </li>
                                        <li v-if="currentPage < pages.length -1"><a href="#" class="pagination-next" v-on:click.prevent="setCurrentPage(currentPage +1)">Next</a></li>
                                    </ul>
                                </div>
                            </div>
                            
                            <openings-table :pages="pages" :current-page="currentPage" :edit-estab="editEstab"></openings-table>
                            
                            <div class="pagination">
                                <p class="pagination-info">
                                    Showing
                                    <span class="pagination-range">
                                        {{ paginationDescription }}
                                    </span>
                                    of
                                    <span class="result-count">{{currentCount}}</span>
                                </p>
                                <ul class="pagination-links">
                                    <li v-if="currentPage > 0"><a href="#" class="pagination-prev" v-on:click.prevent="setCurrentPage(currentPage -1)">Previous</a></li>
                                    <li v-for="(page, index) in pages">
                                        <span v-if="index === currentPage" class="numeric-pagination go-nowhere">{{ index + 1 }}</span>
                                        <a v-else href="#" class="numeric-pagination" v-on:click.prevent="setCurrentPage(index)">{{ index + 1 }}</a>
                                    </li>
                                    <li v-if="currentPage < pages.length -1"><a href="#" class="pagination-next" v-on:click.prevent="setCurrentPage(currentPage +1)">Next</a></li>
                                </ul>
                            </div>

                        </div>
                    </div>
                    <div id="academy-search" class="tab-content">
                        <!-- search app -->
                        <div id="academy-search-app">
                            <form>
                                <div v-bind:class="['form-group', searchError? 'error' : '']">
                                    <label class="form-label" for="academy-search-field">
                                        Enter establishment URN
                                    </label>
                                    <span class="error-message" v-show="searchError">Please correct the URN</span>
                                    <input type="text" class="form-control  desktop-inline" id="academy-search-field" v-model.trim="searchUrn" />
                                    
                                    <input type="submit" class="button inline-submit" value="Find establishment" v-on:click.prevent="validateUrn" />
                                </div>
                                
                            </form>
                            
                            <div v-show="presentDetail" class="openings-single-result">
                                <h2 class="heading-small">Establishment Found</h2>
                                <div class="urn-result">
                                    <h4 class="heading-small">Opening date: {{od.displayDate }}</h4>
                                    <dl>
                                        <dt>URN:</dt>
                                        <dd><a href="#">{{ od.Urn }}</a></dd>
                                        <dt>Establishment name:</dt>
                                        <dd>{{updateName}}</dd>
                                        <dt>Establishment type:</dt>
                                        <dd>{{ od.establishmentType }}</dd>
                                        <dt>Predecessor URN:</dt>
                                        <dd><a href="#">{{ od.predecessorUrn }}</a></dd>
                                        <dt>Predecessor name:</dt>
                                        <dd>{{ od.predecessorName }}</dd>
                                    </dl>
                                    <a href="#" class="button button-grey" v-on:click.prevent="editEstab(od.Urn)">Edit</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>        
    </div>
    <div class="grid-row" v-show="editRecord" v-cloak>
        <div class="column-full">
            <h1 class="heading-large">Edit opening detail</h1>
        </div>
        <div class="column-half">
            <div class="button-row">
                <input type="submit" class="button" value="Save" v-on:click.prevent="updateRecord"/>
                <a href="#" class="button button-grey" v-on:click="editRecord=false, searchUrn='', presentDetail=false">Cancel</a>
            </div>
            <div class="form-group">
                <label class="form-label">URN</label>
                <input class="form-control" type="text" :value="od.Urn" disabled="disabled" />
            </div>
            
            <div v-bind:class="['form-group',  updateNameError ? 'error' : '' ]">                
                <label class="form-label">Establishment name </label>
                <span class="error-message" v-show="updateNameError">Please check the new establishment name</span>
                <input class="form-control" type="text" v-model="updateName"/>
            </div>
            
            <div class="form-group">
                <label class="form-label">Establishment type</label>
                <input class="form-control" type="text" :value="od.establishmentType" disabled="disabled" />
            </div>
            
            <div v-bind:class="['form-group range-group', openDateError ? 'error' : '' ]">
                <fieldset id="merger-date">
                    <span v-bind:class="['error-message']" v-show="openDateError">Please enter the establishment opening date</span>
                    <legend>Opening date</legend>
                    <div class="form-hint">For example, 20 03 2003</div>

                    <span class="inline-form-control">
                        <label for="opendate-day">Day</label>
                        <input class="form-control date-text-day" id="opendate-day" name="OpenDate.Day" type="text" v-model="updateDateDay">

                    </span>
                    <span class="inline-form-control">
                        <label for="opendate-month">Month</label>
                        <input class="form-control date-text-month" id="opendate-month" name="OpenDate.Month" type="text" v-model="updateDateMonth">

                    </span>
                    <span class="inline-form-contol">
                        <label for="opendate-year">Year</label>
                        <input class="form-control date-text-year" id="opendate-year" name="OpenDate.Year" type="text" v-model="updateDateYear">
                    </span>
                </fieldset>
            </div>
            
            <div class="form-group">
                <label class="form-label">Predecessor URN</label>
                <input type="text" class="form-control" disabled="disabled" :value="od.predecessorUrn" />
            </div>
            
            <div class="form-group">
                <label class="form-label">Predecessor name</label>
                <input type="text" class="form-control" disabled="disabled" :value="od.predecessorName" />
            </div>
            
            <div class="button-row lower">
                <input type="submit" class="button" value="Save" v-on:click.prevent="updateRecord" />
                <a href="#" class="button button-grey" v-on:click="editRecord=false, searchUrn='',presentDetail=false">Cancel</a>
            </div>
        </div>
    </div>

</div>

@section ViewScripts {



    <script type="text/x-template" id="table-template">
    <table class="academy-openings" id="openings-table">
        <thead>
            <tr>                
                <th scope="col" class="cell-openingdate">Opening date</th>
                <th scope="col" class="cell-urn">URN</th>
                <th scope="col" class="cell-estabname">Establishment name</th>
                <th scope="col" class="cell-estabtype">Establishment type</th>
                <th scope="col" class="cell-predecessor-urn">Predecessor URN</th>
                <th scope="col" class="cell-predecessor-name">Predecessor name</th>
                <td scope="col" class="cell-edit">&nbsp;</td>
            </tr>
        </thead>
        <tbody v-if="pages.length > 0">
            <tr v-for="(entry, index) in page">                
                <td aria-label="Opening date:" class="cell-openingdate"> {{entry.displayDate}} </td>
                <td aria-label="URN:"><a v-bind:href="detailUrl(entry.Urn)">{{entry.Urn}}</a></td>
                <td aria-label="Establishment name:">{{entry.name}}</td>
                <td aria-label="Establishment type:">{{entry.establishmentType}}</td>
                <td aria-label="Predecessor URN:"><a v-bind:href="detailUrl(entry.predecessorUrn)">{{entry.predecessorUrn}}</a></td>
                <td aria-label="Predecessor name:">{{entry.predecessorName}}</td>
                <td class="cell-edit"><a href="#" v-on:click.prevent="editEstab(entry.Urn)">Edit</a></td>
            </tr>
        </tbody>
        <tbody v-else>
            <tr>
                <td colspan="7">
                    <p> [ NO RESULTS MESSAGE ] </p>
                </td>
            </tr>
        </tbody>
    </table>

</script>

    <script>
        var academyOpeningsJson,
            uniqueDates = [],
            academyOpenings,
            i,
            len,
            monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
                'November', 'December'
            ],
            getJson = $.getScript('/public/assets/scripts/JSON/academyOpenings.stub.js',
                function(data) {
                    academyOpeningsJson = JSON.parse(data);
                    return academyOpeningsJson;
                }
            );


        function buildPages(changes, pageSize) {
            var count = 0,
                changesPages = [];
            for (count; count < changes.length;) {
                var page = changes.slice(count, (count + pageSize));

                changesPages.push(page);
                count += pageSize;
            }

            return changesPages;
        }

        Vue.component('openings-table',
           {
               template: '#table-template',
               props: {
                   currentPage: {
                       type: Number,
                       default: 0
                   },
                   maxPageSize: {
                       type: Number,
                       default: 10
                   },
                   pages: Array,
                   editEstab: Function
               },

               computed: {
                   page: function () {
                       return this.pages[this.currentPage];
                   }
               },
               methods: {
                   detailUrl: function (urn) {
                       return '/Establishment/Details/' + urn;
                   }
               }
           });



        $.when(getJson)
            .done(function () {

                function sortOpenings() {
                    academyOpeningsJson.sort(function (a, b) {
                        var aDate = new Date(a.openingDate),
                            bDate = new Date(b.openingDate),
                            sortOrder = aDate - bDate;

                        if (sortOrder === 0) {
                            sortOrder = a.name > b.name ? 1 : -1;
                        }
                        return sortOrder;

                    });
                }

                sortOpenings();
                
                var openingDates = [];

                for (i = 0, len = academyOpeningsJson.length; i < len; i++) {
                    var openingDate = new Date(academyOpeningsJson[i].openingDate);
                    var tempObj = {},
                        year = openingDate.getFullYear(),
                        month = openingDate.getMonth(),
                        sorter = month + '.' + year;

                    tempObj.sorter = sorter;
                    tempObj.month = month;
                    tempObj.year = year;

                    openingDates.push(tempObj);
                }

                var spotted = {};
                uniqueDates = openingDates.filter(function(item) {
                    return spotted.hasOwnProperty(item.sorter) ? false : (spotted[item.sorter] = true);
                });

                var frag = document.createDocumentFragment();

                

                for (i = 0, len = uniqueDates.length; i < len; i++) {
                    var option = document.createElement('option'),
                        d = uniqueDates[i];

                    option.value = d.sorter;
                    option.innerHTML = monthNames[d.month] + ' ' + d.year;

                    frag.appendChild(option);
                }

                document.getElementById('opening-date-filter').appendChild(frag);

                academyOpenings = new Vue({
                    el: '#academy-opening-app',
                    data: {
                        openingAcademies: academyOpeningsJson,
                        selectedDate: '0',
                        initialRecordCount: academyOpeningsJson.length,
                        currentPage: 0,
                        pageSize: 50,
                        pages: buildPages(academyOpeningsJson, 50),
                        currentCount: academyOpeningsJson.length,
                        searchError: false,
                        searchUrn: '',
                        editRecord: false,
                        openDateError: false,
                        updateName: '',
                        updateNameError: false,
                        updateDateDay: '',
                        updateDateMonth: '',
                        updateDateYear: '',
                        od: {},
                        presentDetail: false
                        
                    },
                    methods: {
                        setCurrentPage: function (pageIndex) {
                            this.currentPage = pageIndex;
                        },
                        editEstab: function (urn) {
                            this.searchUrn = urn;
                            this.openingDetail();
                            this.editRecord = true;
                            this.searchError = false;
                        },
                        validUrns: function () {
                            var urns = [],
                                i = 0,
                                len = this.openingAcademies.length;
                            for (i; i < len; i++) {
                                urns.push(this.openingAcademies[i].Urn);
                            }

                            return urns;
                        },
                        validateUrn: function() {
                            var validUrns = this.validUrns();                            
                            this.searchError = validUrns.indexOf(this.searchUrn) === -1;
                            if (!this.searchError) {
                                // this.editEstab(this.searchUrn);
                                this.openingDetail();
                                this.presentDetail = true;
                            }
                        },
                        updateRecord: function() {
                            var d = parseInt(this.updateDateDay, 10),
                                m = parseInt(this.updateDateMonth, 10),
                                y = parseInt(this.updateDateYear, 10);

                            this.updateNameError = this.updateName.length < 1;

                            this.openDateError = (
                                d < 1 || d > 31 || this.updateDateDay === '' ||
                                m < 1 || m > 12 || this.updateDateMonth === '' ||
                                y < 2000 || y > 2100 || this.updateDateYear === '');

                            if (!this.updateNameError && !this.openDateError) {
                                var urn = this.searchUrn;
                                var record = this.openingAcademies.filter(function(estab) {
                                    return parseInt(estab.Urn, 10) === parseInt(urn, 10);
                                });

                                record[0].name = this.updateName;
                                record[0].displayDate = [this.updateDateDay, this.updateDateMonth, this.updateDateYear].join('/');
                                record[0].openingDate = new Date(this.updateDateYear, this.updateDateMonth - 1, this.updateDateDay).toISOString();

                                this.searchUrn = '';
                                
                                this.editRecord = false;

                                sortOpenings();
                                var self = this;
                                window.setTimeout(function() {
                                    self.openingAcademies = academyOpeningsJson;
                                    self.pages = buildPages(self.openingAcademies, self.pageSize);
                                    self.selectedDate = 0;
                                }, 500);
                                
                            }
                        },
                        buildDatePages: function () {
                           var dateParts = this.selectedDate.split('.'),
                               month = parseInt(dateParts[0], 10),
                               year = parseInt(dateParts[1], 10);

                            if (isNaN(month) || isNaN(year)) { // user selected all
                                this.pages = buildPages(this.openingAcademies, this.pageSize);
                                this.currentCount = this.openingAcademies.length;
                                return;
                            }

                            var datePages = this.openingAcademies.filter(function (opening) {
                                var oDateParts = opening.displayDate.split('/'),
                                    oDateMonth = parseInt(oDateParts[1], 10) - 1,
                                    oDateYear = parseInt(oDateParts[2], 10);

                                if (oDateMonth === month && oDateYear === year) {
                                    return true;
                                }
                                return false;
                            });

                            this.pages = buildPages(datePages, this.pageSize);
                            this.currentCount = datePages.length;
                            this.currentPage = 0;
                        },
                        openingDetail: function () {
                            var urn = parseInt(this.searchUrn, 10);
                            if (isNaN(urn)) {
                                return false;
                            }
                            var academy = this.openingAcademies.filter(function (estab) {
                                return parseInt(estab.Urn, 10) === urn;
                            });
                            var openDate = academy[0].displayDate.split('/');

                            this.updateName = academy[0].name;
                            this.updateDateDay = openDate[0];
                            this.updateDateMonth = openDate[1];
                            this.updateDateYear = openDate[2];

                            this.od = academy[0];
                            return this.od;
                        }
                    },
                    computed: {
                        paginationDescription: function () {
                            var starting = this.currentPage * this.pageSize + 1,
                                ending = this.currentPage * this.pageSize + this.pageSize;

                            ending = ending > this.currentCount ? this.currentCount : ending;

                            return starting + " - " + ending;
                        }
                    }

                });
                $('.horizontal-tabs-wrapper').tabs();
                $(window).on('tabChange', function() {
                    academyOpenings.searchError = false;
                });

            });

        
        

    </script>
}

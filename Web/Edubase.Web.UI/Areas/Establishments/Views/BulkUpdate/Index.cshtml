@using Microsoft.Ajax.Utilities
@model BulkUpdateViewModel

<div class="breadcrumbs">
    <ul>
        <li>
            @Html.ActionLink("Home", "Index", "Search", new { area = "" }, null)
        </li>
        <li>
            @Html.ActionLink("Tools", "Index", "Tools", new { area = "" }, null)
        </li>
    </ul>
</div>

@using (Html.BeginRouteForm("ProcessBulkUpdate", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="grid-row">
        <div class="column-full">
            @if (Model.Result != null && Model.Result.IsCompleted() && !Model.Result.IsFailure() && !Model.Result.CompletedWithErrors())
            {
                <div class="pending-updates-message js-dismiss-message">
                    <div class="tick"></div>
                    <p>Your bulk update was successful.</p>
                    <a class="cross" href="#"><span class="visually-hidden">Dismiss notification</span></a>
                </div>
            }
            <h1 class="heading-xlarge">Establishment bulk update</h1>

            <p class="text">
                Update establishment records by uploading a CSV or XLSX file. Multiple column updates must be in XLSX format.
            </p>
        </div>
        <div class="column-full">

            <div class="expanding-content-wrapper" data-update-text="false">
                <a href="#" class="expanding-content-trigger">
                    Help with preparing files
                </a>
                <div class="expanding-content panel-indent">
                    <p>For a step by step guide to prepare documents for bulk update please download this file.</p>
                    <p class="download-list-item">
                        <a href="https://edubasepr.blob.core.windows.net/guidance/Establishment_Bulk_Update_Guide.pdf" target="_blank" rel="nofollow" class="js-track" data-track="bulkUpdate|establish-bulk-update|download">Establishment bulk update guidance PDF, 353KB </a>
                    </p>
                </div>
            </div>

            @if (Model.Result != null)
            {
                if (Model.Result.Errors.Any(x => x.Code == "error.maxRowsLimitReached.payload.bulkUpload"))
                {
                    <div class="validation-summary-errors error-summary">
                        <span>Information missing or incorrect</span>
                        <p>The file size is too large. Please use a file size smaller than 1MB. There are also limits of:
                            <ul class="list-bullet inside">
                                <li>
                                    5,000 rows per file for back office users
                                </li>
                                <li>
                                    1,000 rows per file for EFADO, SFC and DDCE users
                                </li>
                                <li>
                                    200 rows per file for establishment and MAT users
                                </li>
                            </ul>
                        </p>
                    </div>
                }
                else if (Model.Result.Errors.Any(x => x.Code == "error.mismatchType.EduBaseBulkUpload-MultipleColumnsfile.type.bulkUpload"))
                {
                    <div class="validation-summary-errors error-summary">
                        <span>Information missing or incorrect</span>
                        <p>
                            Multiple column files must be XLSX and bulk upload files can be XLSX or tab delimited text files. For more information, see <a href="/guidance">the Establishment bulk update guidance document</a>
                        </p>
                    </div>
                }
                else if (Model.Result.Errors.Any())
                {
                    <div class="validation-summary-errors error-summary">
                        <span>Information missing or incorrect</span>
                        <p>
                            @Model.Result.Errors.First().Message
                        </p>
                    </div>
                }
                else
                {
                    if (Model.Result.IsFailure())
                    {
                        <div class="form-group error" id="error-log">
                            <p class="error-message">Please download the error log to correct your data before resubmitting</p>
                            <p class="download-list-item">
                                <a href="@Model.Result.ErrorLogFile.Url">@Model.Result.ErrorLogFile.Name</a>
                            </p>
                        </div>
                    }

                    if (Model.Result.CompletedWithErrors())
                    {
                        <div class="form-group error" id="error-log">
                            <p class="error-message">@Model.Result.RowErrors rows encountered errors during import. Please download the error log to correct your data before resubmitting</p>
                            <p class="download-list-item">
                                <a href="@Model.Result.ErrorLogFile.Url">@Model.Result.ErrorLogFile.Name</a>
                            </p>
                        </div>
                    }
                }
            }

        </div>
        <div class="column-half">
            <div class="form-group push--bottom @Html.ValidationCssClassFor(x => x.BulkFile)">
                <label for="BulkFile" class="form-label">Upload a file</label>
                @Html.ValidationMessageFor(x => x.BulkFile)
                @Html.TextBoxFor(x => x.BulkFile, new { type = "file" })
            </div>

            <div class="form-group push--bottom @Html.ValidationCssClassFor(x => x.BulkUpdateType)">
                <label class="form-label" for="BulkUpdateType">
                    Select file type
                </label>
                @Html.ValidationMessageFor(x => x.BulkUpdateType)
                @Html.EnumDropDownListFor(x => x.BulkUpdateType, "Select...", new { @class = "form-control" })
            </div>

            @Html.EditorFor(m => m.EffectiveDate, new { title = "Effective date (optional)" })

            @if (Model.CanOverrideCRProcess)
            {
                <span class="form-group checkbox-wrap push--top">
                    @Html.CheckBoxFor(x => x.OverrideCRProcess, new { @id = "override-cr" })
                    @Html.LabelFor(x => x.OverrideCRProcess, "Override CR", new { @for = "override-cr", @class = "edubase-button-checkbox" })
                </span>
                <br /><br />
            }

        </div>
        <div class="column-full">
            <button type="submit" class="button mobile-full-width" value="Submit">Submit</button>
            <a href="/Tools" class="button button-secondary cancel mobile-full-width">Cancel</a>
        </div>

</div>
}


@section ViewScripts{
    <script>
        $(function () {
            var toggle = function () { $("button[type='submit']").prop("disabled", $("#BulkUpdateType").val() == "") };
            $("#BulkUpdateType").on("change", toggle);
            toggle();
        });
    </script>
}

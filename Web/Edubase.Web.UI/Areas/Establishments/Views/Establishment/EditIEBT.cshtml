@using System.Linq
@using ViewModel = Edubase.Web.UI.Models.EditEstablishmentModel
@using System.Linq.Expressions
@model ViewModel
@{
    if (Model.ChangesSummary == null)
    {
        Layout = "_EditLayoutPage.cshtml";
    }
}

@using (Html.BeginForm())
{
    <div class="tab-content" id="edit-iebt">

        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Urn)
        @Html.HiddenFor(x => x.Name)
        @Html.HiddenFor(x => x.SelectedTab)
        @Html.HiddenFor(x => x.LegalParentGroupToken)

        <div class="@Html.Conditional(Model.ChangesSummary != null, "hidden")">
        
            <div class="column-half">

                <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveIEBT">Save</button>
                @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })

                <div class="form-group first">
                    <label for="notes">Notes</label>
                    @Html.TextAreaFor(x => x.Notes, new { @class = "form-control", rows = "10" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Associations)
                
                    @Html.TextAreaFor(x => x.Associations, new { @class = "form-control", rows = "10" })
                </div>

                
                @Html.EditorFor(x => x.DateOfTheLastBridgeVisit, new { title = "Date of last Bridge visit" })
                @Html.EditorFor(x => x.DateOfLastOfstedVisit, new { title = "Date of last Ofsted visit" })
                @Html.EditorFor(x => x.DateOfTheLastISIVisit, new { title = "Date of last ISI visit" })
                @Html.EditorFor(x => x.DateOfTheLastWelfareVisit, new { title = "Date of last welfare visit"})
                @Html.EditorFor(x => x.DateOfTheLastFPVisit, new { title = "Date of last FP visit"})
                @Html.EditorFor(x => x.DateOfTheLastSISVisit, new { title = "Date of last SIS visit"})
                @Html.EditorFor(x => x.NextOfstedVisit, new { title = "Next Ofsted visit"})
                @Html.EditorFor(x => x.NextGeneralActionRequired, new { title = "Next general action required"})
                @Html.EditorFor(x => x.NextActionRequiredByWEL, new { title = "Next action required by WEL"})
                @Html.EditorFor(x => x.NextActionRequiredByFP, new { title = "Next action required by FP"})

                <div class="form-group">
                    <label for="InspectorateId">Inspectorate</label>
                    @Html.DropDownListFor(x => x.InspectorateId, Model.Inspectorates, "", new { @class = "form-control" })
                </div>

                <div class="form-group">
                    <label for="InspectorateId">Independent school type</label>
                    @Html.DropDownListFor(x => x.IndependentSchoolTypeId, Model.IndependentSchoolTypes, "", new { @class = "form-control" })
                </div>

                @RenderTextBox("Charity organisation", x => x.CharityOrganisation)
                @RenderNumericTextBox("Charity registration number", x => x.CharityRegistrationNumber)
                @RenderNumericTextBox("Total number of full time pupils", x => x.TotalNumberOfFullTimePupils)
                @RenderNumericTextBox("Total number of part time pupils", x => x.TotalNumberOfPartTimePupils)
                @RenderNumericTextBox("Total number of pupils of compulsory school age", x => x.TotalNumberOfPupilsOfCompulsorySchoolAge)
                @RenderNumericTextBox("Total number of special pupils under a SEN statement/ECHP", x => x.SENStat)
                @RenderNumericTextBox("Number of special pupils not under a SEN statement/EHCP", x => x.SENNoStat)
                @RenderNumericTextBox("Total number of pupils in public care", x => x.TotalNumberOfPupilsInPublicCare)
                
                @RenderNumericTextBox("PT boys (aged 2 and under)", x => x.PTBoysAged2AndUnder)
                @RenderNumericTextBox("PT boys (aged 3)", x => x.PTBoysAged3)
                @RenderNumericTextBox("PT boys (aged 4a)", x => x.PTBoysAged4A)
                @RenderNumericTextBox("PT boys (aged 4b)", x => x.PTBoysAged4B)
                @RenderNumericTextBox("PT boys (aged 4c)", x => x.PTBoysAged4C)
                @RenderNumericTextBox("Total number of boys in boarding schools", x => x.TotalNumberOfBoysInBoardingSchools)

                @RenderNumericTextBox("PT girls (aged 2 and under) ", x => x.PTGirlsAged2AndUnder)
                @RenderNumericTextBox("PT girls (aged 3)", x => x.PTGirlsAged3)
                @RenderNumericTextBox("PT girls (aged 4a)", x => x.PTGirlsAged4A)
                @RenderNumericTextBox("PT girls (aged 4b)", x => x.PTGirlsAged4B)
                @RenderNumericTextBox("PT girls (aged 4c)", x => x.PTGirlsAged4C)
                @RenderNumericTextBox("Total number of girls in boarding schools ", x => x.TotalNumberOfGirlsInBoardingSchools)

                @RenderNumericTextBox("Total number of full time staff", x => x.TotalNumberOfFullTimeStaff)
                @RenderNumericTextBox("Total number of part time staff", x => x.TotalNumberOfPartTimeStaff)


                @RenderNumericTextBox("Lowest annual rate for day pupils", x => x.LowestAnnualRateForDayPupils)
                @RenderNumericTextBox("Highest annual rate for day pupils", x => x.HighestAnnualRateForDayPupils)
                @RenderNumericTextBox("Lowest annual rate for boarding pupils", x => x.LowestAnnualRateForBoardingPupils)
                @RenderNumericTextBox("Highest annual rate for boarding pupils", x => x.HighestAnnualRateForBoardingPupils)


                <div class="form-group">
                    @Html.LabelFor(x => x.BoardingEstablishmentId, "Boarding establishment")
                    @Html.DropDownListFor(x => x.BoardingEstablishmentId, Model.BoardingEstablishment, "", new { @class = "form-control" })
                </div>
                
                <fieldset class="toggle-panels" id="proprietor-radios">
                    <legend class="bold-legend">Proprietor</legend>
                    <span class="radio-button-wrap">
                        <input type="radio" name="proprietor-type" value="single" id="proprietor-type-single" data-toggle-panel="#proprietor-single" />
                        <label class="edubase-button-radio" for="proprietor-type-single">
                            Single proprietor
                        </label>
                    </span>
                    <span class="radio-button-wrap">
                        <input type="radio" name="proprietor-type" value="body" id="proprietor-type-body" data-toggle-panel="#proprietor-body" />
                        <label class="edubase-button-radio" for="proprietor-type-body">
                            Proprietory body
                        </label>
                    </span>
                </fieldset>
                <div id="proprietor-single" class="panel-indent edu-edit-panel">
                    <h4 class="heading-small">Proprietor details</h4>
                    <div id="cloneable-fields-container">
                        @RenderTextBox("Preferred job title", x => x.ProprietorsPreferredJobTitle)
                        @RenderTextBox("Name", x => x.ProprietorName, "cloneable")
                        @RenderTextBox("Street", x => x.ProprietorsStreet, "cloneable")
                        @RenderTextBox("Locality", x => x.ProprietorsLocality, "cloneable")
                        @RenderTextBox("Address 3", x => x.ProprietorsAddress3, "cloneable")
                        @RenderTextBox("Town", x => x.ProprietorsTown, "cloneable")
                        
                        <div class="form-group cloneable">
                            <label for="ProprietorsCountyId" class="form-label">County</label>
                            @Html.DropDownListFor(x => x.ProprietorsCountyId, Model.Counties, "", new { @class = "form-control" })
                        </div>

                        @RenderTextBox("Postcode", x => x.ProprietorsPostcode, "cloneable",  "postcode-field")
                        @RenderTextBox("Telephone number", x => x.ProprietorsTelephoneNumber, "cloneable")
                        @RenderTextBox("Fax number", x => x.ProprietorsFaxNumber, "cloneable")
                        @RenderTextBox("Email", x => x.ProprietorsEmail, "cloneable")
                    </div>
                   

                </div>
                <div id="proprietor-body" class="panel-indent edu-edit-panel">
                    <h4 class="heading-small">Proprietor body details</h4>
                    <div id="field-clone-target">
                        
                    </div>
                    
                    
                    <h4 class="heading-small edu-section-break">Chair of the proprietary body details</h4>

                    @RenderTextBox("Preferred job title", x => x.ChairOfProprietorsBodyPreferredJobTitle)
                    @RenderTextBox("Name", x => x.ChairOfProprietorsBodyName)
                    @RenderTextBox("Street", x => x.ChairOfProprietorsBodyStreet)
                    @RenderTextBox("Locality", x => x.ChairOfProprietorsBodyLocality)
                    @RenderTextBox("Address 3", x => x.ChairOfProprietorsBodyAddress3)
                    @RenderTextBox("Town", x => x.ChairOfProprietorsBodyTown)
                    
                    <div class="form-group cloneable">
                        <label for="ChairOfProprietorsBodyCountyId" class="form-label">County</label>
                        @Html.DropDownListFor(x => x.ChairOfProprietorsBodyCountyId, Model.Counties, "", new { @class = "form-control" })
                    </div>

                    @RenderTextBox("Postcode", x => x.ChairOfProprietorsBodyPostcode, null, "postcode-field")
                    @RenderTextBox("Telephone number", x => x.ChairOfProprietorsBodyTelephoneNumber)
                    @RenderTextBox("Fax number", x => x.ChairOfProprietorsBodyFaxNumber)
                    @RenderTextBox("Email", x => x.ChairOfProprietorsBodyEmail)

                </div>
                
                

                <div class="form-group">
                    @Html.LabelFor(x => x.AccommodationChangedId, "Accommodation changes")
                    @Html.DropDownListFor(x => x.AccommodationChangedId, Model.AccommodationChanges, "", new { @class = "form-control" })
                </div>

                <div class="button-row">
                    <button type="submit" class="button mobile-full-width" name="action" value="@ViewModel.eAction.SaveIEBT">Save</button>
                    @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-grey cancel mobile-full-width" })
                </div>
                

            </div>

        </div>

        @if (Model.ChangesSummary != null)
        {
            Html.RenderPartial("Partials/_ConfirmChanges");
            <div class="button-row">
                <button class="button-grey button mobile-full-width" name="action" type="submit" value="@ViewModel.eAction.CancelChanges">&laquo; Back</button>
                <button type="submit" name="action" value="@ViewModel.eAction.Confirm" class="button mobile-full-width">Confirm</button>

                @Html.ActionLink("Cancel", "Details", "Establishment", new {id = Model.Urn}, new {@class = "button button-grey mobile-full-width", id = "cancel-edit"})
            </div>

                @section ViewScripts {

                    <script>
                        $('#cancel-edit, .requires-conf-to-leave').okCancel({
                            ok: function() {
                                window.location = this.el.getAttribute('href');
                            },
                            title: 'Are you sure you want to leave this page?',
                            content: 'Any unsaved changes will be lost',
                            triggerEvent: 'click'
                        });
                        $('#Notes').textCount({ maxLength: 4000 });
                        $('#Associations').textCount({ maxLength: 1000 });
                    </script>
                }
        }
        else
        {
            @section ViewScripts {
                <script>
                    var $fields = $('#content').find('.form-control');
                    var exitAttached = false;

                    $fields.on('change', function () {
                        if (!exitAttached) {
                            DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                            exitAttached = true;
                        }
                    });
                    $('#Notes').textCount({ maxLength: 4000 });
                    $('#Associations').textCount({ maxLength: 1000 });
                </script>
                
            }
        }

    </div>
}

@helper RenderTextBox(string label, Expression<Func<ViewModel, string>> fnc, string wrapperClass = "", string fieldClasses = "")
{
    var id = label.Replace(" ", "").ToLower();
    var classes = "form-control " + fieldClasses;
    <div class="form-group @wrapperClass">
        @Html.LabelFor(fnc, label, new { @class = "form-label" })
        @Html.TextBoxFor(fnc, new { @class = classes })
    </div>
}

@helper RenderNumericTextBox(string label, Expression<Func<ViewModel, int?>> fnc)
{
    var id = label.Replace(" ", "").ToLower();
    <div class="form-group">
        @Html.LabelFor(fnc, label, new { @class = "form-label" })
        @Html.TextBoxFor(fnc, new { @class = "form-control", type = "text" })
    </div>
}
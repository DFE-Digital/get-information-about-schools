@model SearchModel
@{
    var startResult = @Model.StartIndex + 1;
    var endResult = (@Model.StartIndex + @Model.PageSize > @Model.Count) ? @Model.Count : @Model.StartIndex + @Model.PageSize;
    var currentPage = @Model.StartIndex / @Model.PageSize;
    var totalPages = @Model.Results.Count / @Model.PageSize;
    var action = ViewContext.RouteData.Values["action"].ToString();
    var maxPages = 10;
    var paginationStart = 0;
    var paginationFinish = Model.PageCount;

}

@if (Model.PageCount > maxPages)
{
    if (currentPage < 5)
    {
        paginationFinish = maxPages;
    }
    else if (currentPage + 5 > Model.PageCount)
    {
        paginationFinish = Model.PageCount;
        paginationStart = paginationFinish - maxPages;
    }
    else if (currentPage >= 5)
    {
        paginationFinish = currentPage + 5;
        paginationStart = paginationFinish - maxPages;
    }

}



<div class="pagination">
    <p>Showing @startResult - @endResult of @Model.Count</p>
    <ul class="pagination-links">
    @{
        if (currentPage > 0)
        {
            <li>@Html.ActionLink("Previous",
                     @action,
                     new { Model.Forename, Model.Surname, Model.IncludeHistoric, Model.RoleId, Model.Count, startIndex = ((currentPage - 1) * Model.PageSize)},
                     new { @class = "pagination-prev" })</li>
        }

        for (int i = paginationStart; i < paginationFinish; i++)
            {
                var displayPage = i + 1;
                if (i == currentPage)
                {
                 <li><span class="go-nowhere numeric-pagination">@displayPage.ToString()</span></li>
                }
                else
                {
                <li>@Html.ActionLink(displayPage.ToString(),
                        @action,
                        new { Model.Forename, Model.Surname, Model.IncludeHistoric, Model.RoleId,
                            Model.Count,
                            startIndex = (i * Model.PageSize)},
                        new { @class = "numeric-pagination" })</li>
                }
         }

        if (currentPage < Model.PageCount - 1)
        {
            <li>@Html.ActionLink("Next",
                    @action,
                    new {
                        Model.Forename,
                        Model.Surname,
                        Model.IncludeHistoric,
                        Model.RoleId,
                        Model.Count,
                        startIndex = ((currentPage + 1) * Model.PageSize)},
                    new { @class = "pagination-next" })</li>
        }
    }
    </ul>
</div>

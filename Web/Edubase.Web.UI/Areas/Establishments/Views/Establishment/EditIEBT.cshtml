@using System.Linq
@using ViewModel = Edubase.Web.UI.Models.EditEstablishmentModel
@using System.Linq.Expressions
@using Edubase.Services.Enums
@model ViewModel
@{
    if (Model.ChangesSummary == null)
    {
        Layout = "_EditLayoutPage.cshtml";
    }
    else
    {
        ViewBag.bodyClasses = "create-edit-school school-details";
        ViewBag.hideLogo = true;
        ViewBag.Title = "Edit establishment";
    }
}

@using (Html.BeginForm())
{
    <div class="tab-content" id="edit-iebt">

        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Urn)
        @Html.HiddenFor(x => x.Name)
        @Html.HiddenFor(x => x.SelectedTab)
        @Html.HiddenFor(x => x.LegalParentGroupToken)
        @Html.HiddenFor(x => x.ChangesInstantCount)
        @Html.HiddenFor(x => x.ChangesRequireApprovalCount)

        <div class="@Html.Conditional(Model.ChangesSummary != null, "hidden")">

            <div class="column-half">

                <div class="form-group">
                    <button type="submit" class="button" name="@nameof(Model.ActionSpecifier)" value="@ViewModel.GetActionSpecifier(ViewModel.ASSave, ViewModel.ASSaveIEBT)">Save IEBT</button>
                    @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-secondary cancel" })
                </div>

                <div class="form-group @Html.ValidationCssClassFor(x => x.Notes)">
                    @Html.LabelFor(x => x.Notes)
                    @Html.ValidationMessageFor(x => x.Notes)
                    @Html.TextAreaFor(x => x.Notes, new { @class = "form-control", rows = "10" })
                </div>

                <div class="form-group @Html.ValidationCssClassFor(x => x.Associations)">
                    @Html.LabelFor(x => x.Associations)
                    @Html.ValidationMessageFor(x => x.Associations)
                    @Html.TextAreaFor(x => x.Associations, new { @class = "form-control", rows = "10" })
                </div>

                @Html.EditorFor(x => x.DateOfTheLastBridgeVisit, new { title = "Date of last Bridge visit" })

                @Html.EditorFor(x => x.DateOfLastOfstedVisit, new { title = "Date of last Ofsted visit" })

                @Html.EditorFor(x => x.DateOfTheLastISIVisit, new { title = "Date of last ISI visit" })

                @Html.EditorFor(x => x.DateOfTheLastWelfareVisit, new { title = "Date of last welfare visit"})

                @Html.EditorFor(x => x.DateOfTheLastFPVisit, new { title = "Date of last FP visit"})

                @Html.EditorFor(x => x.DateOfTheLastSISVisit, new { title = "Date of last SIS visit"})

                @Html.EditorFor(x => x.NextOfstedVisit, new { title = "Next Ofsted visit"})

                @Html.EditorFor(x => x.NextGeneralActionRequired, new { title = "Next general action required"})

                @Html.EditorFor(x => x.NextActionRequiredByWEL, new { title = "Next action required by WEL"})

                @Html.EditorFor(x => x.NextActionRequiredByFP, new { title = "Next action required by FP"})

                <div class="form-group @Html.ValidationCssClassFor(x => x.InspectorateId)">
                    @Html.LabelFor(x => x.InspectorateId)
                    @Html.ValidationMessageFor(x => x.InspectorateId)
                    @Html.DropDownListFor(x => x.InspectorateId, Model.Inspectorates, "", new { @class = "form-control" })
                </div>

                <div class="form-group @Html.ValidationCssClassFor(x => x.IndependentSchoolTypeId)">
                    @Html.LabelFor(x => x.IndependentSchoolTypeId)
                    @Html.ValidationMessageFor(x => x.IndependentSchoolTypeId)
                    @Html.DropDownListFor(x => x.IndependentSchoolTypeId, Model.IndependentSchoolTypes, "", new { @class = "form-control" })
                </div>

                @RenderTextBox(x => x.CharityOrganisation)
                @RenderNumericTextBox(x => x.CharityRegistrationNumber)
                @RenderNumericTextBox(x => x.TotalNumberOfFullTimePupils)
                @RenderNumericTextBox(x => x.TotalNumberOfPartTimePupils)
                @RenderNumericTextBox(x => x.TotalNumberOfPupilsOfCompulsorySchoolAge)
                @RenderNumericTextBox(x => x.SENStat)
                @RenderNumericTextBox(x => x.SENNoStat)
                @RenderNumericTextBox(x => x.TotalNumberOfPupilsInPublicCare)
                @RenderNumericTextBox(x => x.PTBoysAged2AndUnder)
                @RenderNumericTextBox(x => x.PTBoysAged3)
                @RenderNumericTextBox(x => x.PTBoysAged4A)
                @RenderNumericTextBox(x => x.PTBoysAged4B)
                @RenderNumericTextBox(x => x.PTBoysAged4C)
                @RenderNumericTextBox(x => x.TotalNumberOfBoysInBoardingSchools)
                @RenderNumericTextBox(x => x.PTGirlsAged2AndUnder)
                @RenderNumericTextBox(x => x.PTGirlsAged3)
                @RenderNumericTextBox(x => x.PTGirlsAged4A)
                @RenderNumericTextBox(x => x.PTGirlsAged4B)
                @RenderNumericTextBox(x => x.PTGirlsAged4C)
                @RenderNumericTextBox(x => x.TotalNumberOfGirlsInBoardingSchools)
                @RenderNumericTextBox(x => x.TotalNumberOfFullTimeStaff)
                @RenderNumericTextBox(x => x.TotalNumberOfPartTimeStaff)
                @RenderNumericTextBox(x => x.LowestAnnualRateForDayPupils)
                @RenderNumericTextBox(x => x.HighestAnnualRateForDayPupils)
                @RenderNumericTextBox(x => x.LowestAnnualRateForBoardingPupils)
                @RenderNumericTextBox(x => x.HighestAnnualRateForBoardingPupils)

                <div class="form-group @Html.ValidationCssClassFor(x => x.BoardingEstablishmentId)">
                    @Html.LabelFor(x => x.BoardingEstablishmentId)
                    @Html.ValidationMessageFor(x => x.BoardingEstablishmentId)
                    @Html.DropDownListFor(x => x.BoardingEstablishmentId, Model.BoardingEstablishment, "", new { @class = "form-control" })
                </div>

                <fieldset class="toggle-panels inline" id="proprietor-radios">
                    <legend class="bold-legend">Proprietor</legend>
                        @foreach (eProprietorType pt in Enum.GetValues(typeof(eProprietorType)))
                        {
                        <div class="multiple-choice">
                            @{
                                var id = TagBuilder.CreateSanitizedId(string.Format("{0}-{1}", "proprietor-type", pt));
                            }
                            @Html.RadioButtonFor(x => x.ProprietorType, pt, new { id, data_toggle_panel = $"#{pt}" })
                            @Html.Label(pt.EnumDisplayNameFor(), new { @for = id, data_toggle_panel = pt })
                        </div>
                        }
                    </fieldset>
                <div id="@eProprietorType.SingleProprietor.ToString()" class="panel panel-border-narrow push-half--top">
                    <h4 class="heading-small">Proprietor details</h4>
                    <div id="cloneable-fields-container">
                        @RenderTextBox(x => x.ProprietorsPreferredJobTitle)
                        @RenderTextBox(x => x.ProprietorName, "cloneable")
                        @RenderTextBox(x => x.ProprietorsStreet, "cloneable")
                        @RenderTextBox(x => x.ProprietorsLocality, "cloneable")
                        @RenderTextBox(x => x.ProprietorsAddress3, "cloneable")
                        @RenderTextBox(x => x.ProprietorsTown, "cloneable")

                        <div class="form-group cloneable @Html.ValidationCssClassFor(x => x.ProprietorsCountyId)">
                            @Html.LabelFor(x => x.ProprietorsCountyId)
                            @Html.ValidationMessageFor(x => x.ProprietorsCountyId)
                            @Html.DropDownListFor(x => x.ProprietorsCountyId, Model.Counties, "", new { @class = "form-control" })
                        </div>

                        @RenderTextBox(x => x.ProprietorsPostcode, "cloneable",  "form-control-1-2")
                        @RenderTextBox(x => x.ProprietorsTelephoneNumber, "cloneable")
                        @RenderTextBox(x => x.ProprietorsFaxNumber, "cloneable")
                        @RenderTextBox(x => x.ProprietorsEmail, "cloneable")
                    </div>


                </div>
                <div id="@eProprietorType.ProprietorBody.ToString()" class="panel panel-border-narrow push-half--top">
                    <h4 class="heading-small">Proprietor body details</h4>
                    <div id="field-clone-target">

                    </div>

                    <h4 class="heading-small edu-section-break">Chair of the proprietary body details</h4>

                    @RenderTextBox(x => x.ChairOfProprietorsBodyPreferredJobTitle)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyName)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyStreet)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyLocality)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyAddress3)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyTown)

                    <div class="form-group cloneable @Html.ValidationCssClassFor(x => x.ChairOfProprietorsBodyCountyId)">
                        @Html.LabelFor(x => x.ChairOfProprietorsBodyCountyId)
                        @Html.ValidationMessageFor(x => x.ChairOfProprietorsBodyCountyId)
                        @Html.DropDownListFor(x => x.ChairOfProprietorsBodyCountyId, Model.Counties, "", new { @class = "form-control" })
                    </div>

                    @RenderTextBox(x => x.ChairOfProprietorsBodyPostcode, null, "form-control-1-2")
                    @RenderTextBox(x => x.ChairOfProprietorsBodyTelephoneNumber)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyFaxNumber)
                    @RenderTextBox(x => x.ChairOfProprietorsBodyEmail)
                </div>

                <div class="form-group cloneable @Html.ValidationCssClassFor(x => x.AccommodationChangedId)">
                    @Html.LabelFor(x => x.AccommodationChangedId)
                    @Html.ValidationMessageFor(x => x.AccommodationChangedId)
                    @Html.DropDownListFor(x => x.AccommodationChangedId, Model.AccommodationChanges, "", new { @class = "form-control" })
                </div>

                <div class="button-row">
                    <button type="submit" class="button" name="@nameof(Model.ActionSpecifier)" value="@ViewModel.GetActionSpecifier(ViewModel.ASSave, ViewModel.ASSaveIEBT)">Save IEBT</button>
                    @Html.ActionLink("Cancel", "Details", "Establishment", new { id = Model.Urn }, new { @class = "button button-secondary cancel" })
                </div>

            </div>
        </div>

        @if (Model.ChangesSummary != null)
        {
            Html.RenderPartial("Partials/_ConfirmChanges");
            <div class="button-row">
                <button class="button-secondary button" name="@nameof(Model.ActionSpecifier)" type="submit" value="@ViewModel.ASCancel">&laquo; Back</button>
                <button type="submit" name="@nameof(Model.ActionSpecifier)" value="@ViewModel.ASConfirm" class="button js-confirm">Confirm</button>

                @Html.ActionLink("Cancel", "Details", "Establishment", new {id = Model.Urn}, new {@class = "button button-secondary", id = "cancel-edit"})
            </div>

                @section ViewScripts {

                    <script nonce="4CC30YJLSMKGDS6G">
                        $('#cancel-edit, .requires-conf-to-leave').okCancel({
                            ok: function() {
                                window.location = this.el.getAttribute('href');
                            },
                            title: 'Are you sure you want to leave this page?',
                            content: 'Any unsaved changes will be lost',
                            triggerEvent: 'click'
                        });
                        $('#Notes').textCount({ maxLength: 4000 });
                        $('#Associations').textCount({ maxLength: 1000 });
                    </script>
                }
        }
        else
        {
            @section ViewScripts {
                <script nonce="4CC30YJLSMKGDS6G">
                    var $fields = $('#content').find('.form-control');
                    var exitAttached = false;

                    $fields.on('change keyup', function () {
                        if (!exitAttached) {
                            DfE.Util.showUnload('Are you sure you want to leave this page? Any unsaved changes will be lost');
                            exitAttached = true;
                        }
                    });
                    $('#Notes').textCount({ maxLength: 4000 });
                    $('#Associations').textCount({ maxLength: 1000 });
                </script>

            }
        }

    </div>
}

@helper RenderTextBox(Expression<Func<ViewModel, string>> fnc, string wrapperClass = "", string fieldClasses = "")
{
    var classes = "form-control " + fieldClasses;
    <div class="form-group @wrapperClass @Html.ValidationCssClassFor(fnc)">
        @Html.LabelFor(fnc, new { @class = "form-label" })
        @Html.ValidationMessageFor(fnc)
        @Html.TextBoxFor(fnc, new { @class = classes })
    </div>
}

@helper RenderNumericTextBox(Expression<Func<ViewModel, int?>> fnc)
{
    <div class="form-group @Html.ValidationCssClassFor(fnc)">
        @Html.LabelFor(fnc, new { @class = "form-label" })
        @Html.ValidationMessageFor(fnc)
        @Html.TextBoxFor(fnc, new { @class = "form-control", type = "text" })
    </div>
}

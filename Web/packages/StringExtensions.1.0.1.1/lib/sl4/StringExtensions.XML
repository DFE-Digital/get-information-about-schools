<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StringExtensions</name>
    </assembly>
    <members>
        <member name="T:StringExtensions.CommonStringExtensions">
            <summary>
            Class containing extension methods for common functionality on the string type
            </summary>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.AllBetween(System.String,System.Char)">
            <summary>
            Extracts all parts from the input string between the first encounter of a couple of enclosure character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosureCharacter">The character to use for checking enclosure</param>
            <returns>
            A sequence of substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.AllBetween(System.String,System.Char,System.Char)">
            <summary>
            Extracts all parts from the input string between the first encounter of a the first enclosure character until the first encounter of the second enclosure character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="firstEnclosureCharacter">The first character to use for checking enclosure</param>
            <param name="secondEnclosureCharacter">The second character to use for checking enclosure</param>
            <returns>
            A sequence of substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.AllBetween(System.String,System.String)">
            <summary>
            Extracts all parts from the input string between the first encounter of a couple of enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosure">The string used for checking enclosure</param>
            <returns>
            A sequence of substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.AllBetween(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the part from the input string between all encounters of a couple of outer enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosure">The string to use for checking enclosure</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>
            A sequence of substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.AllBetween(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the part from the input string between all encounters of a couple of outer enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="firstEnclosure">The first string to use for checking enclosure</param>
            <param name="secondEnclosure">The second string to use for checking enclosure</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>
            A sequence of substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Between(System.String,System.Char)">
            <summary>
            Extracts the part from the input string between the first encounter of a couple of enclosure character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosureCharacter">The character to use for checking enclosure</param>
            <returns>
            The substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            or null if no enclosure character combination could be found
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Between(System.String,System.Char,System.Char)">
            <summary>
            Extracts the part from the input string between the first encounter of a the first enclosure character until the first encounter of the second enclosure character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="firstEnclosureCharacter">The first character to use for checking enclosure</param>
            <param name="secondEnclosureCharacter">The second character to use for checking enclosure</param>
            <returns>
            The substring starting at the first position after the first encountered enclosure character until the last position before the second enclosure character
            or null if no enclosure character combination could be found
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Between(System.String,System.String)">
            <summary>
            Extracts the part from the input string between the first encounter of a couple of enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosure">The string to use for checking enclosure</param>
            <returns>
            The substring starting at the first position after the first encountered enclosure until the last position before the second enclosure
            or null if no enclosure combination could be found
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Between(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the part from the input string between the first encounter of a couple of enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="enclosure">The string to use for checking enclosure</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>
            The substring starting at the first position after the first encountered enclosure until the last position before the second enclosure
            or null if no enclosure combination could be found
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Between(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the part from the input string between the first encounter of a couple of enclosures
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="firstEnclosure">The first string to use for checking enclosure</param>
            <param name="secondEnclosure">The second string to use for checking enclosure</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>
            The substring starting at the first position after the first encountered enclosure until the last position before the second enclosure
            or null if no enclosure combination could be found
            </returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether the given value can be located within the input string
            </summary>
            <param name="input">The input string to check</param>
            <param name="value">The value to check within the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>True if the value was found within the input string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Contains(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Determines whether the given value can be located within the input string given the specified range
            </summary>
            <param name="input">The input string to check</param>
            <param name="value">The value to check within the input string</param>
            <param name="startIndex">The position in this instance where the substring begins</param>
            <param name="count">The length of the substring.</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>True if the value was found within the input string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstring(System.String,System.String)">
            <summary>
            Counts the total amount of occurrences of value within the inputString        
            </summary>
            <param name="input">The input string for which the total amount of occurrences of value should be counted</param>
            <param name="value">The string to find within the input string</param>
            <returns>The amount of occurrences of value within the inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstring(System.String,System.String,System.StringComparison)">
            <summary>
            Counts the total amount of occurrences of value at the end of the inputString with an explicitly defined comparisonType
            </summary>
            <param name="input">The input string for which the total amount of occurrences of value should be counted</param>
            <param name="value">The string to find within the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The amount of occurrences of value within the inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstring(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Counts the total amount of occurrences of value at the end of the inputString with an explicitly defined comparisonType
            </summary>
            <param name="input">The input string for which the total amount of occurrences of value should be counted</param>
            <param name="value">The string to find within the input string</param>
            <param name="startIndex">The position in this instance where the substring begins</param>
            <param name="count">The length of the substring.</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The amount of occurrences of value within the inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstringEnd(System.String,System.String)">
            <summary>
            Counts the total amount of occurrences of value at the end of the inputString        
            </summary>
            <param name="input">The input string for which the total amount of occurrences of value should be counted</param>
            <param name="endsWith">The string to repeatable total at the end of the input string</param>
            <returns>The amount of occurrences of value at the end of inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstringEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Counts the total amount of occurrences of value at the end of the inputString with an explicitly defined comparisonType
            </summary>
            <param name="input">The input string for which the total amount of occurrences of value should be counted</param>
            <param name="endsWith">The string to repeatable total at the end of the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The amount of occurrences of value at the end of inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstringStart(System.String,System.String)">
            <summary>
            Counts the total amount of occurrences of startsWith at the start of inputString        
            </summary>
            <param name="input">The input string for which the total amount of occurrences of startsWith should be counted</param>
            <param name="startsWith">The string to repeatable total at the start of the input string</param>
            <returns>The amount of occurrences of startsWith at the start of inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.CountSubstringStart(System.String,System.String,System.StringComparison)">
            <summary>
            Counts the total amount of occurrences of startsWith at the start of inputString        
            </summary>
            <param name="input">The input string for which the total amount of occurrences of startsWith should be counted</param>
            <param name="startsWith">The string to repeatable total at the start of the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The amount of occurrences of startsWith at the start of inputString</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether the input string is empty (0 characters)
            </summary>
            <param name="input">The input string to check</param>
            <returns>True if the input string is empty</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            Determines whether the input string is empty (0 characters) or consists of only whitespaces
            </summary>
            <param name="input">The input string to check</param>
            <returns>True if the input string is empty or consists of only whitespaces</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Left(System.String,System.Int32)">
            <summary>
            Extracts the left part of the input string limited with the length parameter
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="length">The amount of characters to take from the input string</param>
            <returns>The substring starting at startIndex 0 until length</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length is smaller than zero or higher than the length of input</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOf(System.String,System.Char)">
            <summary>
            Extracts the left part of the input string limited by the first character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="character">The character to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            Extracts the left part of the input string limited by the first character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="character">The character to find in the input string</param>
            <param name="skip">The numbers of found characters to skip before taking the left part</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOf(System.String,System.String)">
            <summary>
            Extracts the left part of the input string limited by the first occurrence of value
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="value">The value to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the first occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOf(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the left part of the input string limited by the first occurrence of value
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the first occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOf(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Extracts the left part of the input string limited by the n'th occurrence of value
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="skip">The numbers of found values to skip before taking the left part</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the n'th occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOfLast(System.String,System.Char)">
            <summary>
            Extracts the left part of the input string limited by the last character
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="character">The character to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOfLast(System.String,System.String)">
            <summary>
            Extracts the left part of the input string limited by the last occurrence of value
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="value">The value to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the last occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.LeftOfLast(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the left part of the input string limited by the last occurrence of value
            </summary>
            <param name="input">The input string to take the left part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the last occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurrences of a specified string with another specified string.
            This method differs from the version found in the BCL by accepting a StringComparison instance
            </summary>
            <param name="input">The input string to replace for</param>
            <param name="oldValue">The string to replace</param>
            <param name="newValue">The string that replaces oldValue</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>A reference to this instance with all instances of oldValue replaced by newValue in the range from startIndex to startIndex + total - 1</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Replaces all occurrences of a specified string with another specified string.
            </summary>
            <param name="input">The input string to replace for</param>
            <param name="oldValue">The string to replace</param>
            <param name="newValue">The string that replaces oldValue.</param>
            <param name="startIndex">The position in this instance where the substring begins</param>
            <param name="count">The length of the substring.</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>A reference to this instance with all instances of oldValue replaced by newValue in the range from startIndex to startIndex + total - 1</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Int32@)">
            <summary>
            Replaces all occurrences of a specified string with another specified string.
            </summary>
            <param name="input">The input string to replace for</param>
            <param name="oldValue">The string to replace</param>
            <param name="newValue">The string that replaces oldValue.</param>
            <param name="startIndex">The position in this instance where the substring begins</param>
            <param name="count">The length of the substring.</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <param name="total">The total amount of input values that have been replaced</param>
            <returns>A reference to this instance with all instances of oldValue replaced by newValue in the range from startIndex to startIndex + total - 1</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Reverse(System.String)">
            <summary>
            Reverses all characters in input
            </summary>
            <param name="input">The input string to reverse</param>
            <returns>A reversed version from input</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Reverse(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reverses all characters in input within the range from startIndex till length
            </summary>
            <param name="input">The input string to reverse</param>
            <param name="startIndex">The startIndex startIndex of the input string to begin reversing</param>
            <param name="count">The amount of characters to reverse</param>
            <param name="includeSurrogates">Determines whether surrogates at the beginning or ending of the subject to reverse needs to be included when reversing</param>
            <returns>A reversed version from input</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is smaller than 0 or bigger or equal to input.Length which is bigger than 0</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is smaller than 0 or bigger than input.Length + startIndex</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Right(System.String,System.Int32)">
            <summary>
            Extracts the right part of the input string limited with the length parameter
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="length">The amount of characters to take from the input string</param>
            <returns>The substring taken from the input string</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length is smaller than zero or higher than the length of input</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOf(System.String,System.Char)">
            <summary>
            Extracts the right part of the input string limited by the first character
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="character">The character to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            Extracts the right part of the input string limited by the first character
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="character">The character to find in the input string</param>
            <param name="skip">The numbers of found characters to skip before taking the right part</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOf(System.String,System.String)">
            <summary>
            Extracts the right part of the input string limited by the first occurrence of value
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="value">The value to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the first occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOf(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the right part of the input string limited by the first occurrence of value
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the first occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOf(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Extracts the right part of the input string limited by the n'th occurrence of value
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="skip">The numbers of found values to skip before taking the right part</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the first occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOfLast(System.String,System.Char)">
            <summary>
            Extracts the right part of the input string limited by the last character
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="character">The character to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the character (excluding the character) or the whole input string if the character was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOfLast(System.String,System.String)">
            <summary>
            Extracts the right part of the input string limited by the last occurrence of value
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="value">The value to find in the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the last occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.RightOfLast(System.String,System.String,System.StringComparison)">
            <summary>
            Extracts the right part of the input string limited by the last occurrence of value
            </summary>
            <param name="input">The input string to take the right part from</param>
            <param name="value">The value to find in the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The substring starting at startIndex 0 until either the position of the last occurrence of value or the whole input string if the value was not found</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Trims all occurrences of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to repeatable trim while ending with value</param>
            <param name="endsWith">The string to remove repeatable from the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Trims all occurrences of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to repeatable trim while ending with value</param>
            <param name="endsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEnd(System.String,System.String,System.StringComparison,System.Int32)">
            <summary>
            Trims all occurrences of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to repeatable trim while ending with value</param>
            <param name="endsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <param name="max">The max amount of times value should be removed from the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEnd(System.String,System.String,System.StringComparison,System.Int32,System.Int32@)">
            <summary>
            Trims all occurrences of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to repeatable trim while ending with value</param>
            <param name="endsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <param name="max">The max amount of times value should be removed from the input string</param>
            <param name="total">Gives back the amount of times startsWith was found at the beginning of the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Trims all occurrences of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to repeatable trim while starting with startsWith</param>
            <param name="startsWith">The string to remove repeatable from the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStart(System.String,System.String,System.StringComparison)">
            <summary>
            Trims all occurrences of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to repeatable trim while starting with startsWith</param>
            <param name="startsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStart(System.String,System.String,System.StringComparison,System.Int32)">
            <summary>
            Trims max occurrences of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to repeatable trim while starting with startsWith</param>
            <param name="startsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <param name="max">The max amount of times startsWith should be removed from the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStart(System.String,System.String,System.StringComparison,System.Int32,System.Int32@)">
            <summary>
            Trims max occurrences of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to repeatable trim while starting with startsWith</param>
            <param name="startsWith">The string to remove repeatable from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <param name="max">The max amount of times startsWith should be removed from the input string</param>
            <param name="total">Gives back the amount of times startsWith was found at the beginning of the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the input string given to the length specified and possibly adds an ellipsis at the end to mark a truncation
            </summary>
            <param name="input">The input string to truncate</param>
            <param name="length">The desired maximum length of the resulting string</param>
            <param name="ellipsis">An ellipsis to append to the end of a string when it gets truncated or null if no ellipsis is required</param>
            <returns>The input string possibly truncated at the desired length with the ellipsis added. The length of the resulting string will never exceed the length specified</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Truncate(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Truncates the input string given to the length specified and possibly adds an ellipsis at the end to mark a truncation
            </summary>
            <param name="input">The input string to truncate</param>
            <param name="length">The desired maximum length of the resulting string</param>
            <param name="ellipsis">An ellipsis to append to the end of a string when it gets truncated or null if no ellipsis is required</param>
            <param name="inclusiveEllipsis">True if the ellipsis should be taken into account when checking for the length. 
            If false, the input string will be cut of at the length specified and the ellipsis will be added even if that means the resulting string will be longer than the desired length</param>
            <returns>The input string possibly truncated at the desired length with the ellipsis added</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Truncate(System.String,System.Int32,System.String,System.Boolean,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Truncates the input string given to the length specified and possibly adds an ellipsis at the end to mark a truncation
            </summary>
            <param name="input">The input string to truncate</param>
            <param name="length">The desired maximum length of the resulting string</param>
            <param name="ellipsis">An ellipsis to append to the end of a string when it gets truncated or null if no ellipsis is required</param>
            <param name="inclusiveEllipsis">True if the ellipsis should be taken into account when checking for the length. 
            If false, the input string will be cut of at the length specified and the ellipsis will be added even if that means the resulting string will be longer than the desired length</param>
            <param name="boundary">A string (e.g. space) on which to break.</param>
            <param name="emptyOnNoBoundary">Determines the default behavior When no boundary is found. (Empty string or truncate without boundary)</param>
            <param name="comparisonType">The way boundary should be compared to the input string</param>
            <returns>The input string possibly truncated at the desired length with the ellipsis added</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEndOnce(System.String,System.String)">
            <summary>
            Trims the last occurrence of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to trim the last instance of value from</param>
            <param name="endsWith">The string to remove from the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimEndOnce(System.String,System.String,System.StringComparison)">
            <summary>
            Trims the last occurrence of the provided value instance from the end of the input string
            </summary>
            <param name="input">The input string to trim the last instance of value from</param>
            <param name="endsWith">The string to remove from the input string</param>
            <param name="comparisonType">The way value should be compared to the input string</param>
            <returns>The result string trimmed 0 till x times with the value string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStartOnce(System.String,System.String)">
            <summary>
            Trims the first occurrence of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to trim the first instance of startsWith from</param>
            <param name="startsWith">The string to remove from the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.TrimStartOnce(System.String,System.String,System.StringComparison)">
            <summary>
            Trims the first occurrence of the provided startsWith instance from the start of the input string
            </summary>
            <param name="input">The input string to trim the first instance of startsWith from</param>
            <param name="startsWith">The string to remove from the input string</param>
            <param name="comparisonType">The way startsWith should be compared to the input string</param>
            <returns>The result string trimmed 0 till x times with the startsWith string</returns>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Size(System.String)">
            <summary>
            Calculates the amount of bytes occupied by the input string
            </summary>
            <param name="input">The input string to check</param>
            <returns>The total size of the input string in bytes</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Size(System.String,System.Text.Encoding)">
            <summary>
            Calculates the amount of bytes occupied by the input string encoded as the encoding specified
            </summary>
            <param name="input">The input string to check</param>
            <param name="encoding">The encoding to use</param>
            <returns>The total size of the input string in bytes</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">encoding is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.SizeAs(System.String,System.Text.Encoding)">
            <summary>
            Calculates the amount of bytes occupied by the input string when being encoded as the target encoding
            </summary>
            <param name="input">The input string to check</param>
            <param name="targetEncoding">The desired encoding to check for</param>
            <returns>The total size of the input string in bytes</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">targetEncoding is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.SizeAs(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Calculates the amount of bytes occupied by the input string encoded as the encoding specified when being encoded as the target encoding
            </summary>
            <param name="input">The input string to check</param>
            <param name="targetEncoding">The desired encoding to check for</param>
            <param name="sourceEncoding">The encoding of the input string</param>
            <returns>The total size of the input string in bytes</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">sourceEncoding is null</exception>
            <exception cref="T:System.ArgumentNullException">targetEncoding is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Convert(System.String,System.Text.Encoding)">
            <summary>
            Converts the input string to the target encoding
            </summary>
            <param name="input">The input string to check</param>
            <param name="targetEncoding">The desired encoding to convert to</param>
            <returns>The input string converted in the targetEncoding</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">targetEncoding is null</exception>
        </member>
        <member name="M:StringExtensions.CommonStringExtensions.Convert(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts the input string encoded as the encoding specified to the target encoding
            </summary>
            <param name="input">The input string to check</param>
            <param name="targetEncoding">The desired encoding to convert to</param>
            <param name="sourceEncoding">The encoding of the input string</param>
            <returns>The input string converted in the targetEncoding</returns>
            <exception cref="T:System.ArgumentNullException">input is null</exception>
            <exception cref="T:System.ArgumentNullException">sourceEncoding is null</exception>
            <exception cref="T:System.ArgumentNullException">targetEncoding is null</exception>
        </member>
    </members>
</doc>

@using Edubase.Services.Enums;
@using Edubase.Services.Geo;
@using Edubase.Web.UI;
@using VM = Edubase.Web.UI.Models.Search.LocationDisambiguationViewModel;
@model VM
@{
    ViewBag.bodyClasses = "schools-search-page search-page";
    ViewBag.hideLogo = true;
    ViewBag.siteSection = "search";
}


<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <h1 class="govuk-heading-xl">Search results for establishments</h1>

        <p class="govuk-body"><strong>@Model.MatchingLocations.Count</strong> &nbsp;location@(Model.MatchingLocations.Count == 1 ? "" : "s") matching '<strong>@Model.SearchText</strong>'</p>

        @if (Model.MatchingLocations.Count > 1)
        {
            <p class="govuk-body"><strong>Select the location you are interested in</strong></p>

            <ul class="govuk-list">
                @foreach (var item in Model.MatchingLocations)
                {
                    <li>@LocationLink(item)</li>
                }
            </ul>

            <a href="@Url.Action("Index", "Search", new {area = "", SelectedTab = SearchViewModel.Tab.Establishments, SearchType = eSearchType.Location})" class="govuk-button govuk-button--secondary">Back to search</a>

        }
        else if (Model.MatchingLocations.Count == 1)
        {
            <p>Did you mean @LocationLink(Model.MatchingLocations[0])?</p>
            <a href="@Url.Action("Index", "Search", new {area = "", SelectedTab = SearchViewModel.Tab.Establishments, SearchType = eSearchType.Location})" class="govuk-button govuk-button--secondary">Back to search</a>
        }
        else
        {
            <p class="govuk-body"><strong>No locations were found. Please refine your search criteria.</strong><br /></p>
            <a href="@Url.Action("Index", "Search", new {area = ""})" class="govuk-button button button-next">Continue</a>
        }
    </div>
</div>

@helper LocationLink(PlaceDto place)
{
    const string key = "LocationSearchModel.AutoSuggestValue";
    var queryString = Request.QueryString.RemoveKeys("placeId", key).AddIfNonExistent(key, $"{place.Coords.Latitude},{place.Coords.Longitude}");
    if (queryString["OpenOnly"] == "true")
    {
        queryString = queryString.RemoveKey("OpenOnly").AddIfNonExistent(SearchViewModel.BIND_ALIAS_STATUSIDS, (int)eLookupEstablishmentStatus.Open, (int)eLookupEstablishmentStatus.OpenButProposedToClose);
    }

    <a href="@Url.Action("Index", "EstablishmentsSearch", new { area = "Establishments" })?@queryString">@place.Name</a>

}

@section BreadCrumbs
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="govuk-breadcrumbs">
                <ol class="govuk-breadcrumbs__list">
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                    <li class="govuk-breadcrumbs__list-item"><a href="@Url.Action("Index", "Search", new {area = "", SelectedTab = "Establishments", SearchType = eSearchType.Location})" class="govuk-breadcrumbs__link">Search</a></li>
                </ol>
            </div>
        </div>
    </div>
}


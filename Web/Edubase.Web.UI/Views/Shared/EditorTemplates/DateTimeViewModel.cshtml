@model DateTimeViewModel
@{
    var cssClassPrefix = "";
    string showBinding = null;
    string messageBinding = null;
    string classBinding = null;
    var labelClassName = "";
    var fieldsetClassName = "";
    var dateHint = "";
    var hideLegend = false;
    bool.TryParse(ViewData["disableHint"]?.ToString(), out var disableHint);
    var legendPrefix = "";
    string tooltipTitle = null;
    string tooltipText = null;
    string tooltipUnderscoredTitle = null;

    if (ViewData["dateHint"] != null)
    {
        dateHint = ViewData["dateHint"].ToString();
    }

    if (ViewData["labelClass"] != null)
    {
        labelClassName = ViewData["labelClass"].ToString();
    }

    if (ViewData["hideLegend"] != null)
    {
        hideLegend = true;
    }

    if (ViewData["fieldsetClassName"] != null)
    {
        fieldsetClassName = ViewData["fieldsetClassName"].ToString();
    }
    if (!bool.TryParse(ViewData["showReactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }

    if (ViewData["vueModel"] != null)
    {
        showBinding = string.Concat((string)ViewData["vueModel"], "Error");
        messageBinding = string.Concat((string)ViewData["vueModel"], "ErrorMessage");
        classBinding = string.Concat("v-bind:class=\"[", showBinding, "?'govuk-form-group--error': '', 'govuk-form-group create-edit-form-group date-group']\"");
    }
    else
    {
        classBinding = "class=\"govuk-form-group create-edit-form-group date-group "
                       + Html.ValidationGroupCssClass(ViewData.ModelMetadata.PropertyName) + " "
                       + Html.ValidationCssClassFor(x => x) + " "
                       + Html.ValidationCssClassFor(x => x.Day) + " "
                       + Html.ValidationCssClassFor(x => x.Month) + " "
                       + Html.ValidationCssClassFor(x => x.Year) + "\"";
    }

    if (ViewData["ClassPrefix"] != null)
    {
        cssClassPrefix = ViewData["ClassPrefix"].ToString();
    }

    if (ViewData["editorPrefix"] != null)
    {
        legendPrefix = ViewData["editorPrefix"] + "_";
    }

    //if (ViewData["tooltipTitle"] != null && ViewData["tooltipText"] != null)
    //{
    tooltipTitle = ViewData["title"]?.ToString() ?? ViewData.ModelMetadata.DisplayName;
    tooltipUnderscoredTitle = tooltipTitle.ToLower().Replace(" ", "_");
    tooltipText = ViewData["tooltipText"]?.ToString();
    //}

}
<div @Html.Raw(classBinding)>
    <fieldset class="govuk-fieldset range-group @fieldsetClassName">
        @*
            TODO - Add "described by" to have screen reader speak hints, per https://design-system.service.gov.uk/components/error-message/
            TODO - Add "described by" to have screen reader speak errors, per https://design-system.service.gov.uk/components/error-message/
              <fieldset class="govuk-fieldset" role="group" aria-describedby="passport-issued-hint passport-issued-error">
         *@
        @if (ViewData["inFilters"] != null)
        {
            <span class="govuk-error-message hidden">Please check the date(s) you have entered</span>
            <span class="govuk-error-message hidden date-range-error">Please use a valid date range</span>
        }

        @if (!string.IsNullOrWhiteSpace(tooltipText))
        {
            <div class="govuk-grid-column-full helptext-container">
                <div id="help-text-@tooltipUnderscoredTitle">
                    <h3 class="govuk-heading-s make-modal-header">@tooltipTitle</h3>
                    <p class="govuk-body">@tooltipText</p>
                </div>
            </div>
        }

        <legend class="govuk-fieldset__legend @Html.Conditional(hideLegend, "hidden")" id="@legendPrefix@ViewData.ModelMetadata.PropertyName">
            @(string.IsNullOrWhiteSpace(ViewData["title"] as string) ? ViewData.ModelMetadata.DisplayName : ViewData["title"])
            @if (!string.IsNullOrWhiteSpace(tooltipText))
            {
                <a id="@tooltipUnderscoredTitle-ToolTipLink" href="#help-text-@tooltipUnderscoredTitle" class="help-icon modal-link">
                    <span class="govuk-visually-hidden">Help with the @tooltipTitle.ToLower() field</span>
                    @helpers.DialogHiddenPrompt()
                </a>
            }
        </legend>

        @{
            var fullFieldId = ViewData.TemplateInfo.GetFullHtmlFieldName(Model?.Label)
                .Replace(".", "_")
                .Replace("[", "_")
                .Replace("]", "_");

            if (fullFieldId != string.Empty && !string.Concat(legendPrefix, ViewData.ModelMetadata.PropertyName).Equals(fullFieldId))
            {
                <div id="@fullFieldId"></div>
            }

            foreach (var modelStateKey in ViewData.ModelState.Keys)
            {
                var testStateKey = modelStateKey;
                var linkStateKey = testStateKey;
                if (testStateKey.EndsWith(".Day"))
                {
                    testStateKey = testStateKey.Replace(".Day", "");
                    linkStateKey = linkStateKey.Replace(".Day", "_Day");
                }
                if (testStateKey.EndsWith(".Month"))
                {
                    testStateKey = testStateKey.Replace(".Month", "");
                    linkStateKey = linkStateKey.Replace(".Month", "_Month");
                }
                if (testStateKey.EndsWith(".Year"))
                {
                    testStateKey = testStateKey.Replace(".Year", "");
                    linkStateKey = linkStateKey.Replace(".Year", "_Year");
                }

                if (testStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCultureIgnoreCase) &&
                    !testStateKey.Equals(ViewData.ModelMetadata.PropertyName, StringComparison.InvariantCulture))
                {
                    <div id="@linkStateKey"></div>
                }
            }
        }

        @if (!disableHint)
        {
            if (dateHint != string.Empty)
            {
                <p class="govuk-hint">For example, @dateHint</p>
            }
            else
            {
                <p class="govuk-hint">For example, 20 03 2003</p>
            }
        }

        @if (showReactivationWarning)
        {
            <div class="warning-message">
                <p>Changing this date may reactivate the record</p>
            </div>
        }

        @{
            var errContent = new List<MvcHtmlString>
            {
                Html.ValidationMessageNested(ViewData.ModelMetadata.PropertyName),
                Html.ValidationMessageFor(x => x, null, new {@class = "govuk-error-message"}),
                Html.ValidationMessageFor(x => x.Day, null, new {@class = "govuk-error-message"}),
                Html.ValidationMessageFor(x => x.Month, null, new {@class = "govuk-error-message"}),
                Html.ValidationMessageFor(x => x.Year, null, new {@class = "govuk-error-message"})
            };

            foreach (var mvcHtmlString in errContent.Select(x => x?.ToHtmlString()).Distinct())
            {
                @Html.Raw(mvcHtmlString)
            }
        }

        @if (ViewData["vueModel"] != null)
        {
            <span class="govuk-error-message" v-show="@showBinding" v-html="@messageBinding"></span>
        }
        @{
            var dayCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Day), " govuk-input ", $"{cssClassPrefix}-day");
            var monthCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Month), " govuk-input ", $"{cssClassPrefix}-month");
            var yearCssClasses = string.Concat(Html.TextBoxValidationClass(x => x.Year), " govuk-input ", $"{cssClassPrefix}-year");
        }
        @*
            TODO -- Add inputmode="numeric"
            per https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/
        *@
        <div class="govuk-date-input">
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Day, new {@class = string.Concat(labelClassName, " govuk-label govuk-date-input__label")})
                    @Html.TextBoxFor(x => x.Day, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, dayCssClasses, 2, ViewData["vueModel"] != null ? string.Concat((string) ViewData["vueModel"], "Day") : null))
                </div>
            </div>
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Month, new {@class = string.Concat(labelClassName, " govuk-label govuk-date-input__label")})
                    @Html.TextBoxFor(x => x.Month, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, monthCssClasses, 2, ViewData["vueModel"] != null ? string.Concat((string) ViewData["vueModel"], "Month") : null))
                </div>
            </div>
            <div class="govuk-date-input__item gias-year-input__item">
                <div class="govuk-form-group">
                    @Html.LabelFor(x => x.Year, new {@class = string.Concat(labelClassName, " govuk-label govuk-date-input__label")})
                    @Html.TextBoxFor(x => x.Year, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, yearCssClasses, 4, ViewData["vueModel"] != null ? string.Concat((string) ViewData["vueModel"], "Year") : null))
                </div>
            </div>
        </div>
        @if (ViewData["readonly"] as bool? ?? false)
        {
            @Html.HiddenFor(x => x.Day)
            @Html.HiddenFor(x => x.Month)
            @Html.HiddenFor(x => x.Year)
        }
    </fieldset>
</div>


@functions
{
    static object GetCheckboxAttributes(bool? readOnly, string cssClasses, int maxlength, string vueModel)
    {
        if (readOnly.HasValue && readOnly.Value)
            return new { @class = cssClasses, disabled = "disabled", maxlength };

        if (vueModel != null)
            return new { @class = cssClasses, maxlength, v_model = vueModel };

        return new { @class = cssClasses, maxlength };
    }
}

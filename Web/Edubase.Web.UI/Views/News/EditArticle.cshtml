@using System.Globalization
@using Edubase.Web.UI.Models.News
@model Edubase.Web.UI.Models.News.NewsArticleViewModel
@{
    ViewBag.Title = "Get Information about Schools";
    ViewBag.bodyClasses = "news-page";
    ViewBag.SiteSection = "news";
}
@section BreadCrumbs
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <div class="govuk-breadcrumbs">
                <ol class="govuk-breadcrumbs__list">
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("News", "Index", "News", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                    <li class="govuk-breadcrumbs__list-item">@Html.ActionLink("Manage", "Manage", "News", new { area = "" }, new { @class = "govuk-breadcrumbs__link" })</li>
                </ol>
            </div>
        </div>
    </div>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @Html.Partial("_ValidationSummary", ViewData.ModelState)
        <h1 class="govuk-heading-xl">@(Model.Id == null ? "Add" : "Edit") news article</h1>
    </div>
</div>

@using (Html.BeginRouteForm(Model.Id == null ? "PostCreateArticle" : "PostEditArticle", new { Model.Id }, FormMethod.Post, new { id = "newsForm" }))
{
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Action)

    <div class="button-row govuk-!-margin-bottom-4">
        @if (Model.Action == eNewsArticleAction.Start)
        {
            if (Model.Id == null)
            {
                @Html.ActionLink(
                    "Back",
                    "Manage",
                    "News",
                    null,
                    new { @class = "govuk-back-link gias-back-link--button", data_module = "govuk-button" })
            }
            else
            {
                @Html.ActionLink(
                    "Back",
                    "Edit",
                    "News",
                    null,
                    new { @class = "govuk-back-link gias-back-link--button", data_module = "govuk-button" })
            }
        }
        else
        {
            <button type="submit" class="govuk-back-link gias-back-link--button" name="@nameof(Model.GoBack)" value="true">
                Back
            </button>
        }
    </div>


    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            @if (Model.Action == eNewsArticleAction.Start)
            {
                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">News article title</h2>
                    </div>

                    <div class="govuk-grid-column-full">
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Title)">
                            @Html.ValidationMessageFor(x => x.Title, null, new { @class = "govuk-error-message" })
                            @Html.TextBoxFor(x => x.Title, new { @class = "govuk-input" })
                        </div>
                    </div>
                </div>

                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">News article content</h2>
                    </div>

                    <div class="govuk-grid-column-full">
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.Content)">
                            @Html.ValidationMessageFor(x => x.Content, null, new { @class = "govuk-error-message" })
                            @Html.TextAreaFor(x => x.Content, new { @class = "govuk-textarea entry-content", rows = "20", cols = "40" })
                        </div>
                    </div>
                </div>


                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">Schedule visibility</h2>
                    </div>

                    <div class="govuk-grid-column-full">
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.ArticleDate)">
                            @Html.EditorFor(x => x.ArticleDate, "DateTimeViewModelExtended", new { title = "Article display date and time", fieldsetClassName = "edit-date-fieldset", dateHint = $"{DateTime.Now:dd MM yyyy} 18:00", dateHintAdditional = "The time will be UK local time, taking into account daylight savings" })
                        </div>
                    </div>
                </div>


                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <h2 class="govuk-heading-m">Display the date with the article title</h2>
                    </div>

                    <div class="govuk-grid-column-full">
                        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.ShowDate)">
                            <div class="govuk-radios">
                                @Html.ValidationMessageFor(x => x.ShowDate, null, new { @class = "govuk-error-message" })
                                <div class="govuk-radios">
                                    <div class="govuk-radios__item">
                                        @Html.GiasRadioFor(x => x.ShowDate, true, "Yes", null, new { @class = "govuk-radios__input" })
                                    </div>
                                    <div class="govuk-radios__item">
                                        @Html.GiasRadioFor(x => x.ShowDate, false, "No", null, new { @class = "govuk-radios__input" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(x => x.Title)
                @Html.HiddenFor(x => x.Content)
                @Html.HiddenFor(x => x.ShowDate)
                @Html.HiddenFor(x => x.ArticleDate.Day)
                @Html.HiddenFor(x => x.ArticleDate.Month)
                @Html.HiddenFor(x => x.ArticleDate.Year)
                @Html.HiddenFor(x => x.ArticleDate.Hour)
                @Html.HiddenFor(x => x.ArticleDate.Minute)
            }

            @if (Model.Action == eNewsArticleAction.Review)
            {
                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full">
                        <span class="govuk-caption-m">Check all details are correct before saving</span>
                    </div>
                </div>

                <div class="govuk-grid-row">
                    <div class="govuk-grid-column-full news-blog">
                        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible" />

                        <h2 class="govuk-heading-m">
                            @Model.Title<br />
                            @if (Model.ShowDate)
                            {
                                <span class="gias-news-heading--date">@(Model.ArticleDate.ToDateTime()?.ToString("d MMMM yyyy", CultureInfo.InvariantCulture))</span>
                            }
                        </h2>

                        @Html.Raw(Model.Content)

                        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible" />
                    </div>
                </div>
            }



            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    <div class="button-row govuk-!-padding-top-6">
                        <button type="submit" id="submit" class="govuk-button">@(Model.Action == eNewsArticleAction.Review ? "Accept and save" : "Continue")</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
}

@section ViewScripts
{
    <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
    <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
    <script src="https://unpkg.com/turndown/dist/turndown.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script nonce="@Html.ScriptNonce()">
        if ("@(Model.Action == eNewsArticleAction.Start)" === "True") {

            // nasty hack, but when editing existing HTML, we need to convert the HTML back into markdown for easyMDE to be able to read
            const turndownService = new TurndownService();
            document.getElementById('Content').value = turndownService.turndown(document.getElementById('Content').value);

            // the rest of the code is then setting up the easyMDE component, and getting it to save the HTML back into the textarea when form submits
            const easyMDE = new EasyMDE({
                element: document.getElementById('Content'),
                hideIcons: ["heading", "code", "quote", "image", "guide"],
                showIcons: ["table"],
                parsingConfig: {
                    strikethrough: false,
                    code: false,
                    quote: false,
                    image: false,
                    comment: false
                },
                previewRender: (plainText) => customMarkdownParser(plainText)
            });

            // if we want to get the bullets to look correct on the preview toggle, we need to add a custom renderer to modify that
            var customMarkdownParser = function (text) {
                var renderer = new marked.Renderer();
                var listRenderer = renderer.list;
                renderer.list = (body, ordered, start) => {
                    var html = listRenderer.call(renderer, body, ordered, start);
                    return html.replace("<ul>","<ul class=\"govuk-list govuk-list--bullet\">");
                };
                var returned = marked.parse(text, { renderer: renderer });
                return returned;
            }

            // this can probably be done in the main easyMDE renderconfig using similar custom parser above
            function sanitisePreview() {
                var fullHtml = easyMDE.markdown(easyMDE.value());
                fullHtml = fullHtml.replace("<head></head><body>", "");
                fullHtml = fullHtml.replace("</body>", "");
                fullHtml = fullHtml.replace("<ul>", "<ul class=\"govuk-list govuk-list--bullet\">");
                return fullHtml;
            }

            // finally, when the form is submitted, we want to convert the markdown text back to clean HTML in the textarea, to be saved back into the database.
            document.getElementById('newsForm').onsubmit = function () {
                document.getElementById('Content').value = sanitisePreview();
            }
        }
    </script>
}

@model ReplaceAddressViewModel
@{
    Layout = "_EditLayoutPage.cshtml";
}

@using (Html.BeginRouteForm("ReplaceEstablishmentAddressPost", new { Model.Target }, FormMethod.Post))
{
    @Html.HiddenFor(x => x.AddressLookupResultJsonToken)
    @Html.HiddenFor(x => x.CountiesJsonToken)
    @Html.HiddenFor(x => x.CountriesJsonToken)
    @Html.HiddenFor(x => x.Target)
    @Html.HiddenFor(x => x.Easting)
    @Html.HiddenFor(x => x.Northing)
    <div class="tab-content">
        @if (Model.Step == "editaddress")
        {
            <button type="submit" name="@nameof(Model.ActionName)" value="replace-address" class="button edubase-button inline-button">Replace address</button>
        }
        else if (Model.Step == "selectaddress")
        {
            <button type="submit" name="@nameof(Model.ActionName)" value="address-selected" class="button edubase-button inline-button choose-address">Submit</button>
        }
        @Html.RouteLink("Cancel", "EditEstablishmentDetail", new { id = ViewContext.RouteData.Values["urn"]}, new { @class = "button button-grey edubase-button" })

        <h2 class="heading-medium lookup-heading">Address</h2>
            
        <fieldset class="column-half">
            <legend class="heading-small">Address details</legend>
                
            @if (Model.Step == "enterpostcode")
            {
                <div id="address-search-step1">
                    <div class="form-group">
                        @Html.LabelFor(x => x.CountryId, "Country", new { @class = "form-label" })
                        @Html.DropDownListFor(x => x.CountryId, Model.Countries, "", new { @class = "form-control" })
                    </div>

                    <div class="form-group postcode-search @Html.ValidationCssClassFor(x => x.PostCode)">
                        @Html.LabelFor(x => x.PostCode, "Postcode", new { @class = "form-label" })
                        @Html.ValidationMessageFor(x => x.PostCode)
                        @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field" })
                        <button id="find-address" type="submit" name="@nameof(Model.ActionName)" value="find-address" class="button edubase-button inline-button">Find address</button>
                    </div>
                </div>
            }
            else if (Model.Step == "selectaddress")
            {
                <div id="address-search-step2">

                    <div class="form-group">
                        @Html.LabelFor(x => x.CountryId, "Country", new { @class = "form-label" })
                        @Html.DropDownListFor(x => x.CountryId, Model.Countries, "", new { @class = "form-control" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.PostCode, "Postcode", new { @class = "form-label" })
                        @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field" })
                        <button id="find-address" type="submit" name="@nameof(Model.ActionName)" value="find-address" class="button edubase-button inline-button">Find address</button>
                    </div>

                    <div class="form-group @Html.ValidationCssClassFor(x => x.SelectedUPRN)">
                        @Html.LabelFor(x => x.SelectedUPRN, "Pick an address")
                        @Html.ValidationMessageFor(x => x.SelectedUPRN)
                        @Html.DropDownListFor(x => x.SelectedUPRN, Model.GetLookupAddressSelectListItems(Model.SelectedUPRN), string.Empty, new { @class = "form-control" })
                    </div>
                </div>
            }
            else if (Model.Step == "editaddress")
            {
                @Html.HiddenFor(x => x.SelectedUPRN)
                <div id="address-search-step3">

                    @if (Model.CountryId != Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.CountryId, "Country", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.CountryId, Model.Countries, "", new { @class = "form-control" })
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(x => x.CountryId)
                    }

                    <div class="form-group">
                        @Html.LabelFor(x => x.Street, new { @class = "form-label" })
                        @Html.TextBoxFor(x => x.Street, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Locality, new { @class = "form-label" })
                        @Html.TextBoxFor(x => x.Locality, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Address3, "Address 3", new { @class = "form-label" })
                        @Html.TextBoxFor(x => x.Address3, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Town, Model.TownLabel, new { @class = "form-label" })
                        @Html.TextBoxFor(x => x.Town, new { @class = "form-control" })
                    </div>
                    @if (Model.CountryId == Edubase.Services.Texuna.Lookup.Constants.COUNTRY_ID_UK)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.CountyId, "County", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.CountyId, Model.Counties, "", new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.PostCode, Model.PostCodeLabel, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field", disabled = true })
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.PostCode, Model.PostCodeLabel, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field" })
                        </div>
                    }
                    @Html.HiddenFor(x => x.PostCode)

                    @Html.RouteLink("Wrong postcode?", "ReplaceEstablishmentAddress", new { urn = ViewContext.RouteData.Values["urn"], target = Model.Target }, new { @class = "replace-address" })
                    <br /><br />
                </div>
            }

        </fieldset>

        <div class="button-row">
            @if (Model.Step == "editaddress")
            {
                <button type="submit" name="@nameof(Model.ActionName)" value="replace-address" class="button edubase-button inline-button">Replace address</button>
            }
            else if (Model.Step == "selectaddress")
            {
                <button type="submit" name="@nameof(Model.ActionName)" value="address-selected" class="button edubase-button inline-button choose-address">Submit</button>
            }
            @Html.RouteLink("Cancel", "EditEstablishmentDetail", new { id = ViewContext.RouteData.Values["urn"] }, new { @class = "button button-grey edubase-button" })
        </div>
        
    </div>
}

@section ViewScripts{
    
    <script type="text/javascript">
        $(function () {
            $("select#CountryId").change(function () {
                $(document.forms[0]).submit();
            });
            $("button.choose-address").hide();
            $("#SelectedUPRN").change(function () {
                setTimeout(function () {
                    $($("button.choose-address")[0]).click();
                }, 100);
            });
        });
    </script>
}
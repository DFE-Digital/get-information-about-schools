@using Microsoft.AspNetCore.WebUtilities
@model dynamic
@{
    var startResult = @Model.StartIndex + 1;
    var endResult = (@Model.StartIndex + @Model.PageSize > @Model.Count) ? @Model.Count : @Model.StartIndex + @Model.PageSize;
    var currentPage = @Model.StartIndex / @Model.PageSize;
    var totalPages = @Model.Results.Count / @Model.PageSize;
    var maxPages = ViewData["maxPages"] != null ? (int)ViewData["maxPages"] : 10;
    var paginationStart = 0;
    var paginationFinish = @Model.PageCount;
}

@if (Model.PageCount > maxPages)
{
    if (currentPage < 5)
    {
        paginationFinish = maxPages;
    }
    else if (currentPage + 5 > Model.PageCount)
    {
        paginationFinish = Model.PageCount;
        paginationStart = paginationFinish - maxPages;
    }
    else if (currentPage >= 5)
    {
        paginationFinish = currentPage + 5;
        paginationStart = paginationFinish - maxPages;
    }

}

<nav role="navigation" aria-label="Pagination" class="pagination">
    @if (ViewData.ContainsKey("resultsDescription"))
    {
        <p class="govuk-body-s">@Html.Raw(ViewData["resultsDescription"])</p>
    }
    else
    {
        <p class="govuk-body-s">Showing @startResult - @endResult of @Model.Count</p>
    }

    @if (Model.PageCount > 1)
    {
        <ul class="pagination-links">

            @if (currentPage > 0)
            {
                {
                    var previousUrl = QueryHelpers.AddQueryString(
                        Context.Request.Path,
                        new Dictionary<string, string>
                        {
                            { "startIndex", ((currentPage - 1) * Model.PageSize).ToString() },
                            { "Count", Model.Count.ToString() }
                        }
                    );
                }
                <li>
                    <a href="previousUrl" class="pagination-prev" aria-label="Previous page">&lt;&lt; Previous</a>
                </li>
            }

            @for (int i = paginationStart; i < paginationFinish; i++)
            {
                var displayPage = i + 1;
                if (i == currentPage)
                {
                    <li><span class="go-nowhere numeric-pagination" aria-current="true" aria-label="Page @displayPage.ToString(), current page">@displayPage.ToString()</span></li>
                }
                else
                {
                    {
                        var pageUrl = QueryHelpers.AddQueryString(
                            Context.Request.Path,
                            new Dictionary<string, string>
                            {
                                { "startIndex", (i * Model.PageSize).ToString() },
                                { "Count", Model.Count.ToString() }
                            }
                        );
                    }

                    <li>
                        <a href="pageUrl" class="numeric-pagination" aria-label="Page @displayPage">@displayPage</a>
                    </li>
                }
            }

            @if (currentPage < Model.PageCount - 1)
            {
                {
                    var nextUrl = QueryHelpers.AddQueryString(
                        Context.Request.Path,
                        new Dictionary<string, string>
                        {
                            { "startIndex", ((currentPage + 1) * Model.PageSize).ToString() },
                            { "Count", Model.Count.ToString() }
                        }
                    );
                }
                <li>
                    <a href="nextUrl" class="pagination-next" aria-label="Next page">Next >></a>
                </li>
            }
        </ul>
    }
</nav>

@using System.Linq.Expressions
@using Edubase.Common
@using Edubase.Services.Enums
@using Edubase.Web.UI.Areas.Governors.Models
@model Edubase.Web.UI.Areas.Governors.Models.GovernorViewModel

@if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
{
    @DisplayGid()
    @DisplayName()
    @DisplayDateOfBirth()
    @DisplayPostcode()
    @DisplayTelephoneNumber()
    @DisplayEmail()
    @DisplayAppointmentDates()
}
else
{
    @DisplayGid()
    @DisplayName()
    @DisplayAppointingBody()
    @DisplayAppointmentDates()
    @DisplayEmail()
    @DisplayPostcode()
    @DisplayDateOfBirth()
    @DisplayPreviousName()
    @DisplayTelephoneNumber()
}


@* TODO: Move away from a helper, and to a view model *@
@* Web/Edubase.Web.UI/Views/Shared/EditorTemplates/DateTimeViewModel.cshtml *@
@helper GdsStyledFormFieldTextBoxForNumber(
    Expression<Func<GovernorViewModel, int?>> expression,
    bool isVisible,
    bool isEditable,
    bool isRequired = false,
    string customInputId = null,
    string labelText = null,
    bool displayTooltip = false,
    string tooltipLinkText = null,
    string tooltipHeader = null,
    string tooltipBody = null,
    string placeholder = null,
    bool displayFoldOutDetails = false,
    string hintText = null,
    string foldOutTitleText = "",
    string foldOutContentHtml = "")
{
    if (isVisible)
    {
        var inputId = customInputId ?? @Html.IdFor(expression).ToString();
        // var inputId = customInputId ?? "";
        var errorsWrapperId = $"{inputId}-errors";
        var toolTipLinkId = $"{inputId}-tooltip-link";
        var hintTextId = $"{inputId}-hint";
        var helpTextId = $"{inputId}-help-text";

        var isReadOnly = isVisible && !isEditable;

        var additionalInfo = " (required)";

        var validationCssClassForFormGroup = Html.ValidationCssClassFor(expression);
        var validationCssClassForTextBox = Html.TextBoxValidationClass(expression);


        <div class="govuk-form-group @validationCssClassForFormGroup">
            <label class="govuk-label" for="@inputId">
                @labelText
                @if (isRequired)
                {
                    @additionalInfo
                }
                @if (displayTooltip)
                {
                    <a id="@toolTipLinkId" href="#@helpTextId" class="help-icon modal-link">
                        <span class="govuk-visually-hidden">@tooltipLinkText</span>
                        @helpers.DialogHiddenPrompt()
                    </a>
                }
            </label>
            @if (displayTooltip)
            {
                <div class="govuk-grid-column-full helptext-container">
                    <div id="@helpTextId">
                        <h3 class="govuk-heading-s make-modal-header">@tooltipHeader</h3>
                        <p class="govuk-body">
                            @Html.Raw(tooltipBody)
                        </p>
                    </div>
                </div>
            }

            @if (displayFoldOutDetails)
            {
                <details class="govuk-details govuk-!-margin-bottom-2" data-module="govuk-details">
                    <summary class="govuk-details__summary">
                        <span class="govuk-details__summary-text">
                            @foldOutTitleText
                        </span>
                    </summary>
                    <div class="govuk-details__text">
                        @Html.Raw(foldOutContentHtml)
                    </div>
                </details>
            }

            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(expression, null, new {@class = "govuk-error-message"})
            </span>

            @if (!string.IsNullOrWhiteSpace(hintText))
            {
                <p id="@hintTextId" class="govuk-hint">@hintText</p>
            }

            @{

                var htmlAttributes = new Dictionary<string, object>()
                {
                    {"class", string.Concat("govuk-input ", validationCssClassForTextBox)},
                    {"id", inputId},
                    {"aria_describedBy", errorsWrapperId},
                };

                if (!string.IsNullOrWhiteSpace(placeholder))
                {
                    htmlAttributes.Add("placeholder", placeholder);
                }
                if (isReadOnly)
                {
                    htmlAttributes.Add("disabled", "disabled");
                }

                //
                // Specific to numeric input:
                //
                htmlAttributes.Add("inputmode", "numeric");
            }
            @Html.TextBoxFor(expression, htmlAttributes)
        </div>
    }
}

@* TODO: Move away from a helper, and to a view model *@
@* Web/Edubase.Web.UI/Views/Shared/EditorTemplates/DateTimeViewModel.cshtml *@
@helper GdsStyledFormFieldTextBox(
    Expression<Func<GovernorViewModel, string>> expression,
    bool isVisible,
    bool isEditable,
    bool isRequired = false,
    string customInputId = null,
    string labelText = null,
    bool displayTooltip = false,
    string tooltipLinkText = null,
    string tooltipHeader = null,
    string tooltipBody = null,
    string placeholder = null,
    bool displayFoldOutDetails = false,
    string hintText = null,
    string foldOutTitleText = "",
    string foldOutContentHtml = "")
{
    if (isVisible)
    {
        var inputId = customInputId ?? @Html.IdFor(expression).ToString();
        // var inputId = customInputId ?? "";
        var errorsWrapperId = $"{inputId}-errors";
        var toolTipLinkId = $"{inputId}-tooltip-link";
        var hintTextId = $"{inputId}-hint";
        var helpTextId = $"{inputId}-help-text";

        var isReadOnly = isVisible && !isEditable;

        var additionalInfo = " (required)";

        var validationCssClassForFormGroup = Html.ValidationCssClassFor(expression);
        var validationCssClassForTextBox = Html.TextBoxValidationClass(expression);


        <div class="govuk-form-group @validationCssClassForFormGroup">
            <label class="govuk-label" for="@inputId">
                @labelText
                @if (isRequired)
                {
                    @additionalInfo
                }
                @if (displayTooltip)
                {
                    <a id="@toolTipLinkId" href="#@helpTextId" class="help-icon modal-link">
                        <span class="govuk-visually-hidden">@tooltipLinkText</span>
                        @helpers.DialogHiddenPrompt()
                    </a>
                }
            </label>
            @if (displayTooltip)
            {
                <div class="govuk-grid-column-full helptext-container">
                    <div id="@helpTextId">
                        <h3 class="govuk-heading-s make-modal-header">@tooltipHeader</h3>
                        <p class="govuk-body">
                            @Html.Raw(tooltipBody)
                        </p>
                    </div>
                </div>
            }

            @if (displayFoldOutDetails)
            {
                <details class="govuk-details govuk-!-margin-bottom-2" data-module="govuk-details">
                    <summary class="govuk-details__summary">
                        <span class="govuk-details__summary-text">
                            @foldOutTitleText
                        </span>
                    </summary>
                    <div class="govuk-details__text">
                        @Html.Raw(foldOutContentHtml)
                    </div>
                </details>
            }

            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(expression, null, new {@class = "govuk-error-message"})
            </span>

            @if (!string.IsNullOrWhiteSpace(hintText))
            {
                <p id="@hintTextId" class="govuk-hint">@hintText</p>
            }

            @{

                var htmlAttributes = new Dictionary<string, object>()
                {
                    {"class", string.Concat("govuk-input ", validationCssClassForTextBox)},
                    {"id", inputId},
                    {"aria_describedBy", errorsWrapperId},
                };

                if (!string.IsNullOrWhiteSpace(placeholder))
                {
                    htmlAttributes.Add("placeholder", placeholder);
                }
                if (isReadOnly)
                {
                    htmlAttributes.Add("disabled", "disabled");
                }

            }
            @Html.TextBoxFor(expression, htmlAttributes)
        </div>
    }
}

@helper DisplayGid()
{
    @GdsStyledFormFieldTextBoxForNumber(
        expression: x => x.GID,
        isVisible: Model.DisplayPolicy.Id,
        isEditable: Model.EditPolicy.Id,
        isRequired: false,
        customInputId: "governorGidInput",
        labelText: "Governance role identifier (GID)",
        displayTooltip: true,
        tooltipLinkText: "Help with the governance role identifier field",
        tooltipHeader: "Governance role identifier (GID)",
        tooltipBody: "This field is generated internally by GIAS, and is not editable by users.",
        placeholder: "This value is generated internally by GIAS"
        )
}

@helper DisplayName()
{
    if (Model.EditPolicy.FullName)
    {
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.GovernorTitleId)">
            @Html.LabelFor(x => x.GovernorTitleId, new {@class = "govuk-label", @for = "governor-title-dropdown"})
            @Html.ValidationMessageFor(x => x.GovernorTitleId, null, new {@class = "govuk-error-message"})
            @Html.DropDownListFor(x => x.GovernorTitleId, Model.Titles, "", new {id = "governor-title-dropdown", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.GovernorTitleId)),})
        </div>


        // Note - this element is used dynamically by JavaScript, therefore is hidden (`display:none`) by default
        // (unless JavaScript is enabled to make it visible)
        <div class="govuk-form-group" id="governorFullNameDiv" style="display:none">
            @GdsStyledFormFieldTextBox(
                expression: x => x.FullName,
                isVisible: Model.DisplayPolicy.FullName,
                isEditable: false, // Derived field, therefore never editable
                isRequired: false,
                customInputId: "governorFullNameInput",
                labelText: "Name",
                displayTooltip: true,
                tooltipLinkText: "Help with the name field",
                tooltipHeader: "Name",
                tooltipBody: "The full name input is not editable, because it is auto-populated by joining together name parts."
                )
        </div>

        // Treat Governance Professionals differently to every other type of governance role?
        var isFirstNameRequired = true; // !EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole)
        @GdsStyledFormFieldTextBox(
            expression: x => x.FirstName,
            isVisible: Model.DisplayPolicy.FullName,
            isEditable: Model.EditPolicy.FullName,
            isRequired: isFirstNameRequired,
            customInputId: "governor-first-name-textbox",
            labelText: "First name"
            )

        @GdsStyledFormFieldTextBox(
            expression: x => x.MiddleName,
            isVisible: Model.DisplayPolicy.FullName,
            isEditable: Model.EditPolicy.FullName,
            isRequired: false,
            customInputId: "governor-middle-name-textbox",
            labelText: "Middle name"
            )

        // Treat Governance Professionals differently to every other type of governance role?
        var isLastNameRequired = true; // !EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole)
        @GdsStyledFormFieldTextBox(
            expression: x => x.LastName,
            isVisible: Model.DisplayPolicy.FullName,
            isEditable: Model.EditPolicy.FullName,
            isRequired: isLastNameRequired,
            customInputId: "governor-last-name-textbox",
            labelText: "Last name"
            )
    }
}

@helper DisplayDateOfBirth()
{
    if (Model.EditPolicy.DOB)
    {
        @Html.EditorFor(x => x.DOB,
            new
            {
                tooltipText = "This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions."
            })
    }
}

@helper DisplayPostcode()
{
    @GdsStyledFormFieldTextBox(
        expression: x => x.PostCode,
        isVisible: Model.DisplayPolicy.PostCode,
        isEditable: Model.EditPolicy.PostCode,
        isRequired: false,
        customInputId: "governor-postcode-textbox",
        labelText: "Home postcode",
        displayTooltip: true,
        tooltipLinkText: "Help with the postcode field",
        tooltipHeader: "Home postcode",
        tooltipBody: "This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions."
        )
}

@helper DisplayTelephoneNumber()
{
    @GdsStyledFormFieldTextBox(
        expression: x => x.TelephoneNumber,
        isVisible: Model.DisplayPolicy.TelephoneNumber,
        isEditable: Model.EditPolicy.TelephoneNumber,
        isRequired: false,
        customInputId: "governor-telephone-number-textbox",
        labelText: "Home postcode",
        displayTooltip: true,
        tooltipLinkText: "Help with the telephone number field",
        tooltipHeader: "Telephone number",
        tooltipBody: "This information will not be made public and will only be shared within the Department for Education, across government and with organisations where the department are legally required to do so for business-critical work and safeguarding actions."
        )
}

@helper DisplayEmail()
{
    var isEmailRequired = Model.GovernorRole.OneOfThese(
        eLookupGovernorRole.ChairOfGovernors,
        eLookupGovernorRole.ChairOfTrustees,
        eLookupGovernorRole.AccountingOfficer,
        eLookupGovernorRole.ChiefFinancialOfficer,
        eLookupGovernorRole.ChairOfLocalGoverningBody
        );

    @GdsStyledFormFieldTextBox(
        expression: x => x.EmailAddress,
        isVisible: Model.DisplayPolicy.EmailAddress,
        isEditable: Model.EditPolicy.EmailAddress,
        isRequired: isEmailRequired,
        customInputId: "governor-email-textbox",
        labelText: "Email Address",
        displayTooltip: false,
        displayFoldOutDetails: true,
        foldOutTitleText: "How this email address information is used",
        foldOutContentHtml: @"<p>
            The governance professional personal establishment email address must be added here.
            If the governance professional does not have an establishment email address, then their work/business email address should be entered here.
            If this is also their personal email address, it should be made clear to them how the email address will be used.
            The email address must be an up-to-date, valid, and actively monitored email address.
            This information is not publicly displayed on the website's interface and is classed as personal data, therefore,
            it cannot be shared publicly, for example, through a Freedom of Information (FOI) request.
            Under the conditions of Article 6(1)(e) of the UK-GDPR this information can be shared with other government departments,
            non-departmental public bodies, arm's length bodies and partners for official functions and tasks within the public interest to be performed.
        </p>
        <p>
            This information is very important as it allows the Department for Education to share important information and messages with the governance professional.
        </p>"
        )
}

@helper DisplayAppointmentDates()
{
    var isGovernorRole = false;
    string dateAppointmentEndsTooltipMessage = null;
    if (EnumSets.eGovernanceProfessionalRoles.Contains(Model.GovernorRole))
    {
        dateAppointmentEndsTooltipMessage = "A governance professional may have a fixed appointment. If this applies, enter the date their fixed appointment is due to end. If there is not a fixed appointment, leave this field blank until their appointment ends and then add the date their appointment ended date.";
        isGovernorRole = true;
    }
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out var disableStartDate))
    {
        disableStartDate = false;
    }
    if (!bool.TryParse(ViewData["reactivationWarning"]?.ToString(), out var showReactivationWarning))
    {
        showReactivationWarning = false;
    }
    var editorPrefix = ViewData["editorPrefix"]?.ToString();

    if (Model.EditPolicy.AppointmentStartDate)
    {
        var startDateSaveRecord = isGovernorRole ? "(required to save record)" : "";
        var detail = disableStartDate ? @"(based on current governor's end date)" : $@"{startDateSaveRecord}";
        var title = $"Date of appointment {detail}";
        @Html.EditorFor(x => x.AppointmentStartDate,
            new {title, @readonly = disableStartDate, ClassPrefix = "start-date", editorPrefix})
    }

    if (Model.EditPolicy.AppointmentEndDate)
    {
        var titleText = Model.GovernorRole == eLookupGovernorRole.Member
            ? "Date stepped down"
            : isGovernorRole
                ? "Date appointment ended"
                : "Date term ends";

        @Html.EditorFor(x => x.AppointmentEndDate,
            new
            {
                title = titleText,
                tooltipText = dateAppointmentEndsTooltipMessage,
                showReactivationWarning,
            })
    }
}

@helper DisplayAppointingBody()
{
    if (Model.EditPolicy.AppointingBodyId)
    {
        var inputId = "appointing-body-id-textbox";
        var errorsWrapperId = $"{inputId}-errors";
        <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.AppointingBodyId)">
            @Html.LabelFor(x => x.AppointingBodyId, "Appointing body (required to save record)", new {@class = "govuk-label"})
            <span id="@errorsWrapperId">
                @Html.ValidationMessageFor(x => x.AppointingBodyId, null, new {@class = "govuk-error-message"})
            </span>
            @Html.DropDownListFor(x => x.AppointingBodyId, Model.AppointingBodies, "",
                new {id = "governorAppointingBodyInput", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.AppointingBodyId)), aria_describedBy = errorsWrapperId,})
        </div>
    }
}

@helper DisplayPreviousName()
{

    if (Model.DisplayPolicy.PreviousFullName)
    {
        {
            var inputId = "previous-name-title-select";
            var errorsWrapperId = $"{inputId}-errors";
            <div class="govuk-form-group @Html.ValidationCssClassFor(x => x.PreviousTitleId)">
                @Html.LabelFor(x => x.PreviousTitleId, new {@class = "govuk-label"})
                <span id="@errorsWrapperId">
                    @Html.ValidationMessageFor(x => x.PreviousTitleId, null, new {@class = "govuk-error-message"})
                </span>
                @Html.DropDownListFor(x => x.PreviousTitleId, Model.PreviousTitles, "",
                    new {id = "GovernorPreviousNameTitleInput", @class = string.Concat("govuk-select ", Html.TextBoxValidationClass(x => x.PreviousTitleId)), aria_describedBy = errorsWrapperId,})
            </div>
        }

        @GdsStyledFormFieldTextBox(
            expression: x => x.PreviousFirstName,
            isVisible: Model.DisplayPolicy.PreviousFullName,
            isEditable: Model.EditPolicy.PreviousFullName,
            isRequired: false,
            customInputId: "previous-first-name-textbox",
            labelText: "Previous first name"
            )

        @GdsStyledFormFieldTextBox(
            expression: x => x.PreviousMiddleName,
            isVisible: Model.DisplayPolicy.PreviousFullName,
            isEditable: Model.EditPolicy.PreviousFullName,
            isRequired: false,
            customInputId: "previous-middle-name-textbox",
            labelText: "Previous middle name"
            )

        @GdsStyledFormFieldTextBox(
            expression: x => x.PreviousLastName,
            isVisible: Model.DisplayPolicy.PreviousFullName,
            isEditable: Model.EditPolicy.PreviousFullName,
            isRequired: false,
            customInputId: "previous-last-name-textbox",
            labelText: "Previous last name"
            )
    }
}

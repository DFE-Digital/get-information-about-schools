@using Edubase.Services.Enums
@using Edubase.Common;
@using VM = Edubase.Web.UI.Areas.Groups.Models.CreateEdit.GroupEditorViewModel;
@model VM
@{
    ViewBag.bodyClasses = "create-edit-school school-details";
    ViewBag.hideLogo = true;
    ViewBag.Title = Model.PageTitle;
}


@using (Html.BeginForm((Model.GroupUID == null ? "Create" : "Edit"), "Group", new { area = "Groups" }, FormMethod.Post))
{
    @Html.HiddenFor(x => x.GroupUID)
    @Html.HiddenFor(x => x.GroupTypeMode)
    <div class="grid-row">
        <div class="column-full">
            @Html.ActionLink("Back", "Index", "Search", new { area = "" }, new { @class = "home-link" })
            
            <h1 class="heading-xlarge">@Model.PageTitle</h1>
           
            <div class="column-half">
                @Html.Partial("_ValidationSummary", ViewData.ModelState)

                <div class="form-group @Html.ValidationCssClassFor(x=>x.Name)">
                    <label for="name">@Model.FieldNamePrefix name</label>
                    @Html.ValidationMessageFor(x => x.Name)
                    @if (Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust))
                    {
                        <input value="@Model.Name" disabled class="form-control" />
                        @Html.HiddenFor(x => x.Name)
                    }
                    else
                    {
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                    }
                </div>

                @if (Model.GroupTypeMode == VM.eGroupTypeMode.ChildrensCentre)
                {
                    <div class="form-group">
                        <label for="name">@Model.FieldNamePrefix type</label>
                        @Html.DropDownListFor(x => x.GroupTypeId, Model.CCGroupTypes, new { @class = "form-control" })
                    </div>
                }

                @if (Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust))
                {
                    <div class="form-group">
                        <label for="name">Incorporated on</label>
                        <input value="@(Model.OpenDate.ToDateTime()?.ToString("dd/MM/yyyy") ?? "Not recorded")" disabled class="form-control" />
                        @Html.HiddenFor(x => x.OpenDate.Day)
                        @Html.HiddenFor(x => x.OpenDate.Month)
                        @Html.HiddenFor(x => x.OpenDate.Year)
                    </div>
                }
                else
                {
                    <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(x => x.OpenDate)">
                        <fieldset>
                            <legend>Open date</legend>

                            <div class="form-hint">For exampe, 20 03 2003</div>
                            @Html.ValidationMessageFor(x => x.OpenDate)
                            <span class="inline-form-control">
                                <label for="opendate-day">Day</label>
                                @Html.EduDayDropDownFor(x => x.OpenDate.Day,
                                 new
                                 {
                                     id = "opendate-day",
                                     @class = "form-control",
                                     aria_describedby = "help-opendate-day",
                                 })
                            </span>
                            <span class="inline-form-control">
                                <label for="opendate-month">Month</label>
                                @Html.EduMonthDropDownFor(x => x.OpenDate.Month,
                                 new
                                 {
                                     id = "opendate-month",
                                     @class = "form-control",
                                     aria_describedby = "help-opendate-month",
                                 })

                            </span>
                            <span class="inline-form-contol">
                                <label for="opendate-year">Year</label>
                                @Html.EduYearDropDownFor(x => x.OpenDate.Year,
                                 new
                                 {
                                     id = "opendate-year",
                                     @class = "form-control",
                                     aria_describedby = "help-opendate-year",
                                 })
                            </span>
                        </fieldset>
                    </div>
                }

                @if (!Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust) && Model.InEditMode)
                {
                    <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(x => x.ClosedDate)">
                        <fieldset>
                            <legend>Closed date</legend>

                            <div class="form-hint">For exampe, 20 03 2003</div>
                            @Html.ValidationMessageFor(x => x.ClosedDate)
                            <span class="inline-form-control">
                                <label for="opendate-day">Day</label>
                                @Html.EduDayDropDownFor(x => x.ClosedDate.Day,
                                 new
                                 {
                                     id = "closeddate-day",
                                     @class = "form-control",
                                     aria_describedby = "help-closeddate-day",
                                 })
                            </span>
                            <span class="inline-form-control">
                                <label for="opendate-month">Month</label>
                                @Html.EduMonthDropDownFor(x => x.ClosedDate.Month,
                                 new
                                 {
                                     id = "closeddate-month",
                                     @class = "form-control",
                                     aria_describedby = "help-closeddate-month",
                                 })

                            </span>
                            <span class="inline-form-contol">
                                <label for="opendate-year">Year</label>
                                @Html.EduYearDropDownFor(x => x.ClosedDate.Year,
                                 new
                                 {
                                     id = "closeddate-year",
                                     @class = "form-control",
                                     aria_describedby = "help-closeddate-year",
                                 })
                            </span>
                        </fieldset>
                    </div>
                }

                @if (Model.InEditMode && Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust))
                {
                    <div class="form-group">
                        <label>Companies house number</label>
                        <input type="text" value="@Model.CompaniesHouseNumber" class="form-control" disabled="disabled" />
                        @Html.HiddenFor(x => x.CompaniesHouseNumber)
                    </div>
                }
                
                @if (Model.InEditMode && Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust, eLookupGroupType.SchoolSponsor))
                {
                    <div class="form-group">
                        <label for="groupid">Group ID</label>
                        @Html.TextBoxFor(x => x.GroupId, new { @class = "form-control", maxlength = 120, id = "groupid" })
                    </div>
                }

                @if (Model.InEditMode && Model.GroupType.OneOfThese(eLookupGroupType.MultiacademyTrust, eLookupGroupType.SingleacademyTrust, eLookupGroupType.ChildrensCentresGroup))
                {
                    <div class="form-group">
                        <label for="groupid">Address</label>
                        <input type="text" value="@Model.Address" class="form-control" disabled="disabled" />
                        @Html.HiddenFor(x => x.Address)
                    </div>
                }

                <div class="form-group">
                    <label for="name">@Model.FieldNamePrefix status</label>
                    @Html.DropDownListFor(x => x.GroupStatusId, Model.Statuses, "", new { @class = "form-control" })
                </div>

                @if (Model.InEditMode && Model.GroupType == eLookupGroupType.ChildrensCentresGroup)
                {
                    <div class="form-group">
                        <label for="name">Group manager email</label>
                        @Html.TextBoxFor(x => x.GroupManagerEmailAddress, new { @class = "form-control" })
                    </div>
                }

                @if (Model.GroupTypeMode == VM.eGroupTypeMode.ChildrensCentre)
                {
                    <div class="form-group @Html.ValidationCssClassFor(x => x.LocalAuthorityId)">
                        <label for="name">Local authority</label>
                        @Html.ValidationMessageFor(x=>x.LocalAuthorityId)
                        @if (Model.IsLocalAuthorityEditable)
                        {
                            @Html.DropDownListFor(x => x.LocalAuthorityId, Model.LocalAuthorities, "", new { @class = "form-control" })
                        }
                        else
                        {
                            <input value="@(Model.LocalAuthorityName)" disabled class="form-control" />
                            @Html.HiddenFor(x => x.LocalAuthorityName)
                            @Html.HiddenFor(x => x.LocalAuthorityId)
                        }
                        @Html.HiddenFor(x => x.IsLocalAuthorityEditable)
                    </div>
                }

                @if (Model.GroupUID.HasValue)
                {
                    <div class="form-group">
                        <label>UID</label>
                        <input value="@Model.GroupUID" disabled class="form-control" />
                    </div>
                }

            </div>
        </div>
    </div>

    if (Model.AllowUserToAddLinkedEstablishments)
    {
        <div class="grid-row">
            <div class="column-half">
                <span class="bold-xsmall">Add establishment to this @Model.FieldNamePrefix</span>
                <p class="font-xsmall">Enter the establishment <abbr title="Unique Reference Number">URN</abbr></p>
                <div class="form-group @Html.ValidationCssClassFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)">
                    @Html.ValidationMessageFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)
                    @Html.TextBoxFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn, new { @class = "form-control form-control-1-2 search-box" })
                    <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentSearch" class="button button-find-inline">Find</button>
                </div>
                @if (Model.LinkedEstablishments.LinkedEstablishmentSearch.HasResult)
                {
                    <p class="bold-xsmall">Establishment found</p>
                    <p>@Model.LinkedEstablishments.LinkedEstablishmentSearch.Name</p>

                    <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate)">
                        <fieldset>
                            <legend>Joined date</legend>
                            <div class="form-hint">For exampe, 20 03 2003</div>
                            @Html.ValidationMessageFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate)
                            <span class="inline-form-control">
                                <label for="opendate-day">Day</label>
                                @Html.EduDayDropDownFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate.Day,
                                 new
                                 {
                                     id = "joineddate-day",
                                     @class = "form-control",
                                     aria_describedby = "help-joineddate-day",
                                 })
                            </span>
                            <span class="inline-form-control">
                                <label for="joineddate-month">Month</label>
                                @Html.EduMonthDropDownFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate.Month,
                                 new
                                 {
                                     id = "joineddate-month",
                                     @class = "form-control",
                                     aria_describedby = "help-joineddate-month",
                                 })

                            </span>
                            <span class="inline-form-contol">
                                <label for="joineddate-year">Year</label>
                                @Html.EduYearDropDownFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.JoinedDate.Year,
                                 new
                                 {
                                     id = "joineddate-year",
                                     @class = "form-control",
                                     aria_describedby = "help-joineddate-year",
                                 })
                            </span>
                        </fieldset>
                    </div>

                    <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentAdd" class="button">Add</button>
                    @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Urn)

                }

                @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.Name)
                @Html.HiddenFor(x => x.LinkedEstablishments.LinkedEstablishmentSearch.FoundUrn)

            </div>
        </div>

        <div class="grid-row">
            <div class="column-two-thirds">

                @if (Model.LinkedEstablishments.Establishments.Count > 0)
                {
                    <h2 class="heading-large">List of @Model.ListOfEstablishmentsPluralName (@Model.LinkedEstablishments.Establishments.Count)</h2>
                }

                <ul class="school-results-listing">
                    @for (int i = 0; i < Model.LinkedEstablishments.Establishments.Count; i++)
                    {
                        <li>
                            <h2>@Html.ActionLink(Model.LinkedEstablishments.Establishments[i].Name, "Details", "Establishment", new { id = Model.LinkedEstablishments.Establishments[i].Urn }, new { @class = "bold-small", target = "_blank" })</h2>
                            <dl>
                                <dt>Address:</dt>
                                <dd>@Model.LinkedEstablishments.Establishments[i].Address</dd>
                                <dt><abbr title="Unique Reference Number">URN</abbr>:</dt>
                                <dd>@Model.LinkedEstablishments.Establishments[i].Urn</dd>
                                <dt>School type:</dt>
                                <dd>@Model.LinkedEstablishments.Establishments[i].TypeName</dd>
                                <dt>Headteacher name:</dt>
                                <dd>@Model.LinkedEstablishments.Establishments[i].HeadFullName</dd>

                                @if (!Model.LinkedEstablishments.Establishments[i].EditMode)
                                {
                                    <dt>Joined date:</dt>
                                    <dd>@(Model.LinkedEstablishments.Establishments[i].JoinedDate?.ToString("dd/MM/yyyy") ?? "Not recorded")</dd>
                                    @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].JoinedDate)
                                }

                                @if (Model.GroupTypeMode == VM.eGroupTypeMode.ChildrensCentre)
                                {
                                    <dt></dt>
                                    <dd>@Html.RadioButtonFor(x=> x.CCLeadCentreUrn, Model.LinkedEstablishments.Establishments[i].Urn, new { @class = "form-control" }) Make this children's centre a lead centre</dd>
                                }
                            </dl>

                            @if (Model.LinkedEstablishments.Establishments[i].EditMode)
                            {
                                <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable)">
                                    <fieldset>
                                        <legend>Joined date</legend>
                                        <div class="form-hint">For exampe, 20 03 2003</div>
                                        @Html.ValidationMessageFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable)
                                        <span class="inline-form-control">
                                            <label for="opendate-day">Day</label>
                                            @Html.EduDayDropDownFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable.Day,
                                              new
                                              {
                                                  id = "joineddate-day",
                                                  @class = "form-control",
                                                  aria_describedby = "help-joineddate-day",
                                              })
                                        </span>
                                        <span class="inline-form-control">
                                            <label for="joineddate-month">Month</label>
                                            @Html.EduMonthDropDownFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable.Month,
                                              new
                                              {
                                                  id = "joineddate-month",
                                                  @class = "form-control",
                                                  aria_describedby = "help-joineddate-month",
                                              })
                                        </span>
                                        <span class="inline-form-contol">
                                            <label for="joineddate-year">Year</label>
                                            @Html.EduYearDropDownFor(x => x.LinkedEstablishments.Establishments[i].JoinedDateEditable.Year,
                                              new
                                              {
                                                  id = "joineddate-year",
                                                  @class = "form-control",
                                                  aria_describedby = "help-joineddate-year",
                                              })
                                        </span>
                                    </fieldset>
                                </div>
                            }

                            @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
                            {
                                <div class="form-group">
                                    <button type="submit" class="button button-grey" name="action" value="@VM.ActionLinkedEstablishmentRemove@Model.LinkedEstablishments.Establishments[i].Urn">Remove</button>
                                    <button type="submit" name="action" value="@VM.ActionLinkedEstablishmentEdit@Model.LinkedEstablishments.Establishments[i].Urn" class="button button-grey">Edit</button>
                                </div>
                            }
                            else if (Model.LinkedEstablishments.Establishments[i].EditMode)
                            {
                                <div class="form-group">
                                    <input type="submit" class="button button-grey" name="action" value="@VM.ActionLinkedEstablishmentCancelEdit" />
                                    <button type="submit" class="button button-grey" name="action" value="@VM.ActionLinkedEstablishmentSave">Save</button>
                                </div>
                            }


                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Name)
                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Urn)
                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].Address)
                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].TypeName)
                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].HeadFullName)
                            @Html.HiddenFor(x => x.LinkedEstablishments.Establishments[i].EditMode)
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    <div class="grid-row">
        <div class="column-full">

            @if (Model.InEditMode)
            {
                @Html.ActionLink("Cancel", "Details", "Group", new { area = "Groups", id = Model.GroupUID }, new { @class = "button button-grey cancel mobile-full-width" })
            }
            else
            {
                @Html.ActionLink("Cancel", "Index", "Tools", new { area = "" }, new { @class = "button button-grey cancel mobile-full-width" })
            }
            
            @if (!Model.LinkedEstablishments.Establishments.Any(x => x.EditMode))
            {
                <button type="submit" name="action" class="button mobile-full-width" value="@VM.ActionSave">@(Model.InEditMode ? "Submit" : "Create new " + Model.FieldNamePrefix.ToLower())</button>
            }
        </div>
    </div>
}

@model DateTimeViewModel
@{
    string cssClassPrefix = "";
    string showBinding = null;
    string messageBinding = null;
    string classBinding = null;
    string labelClassName = "";
    string fieldsetClassName = "";
    bool disableHint = false;
    bool.TryParse(ViewData["disableHint"]?.ToString(), out disableHint);

    if (ViewData["labelClass"] != null)
    {
        labelClassName = ViewData["labelClass"].ToString();
    }

    if (ViewData["fieldsetClassName"] != null)
    {
        fieldsetClassName = ViewData["fieldsetClassName"].ToString();
    }
    bool showReactivationWarning;
    if (!bool.TryParse(ViewData["showReactivationWarning"]?.ToString(), out showReactivationWarning))
    {
        showReactivationWarning = false;
    }

    if (ViewData["vueModel"] != null)
    {
        showBinding = String.Concat((string) @ViewData["vueModel"], "Error");
        messageBinding = String.Concat((string) @ViewData["vueModel"], "ErrorMessage");
        classBinding = String.Concat("v-bind:class=\"[", @showBinding, "?'error': '', 'form-group create-edit-form-group date-group']\"");
    }
    else
    {
        classBinding = "class=\"form-group create-edit-form-group date-group "
            + Html.ValidationCssClassFor(x => x) + " " + Html.ValidationCssClassFor(x => x.Day) + " "
            + Html.ValidationCssClassFor(x => x.Month) + " "
            + Html.ValidationCssClassFor(x => x.Year) + "\"";
    }

    if (ViewData["ClassPrefix"] != null)
    {
        cssClassPrefix = ViewData["ClassPrefix"].ToString();
    }
}
<div @Html.Raw(classBinding)>
    <fieldset class="range-group @fieldsetClassName">     
        @if (ViewData["inFilters"] != null)
        {
            <span class="error-message hidden">Please check the date(s) you have entered</span>
            <span class="error-message hidden date-range-error">Please use a valid date range</span>
        }   
        <legend class="bold" style="@ViewData["style"]">@(string.IsNullOrWhiteSpace(ViewData["title"] as string) ? ViewData.ModelMetadata.DisplayName : ViewData["title"])</legend>
        
        @if (!disableHint)
        {
            <div class="form-hint">For example, 20 03 2003</div>
        }

        @if (showReactivationWarning)
        {
            <div class="warning-message">
                <p>Changing this date may reactivate the record</p>
            </div>
        }

        @Html.ValidationMessageFor(x => x)
        @Html.ValidationMessageFor(x => x.Day)
        @Html.ValidationMessageFor(x => x.Month)
        @Html.ValidationMessageFor(x => x.Year)

        @if (ViewData["vueModel"] != null)
        {
            <span class="error-message" v-show="@showBinding" v-html="@messageBinding"></span>
        }
        

        <span class="inline-form-control">
            @Html.LabelFor(x => x.Day, new {@class = labelClassName })
            @Html.TextBoxFor(x => x.Day, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"form-control {cssClassPrefix}-day", 2, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Day") : null))
        </span>
        <span class="inline-form-control">
            @Html.LabelFor(x => x.Month, new { @class = labelClassName })
            @Html.TextBoxFor(x => x.Month, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"form-control {cssClassPrefix}-month", 2, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Month") : null))
        </span>
        <span class="inline-form-control">
            @Html.LabelFor(x => x.Year, new { @class = labelClassName })
            @Html.TextBoxFor(x => x.Year, GetCheckboxAttributes(ViewData["readonly"] as bool? ?? false, $"form-control {cssClassPrefix}-year", 4, ViewData["vueModel"] != null ? String.Concat((string) ViewData["vueModel"], "Year") : null))
        </span>
    </fieldset>
</div>

@functions
{
    object GetCheckboxAttributes(bool? readOnly, string cssClasses, int maxlength, string vueModel)
    {
        if (readOnly.HasValue && readOnly.Value)
            return new { @class = cssClasses, @disabled = "disabled", maxlength = maxlength};

        if(vueModel != null)
            return new { @class = cssClasses, maxlength = maxlength, v_model= vueModel};

        return new { @class = cssClasses, maxlength = maxlength };
    }
}
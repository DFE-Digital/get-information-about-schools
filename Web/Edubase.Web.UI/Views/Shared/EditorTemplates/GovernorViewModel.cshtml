@using Edubase.Services.Enums
@model Edubase.Web.UI.Areas.Governors.Models.GovernorViewModel
    
@{
    bool disableStartDate;
    if (!bool.TryParse(ViewData["disableStartDate"]?.ToString(), out disableStartDate))
    {
        disableStartDate = false;
    }

    bool showReactivationWarning;
    if (!bool.TryParse(ViewData["reactivationWarning"]?.ToString(), out showReactivationWarning))
    {
        showReactivationWarning = false;
    }
}
    
<div class="form-group @Html.ValidationCssClassFor(x => x.GovernorTitleId)">
    @Html.LabelFor(x => x.GovernorTitleId)
    @Html.ValidationMessageFor(x => x.GovernorTitleId)
    @Html.DropDownListFor(x => x.GovernorTitleId, Model.Titles, "", new { @class = "form-control" })
</div>

<div class="form-group @Html.ValidationCssClassFor(x => x.FirstName)">
    @Html.LabelFor(x => x.FirstName, "First name (required to save record)")
    @Html.ValidationMessageFor(x => x.FirstName)
    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control" })
</div>

<div class="form-group @Html.ValidationCssClassFor(x => x.MiddleName)">
    @Html.LabelFor(x => x.MiddleName)
    @Html.ValidationMessageFor(x => x.MiddleName)
    @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control" })
</div>

<div class="form-group @Html.ValidationCssClassFor(x => x.LastName)">
    @Html.LabelFor(x => x.LastName, "Last name (required to save record)")
    @Html.ValidationMessageFor(x => x.LastName)
    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control" })
</div>

@if (Model.DisplayPolicy.Id)
{
<div class="form-group">
    @Html.LabelFor(x => x.GID)
    <input class="form-control" value="@Model.GID" readonly="readonly" disabled="disabled" />
</div>
}

@if (Model.DisplayPolicy.AppointingBodyId)
{
<div class="form-group @Html.ValidationCssClassFor(x => x.AppointingBodyId)">
    @Html.LabelFor(x => x.AppointingBodyId, "Appointing body (required to save record)")
    @Html.ValidationMessageFor(x => x.AppointingBodyId)
    @Html.DropDownListFor(x => x.AppointingBodyId, Model.AppointingBodies, "", new { @class = "form-control" })
</div>
}

@if (Model.DisplayPolicy.AppointmentStartDate)
{
    var detail = disableStartDate ? @"based on current governor's end date" : @"required to save record";
    var title = $"Date of appointment ({detail})";

    @Html.EditorFor(x => x.AppointmentStartDate, new { title, @readonly = disableStartDate, ClassPrefix = "start-date" })
}

@if (Model.DisplayPolicy.AppointmentEndDate)
{
    @Html.EditorFor(x => x.AppointmentEndDate, new {title = Model.GovernorRole == eLookupGovernorRole.Member ? "Date stepped down" : "Date term ends", showReactivationWarning })
}

@if (Model.DisplayPolicy.EmailAddress)
{
    <div class="form-group @Html.ValidationCssClassFor(x => x.EmailAddress)">
        @Html.LabelFor(x => x.EmailAddress, "Email address (required to save record)")
        @Html.ValidationMessageFor(x => x.EmailAddress)
        @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control" })
    </div>
}

@if (Model.DisplayPolicy.PostCode)
{
    <div class="form-group @Html.ValidationCssClassFor(x => x.PostCode)">
        @Html.LabelFor(x => x.PostCode)
        @Html.ValidationMessageFor(x => x.PostCode)
        @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control" })
    </div>
}

@if (Model.DisplayPolicy.DOB)
{
    @Html.EditorFor(x => x.DOB)
}

@if (Model.DisplayPolicy.PreviousFullName)
{
    <div class="form-group @Html.ValidationCssClassFor(x => x.PreviousTitleId)">
        @Html.LabelFor(x => x.PreviousTitleId)
        @Html.ValidationMessageFor(x => x.PreviousTitleId)
        @Html.DropDownListFor(x => x.PreviousTitleId, Model.PreviousTitles, "", new { @class = "form-control" })
    </div>

    <div class="form-group @Html.ValidationCssClassFor(x => x.PreviousFirstName)">
        @Html.LabelFor(x => x.PreviousFirstName)
        @Html.ValidationMessageFor(x => x.PreviousFirstName)
        @Html.TextBoxFor(x => x.PreviousFirstName, new { @class = "form-control" })
    </div>

    <div class="form-group @Html.ValidationCssClassFor(x => x.PreviousMiddleName)">
        @Html.LabelFor(x => x.PreviousMiddleName)
        @Html.ValidationMessageFor(x => x.PreviousMiddleName)
        @Html.TextBoxFor(x => x.PreviousMiddleName, new { @class = "form-control" })
    </div>

    <div class="form-group @Html.ValidationCssClassFor(x => x.PreviousLastName)">
        @Html.LabelFor(x => x.PreviousLastName)
        @Html.ValidationMessageFor(x => x.PreviousLastName)
        @Html.TextBoxFor(x => x.PreviousLastName, new { @class = "form-control" })
    </div>
}

@if (Model.DisplayPolicy.TelephoneNumber)
{
    <div class="form-group @Html.ValidationCssClassFor(x => x.TelephoneNumber)">
        @Html.LabelFor(x => x.TelephoneNumber, "Telephone (required to save record)")
        @Html.ValidationMessageFor(x => x.TelephoneNumber)
        @Html.TextBoxFor(x => x.TelephoneNumber, new { @class = "form-control" })
    </div>
}
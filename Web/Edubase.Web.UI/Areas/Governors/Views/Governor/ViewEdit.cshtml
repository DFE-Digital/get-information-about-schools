@using Edubase.Services.Enums;
@using System.Linq.Expressions;
@model GovernorsGridViewModel
@{ 
    Layout = Model.Layout;
}

@if (Model.EditMode)
{
        <div class="column-half">
            @if (Model.GroupUId.HasValue)
            {
                @Html.ActionLink("View governance", "Details", "Group", null, null, "governance", new { area = "Groups", id = Model.GroupUId }, new { @class = "button button-grey cancel" })
            }
            else
            {
                @Html.ActionLink("View governance", "Details", "Establishment", null, null, "governance", new { area = "", id = Model.EstablishmentUrn }, new { @class = "button button-grey cancel" })
            }

            <h2 class="heading-medium">Governance</h2>
            <h3 class="heading-small">Delgated authority of local governing body</h3>
            @DisplayGovernanceMode()
            
            <h2 class="heading-small">Add person</h2>
            

            @using (Html.BeginRouteForm(Model.EstablishmentUrn.HasValue ? "EstabAddGovernor" : "GroupAddGovernor", new { groupUId = Model.GroupUId, establishmentUrn = Model.EstablishmentUrn }, FormMethod.Get))
            {
                <div class="form-group">
                    <label class="form-label">Select role</label>
                    @Html.DropDownList("role", Model.GovernorRoles.Select(x => new SelectListItem {Text = FormatHelpers.FirstCharToUpper(x.Name.ToLower()), Value = ((eLookupGovernorRole) x.Id).ToString()}),
                        new {id = "roleid", @class = "form-control"})
                </div>
                <div class="form-group">
                    <input type="submit" value="Add person" class="button mobile-full-width" />
                </div>
                
            }

        </div>
}
else
{
    <div class="grid-row">
        <div class="column-half">

            <h2 class="heading-medium">Governance</h2>
            @DisplayGovernanceMode()
            
        </div>
    </div>
}


@if (Model.DomainModel.HasGovernors)
{
        <div class="column-full">
        <h2 class="bold-small">Delgated authority of local governing body</h2>
        <div class="expanding-content-wrapper">
            <a href="#" class="expanding-content-trigger">
                Show details
            </a>
            <div class="expanding-content panel-indent">
                Delegated authority in relation to:
                - the conduct of the schools;
                - promoting high standards of educational achievement in line with the
                overall strategic direction of the Trust (contributing, in collaboration
                with the head of school and senior leadership team, to producing,
                monitoring and evaluating the implementation and effectiveness of the
                school improvement plan in relation to expected outcomes for
                learners, leadership and management, teaching and learning, quality
                of provision, safeguarding, students' personal development, behaviour
                and welfare;
                - ensuring that the curriculum for the schools is appropriate, balanced,
                broadly based and operates within the context of the school's
                statement of values and ethos as agreed by the Trust;
                - detailed scrutiny of performance against the schools'improvement
                plans and decision making on action required;
                - approval of school policies;
                - providing advice and information to the Trust Board on performance
                in relation to the above.
            </div>
        </div>
    </div>
    

        @DisplayGovernors()

       
}
else
{
    <p>There is no governance information for this @Model.ParentEntityName</p>
}

@helper DisplayGovernors()
{

    <div class="column-two-thirds">
        @if (Model.DomainModel.HasFullAccess)
        {
            // Render lists
            foreach (var grid in Model.Grids)
            {
                <div class="governor-list">
                    <h2 class="bold-small">@grid.Title</h2>
                    @if (grid.Rows.Any())
                    {
                        foreach (var row in grid.Rows)
                        {
                            <div id="gov-id-@row.Model.Id" class="governor-edit-panel @Html.DuplicateCssClassFor(row.Model.Id)">
                                <h2 class="bold-xsmall" id="gid-@row.Model.Id">@row.Cells[0].Text</h2>
                                <dl>
                                    @foreach (var cell in row.Cells.Skip(1))
                                    {
                                        <dt>@cell.Parent.Text:</dt>
                                        <dd>@(cell.Text ?? "Not recorded")</dd>
                                    }
                                </dl>

                                @if (Model.EditMode && grid.Tag == "current")
                                {
                                    if (Model.RemovalGid != row.Model.Id)
                                    {
                                        <div class="button-wrapper">
                                            @if ((eLookupGovernorRole) row.Model.RoleId == eLookupGovernorRole.Establishment_SharedLocalGovernor || (eLookupGovernorRole)row.Model.RoleId == eLookupGovernorRole.Establishment_SharedChairOfLocalGoverningBody)
                                            {
                                                @Html.RouteLink("Edit", "EditSharedGovernor", 
                                                    new { establishmentUrn = Model.EstablishmentUrn, governorId = row.Model.Id },
                                                    new { @class = "button button-grey mobile-full-width" })
                                            }
                                            else
                                            {
                                                @Html.RouteLink("Edit", Model.EstablishmentUrn.HasValue ? "EstabEditGovernor" : "GroupEditGovernor",
                                                    new { establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id }, 
                                                    new { @class = "button button-grey mobile-full-width" })
                                            }
                                            @Html.RouteLink("Remove", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance",
                                                null, null, "gid-" + row.Model.Id,
                                                new { establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, removalGid = row.Model.Id },
                                                new { @class = "button button-grey mobile-full-width" })

                                            @if (EnumSets.SingularGovernorRoles.Contains(row.Model.RoleId.Value))
                                            {
                                                @Html.RouteLink("Replace", Model.EstablishmentUrn.HasValue ? "EstabReplaceGovernor" : "GroupReplaceGovernor",
                                                    new { establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId, gid = row.Model.Id },
                                                    new { @class = "button button-grey mobile-full-width" })
                                            }
                                        </div>
                                    }
                                    else // We're in 'removal mode' for this governor.
                                    {
                                        <div class="governor-edit-panel">

                                            @using (Html.BeginRouteForm(Model.EstablishmentUrn.HasValue ? "EstabDeleteOrRetireGovernor" : "GroupDeleteOrRetireGovernor", FormMethod.Post))
                                            {
                                                @Html.HiddenFor(x => x.RemovalGid)
                                                @Html.HiddenFor(x => x.EstablishmentUrn)
                                                @Html.HiddenFor(x => x.GroupUId)
                                                @Html.HiddenFor(x => x.GovernorShared)

                                                <div class="form-group">
                                                    <fieldset class="inline toggle-panels">
                                                        <legend class="visually-hidden">Do you wish to retire or remove this person?</legend>
                                                        <label class="block-label selection-button-radio" for="removal-mode-1">
                                                            <input type="radio" name="removal-mode" id="removal-mode-1" value="1" checked="checked" data-toggle-panel=".retire-governor" />
                                                            This person has completed their term
                                                        </label>
                                                        <label class="block-label selection-button-radio" for="removal-mode-2">
                                                            <input type="radio" name="removal-mode" id="removal-mode-2" value="2" data-toggle-panel=".remove-governor" />
                                                            Remove person
                                                        </label>
                                                    </fieldset>
                                                </div>

                                                <div class="retire-governor date-group-wrap">                                                   
                                                    <p class="font-xsmall">Provide a data term ends to retire this person</p>
                                                    @RenderDateSelector(x => x.RemovalAppointmentEndDate, x => x.RemovalAppointmentEndDate.Day, x => x.RemovalAppointmentEndDate.Month, x => x.RemovalAppointmentEndDate.Year, "Date term ends")

                                                    <input type="submit" name="action" value="Save" class="button" />

                                                    @Html.RouteLink("Cancel", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance", new { establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId }, new { @class = "button button-grey" })

                                                </div>

                                                <div class="remove-governor date-group-wrap">
                                                    <p class="font-xsmall">Confirm you wish to remove this person</p>
                                                    <input type="submit" name="action" value="Remove" class="button" />

                                                    @Html.RouteLink("Cancel", Model.EstablishmentUrn.HasValue ? "EstabEditGovernance" : "GroupEditGovernance", new { establishmentUrn = Model.EstablishmentUrn, groupUId = Model.GroupUId }, new { @class = "button button-grey" })
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="none">Not recorded</p>
                    }
                </div>
            }
        }
        else
        {
            // Render tables
            foreach (var grid in Model.Grids)
            {
                <div class="governor-grid">
                    <h2 class="bold-small">@grid.Title</h2>
                    @if (grid.Rows.Any())
                    {
                        <table>
                            <thead>
                                <tr>
                                    @foreach (var column in grid.HeaderCells)
                                    {
                                        <th>@(column.Text ?? "Not recorded")</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in grid.Rows)
                                {
                                    <tr>
                                        @foreach (var cell in row.Cells)
                                        {
                                            <td>@(cell.Text ?? "Not recorded")</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="none">Not recorded</p>
                    }
                </div>
            }
            
            // Render mobile table/list combo
            foreach (var grid in Model.Grids)
            {
                @*<div class="governor-list mobile-view">
                    <h2 class="bold-small">@grid.Title</h2>
                    @if (grid.Rows.Any())
                    {
                        <table>
                            <tbody>
                                @foreach (var row in grid.Rows)
                                {
                                    foreach (var cell in row.Cells)
                                    {
                                        <tr>
                                            <td class="label">@cell.Parent.Text</td>
                                            <td class="@Html.Conditional(cell == row.Cells.First(), "name")">@(cell.Text ?? "Not recorded")</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="none">Not recorded</p>
                    }
                </div>*@
            }
        }
    </div>
}


@helper RenderDateSelector(Expression<Func<GovernorsGridViewModel, DateTimeViewModel>> vmSelector,
    Expression<Func<GovernorsGridViewModel, int?>> daySelector, Expression<Func<GovernorsGridViewModel, int?>> monthSelector,
    Expression<Func<GovernorsGridViewModel, int?>> yearSelector, string label)
{
var id = label.Replace(" ", "").ToLower();
    <div class="form-group create-edit-form-group drop-down-date range-group @Html.ValidationCssClassFor(vmSelector)">
        <fieldset>
            <legend class="bold-xsmall" style="font-weight:bold;">@label</legend>
            <div class="form-hint">For example, 20 03 2003</div>
            @Html.ValidationMessageFor(vmSelector)
            <span class="inline-form-control">
                <label for="@id-day">Day</label>
                @Html.EduDayDropDownFor(daySelector, new { id = $"{id}-day", @class = "form-control", aria_describedby = $"help-{id}-day" })
            </span>
            <span class="inline-form-control">
                <label for="@id-month">Month</label>
                @Html.EduMonthDropDownFor(monthSelector, new { id = $"{id}-month", @class = "form-control", aria_describedby = $"help-{id}-month" })
            </span>
            <span class="inline-form-contol">
                <label for="@id-year">Year</label>
                @Html.EduYearDropDownFor(yearSelector, new { id = $"{id}-year", @class = "form-control", aria_describedby = $"help-{id}-year" })
            </span>
        </fieldset>
    </div>
}

@helper DisplayGovernanceMode()
{ 
    if (Model.EstablishmentUrn.HasValue)
    {
        if (!Model.GovernanceMode.HasValue || Model.GovernanceMode == eGovernanceMode.LocalGovernors)
        {
            <p>This establishment has local governors, not shared governors.</p>
        }
        else if (Model.GovernanceMode == eGovernanceMode.LocalAndSharedGovernors)
        {
            <p>This establishment has local governors and also shares governors with other academies in the trust.</p>
        }
        else if (Model.GovernanceMode == eGovernanceMode.NoLocalGovernors)
        {
            <p>This establishment is part of a multi academy trust and does not have local governors.</p>
        }
        else if (Model.GovernanceMode == eGovernanceMode.SharesLocalGovernors)
        {
            <p>This establishment shares local governors with other academies in the trust.</p>
        }
    }

    if (Model.EditMode)
    {
        @Html.RouteLink("Edit", "EstabEditGovernanceMode", new { establishmentUrn = Model.EstablishmentUrn }, new { @class = "button button-grey" })
    }
}
@model ReplaceAddressViewModel
@{
    Layout = "_EditLayoutPage.cshtml";
}

@using (Html.BeginRouteForm("ReplaceEstablishmentAddressPost", FormMethod.Post))
{
    @Html.HiddenFor(x => x.AddressLookupResultJsonToken)
    @Html.HiddenFor(x => x.CountiesJsonToken)
    @Html.HiddenFor(x => x.CountriesJsonToken)
    <div class="tab-content">
        @*<input type="submit" class="button" value="Save" />*@
        <a href="#" class="button button-grey">Cancel</a>
        <h2 class="heading-medium lookup-heading">Address</h2>
            
            <fieldset class="column-half">
                <legend class="heading-small">Address details</legend>
                
                @if (Model.Step == "enterpostcode")
                {
                    <div id="address-search-step1">
                        <div class="form-group">
                            @Html.LabelFor(x => x.CountryId, "Country", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.CountryId, Model.Countries, "", new { @class = "form-control" })
                        </div>

                        <div class="form-group postcode-search">
                            @Html.LabelFor(x => x.PostCode, "Postcode", new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field" })
                            <button type="submit" name="@nameof(Model.ActionName)" value="find-address" class="button edubase-button inline-button">Find address</button>
                        </div>
                    </div>
                }
                else if (Model.Step == "selectaddress")
                {
                    @Html.HiddenFor(x => x.PostCode)
                    @Html.HiddenFor(x => x.CountryId)
                    <div id="address-search-step2">
                        <div class="form-group @Html.ValidationCssClassFor(x => x.SelectedUPRN)">
                            @Html.LabelFor(x => x.SelectedUPRN, "Pick an address")
                            @Html.ValidationMessageFor(x => x.SelectedUPRN)
                            @Html.DropDownListFor(x => x.SelectedUPRN, Model.GetLookupAddressSelectListItems(Model.SelectedUPRN), string.Empty, new { @class = "form-control" })
                            <br /><br />
                            <button type="submit" name="@nameof(Model.ActionName)" value="address-selected" class="button edubase-button inline-button">Submit</button>
                        </div>
                    </div>
                }
                else if (Model.Step == "editaddress")
                {
                    @Html.HiddenFor(x => x.SelectedUPRN)
                    @Html.HiddenFor(x => x.CountryId)
                    <div id="address-search-step3">
                        <div class="form-group">
                            @Html.LabelFor(x => x.Street, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Street, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Locality, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Locality, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Address3, new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Address3, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Town, "City / Town", new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.Town, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.CountyId, "County", new { @class = "form-label" })
                            @Html.DropDownListFor(x => x.CountyId, Model.Counties, "", new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.PostCode, "Postcode", new { @class = "form-label" })
                            @Html.TextBoxFor(x => x.PostCode, new { @class = "form-control postcode-field", disabled = true })
                            @Html.HiddenFor(x => x.PostCode)
                        </div>
                        @Html.RouteLink("Wrong postcode?", "ReplaceEstablishmentAddress", new { urn = ViewContext.RouteData.Values["urn"] }, new { @class = "replace-address" })
                    </div>
                }

            </fieldset>

            @if (Model.Step == "editaddress")
            {
                <div class="button-row">
                    <button type="submit" name="@nameof(Model.ActionName)" value="replace-address" class="button edubase-button inline-button">Replace address</button>
                    @*<input type="submit" class="button" value="Save" v-show="step === 2 || !isUk" v-on:click.prevent="allDone" />
                    <a href="#" class="button button-grey" v-on:click.prevent="allDone">Cancel</a>*@
                </div>
            }
    </div>
}